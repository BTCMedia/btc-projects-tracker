<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"
  xmlns:dc="http://purl.org/dc/elements/1.1/">
  <author>
    <name>flip_btc</name>
  </author>
  <id>https://release-tracker.b.tc/</id>
  <title>Bitcoin Projects Release Tracker</title>
  <updated>2021-01-16T07:01:24+00:00</updated>
  <entry>
    <id>https://github.com/bitcoin/bitcoin/releases/tag/v0.21.0</id>
    <link href="https://github.com/bitcoin/bitcoin/releases/tag/v0.21.0"/>
    <summary>Bitcoin Core version 0.21.0 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.21.0/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.21.0.md

Preferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.</summary>
    <title>bitcoin/bitcoin: v0.21.0</title>
    <updated>2021-01-15T19:52:11Z</updated>
    <dc:date>2021-01-15T19:52:11Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ElementsProject/lightning/releases/tag/v0.9.3rc2</id>
    <link href="https://github.com/ElementsProject/lightning/releases/tag/v0.9.3rc2"/>
    <summary></summary>
    <title>ElementsProject/lightning: v0.9.3rc2</title>
    <updated>2021-01-15T18:33:16Z</updated>
    <dc:date>2021-01-15T18:33:16Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bwt-dev/bwt/releases/tag/v0.2.1</id>
    <link href="https://github.com/bwt-dev/bwt/releases/tag/v0.2.1"/>
    <summary>### Changelog

- Migrated to the [@bwt-dev](https://github.com/bwt-dev) github org and split up into:

  [bwt](https://github.com/bwt-dev/bwt), [bwt-electrum-plugin](https://github.com/bwt-dev/bwt-electrum-plugin), [libbwt](https://github.com/bwt-dev/libbwt), [libbwt-jni](https://github.com/bwt-dev/libbwt-jni) and [libbwt-nodejs](https://github.com/bwt-dev/libbwt-nodejs).

- Java Native Bindings for `libbwt` ([libbwt-jni](https://github.com/bwt-dev/libbwt-jni), #73)

- Support for tracking standalone addresses (#14)

  Using `--address &lt;address&gt;` or `--address-file &lt;path&gt;`.

- New config options: `force_rescan` (9e7ccbe), `setup_logger` (35fc49f) and `require_addresses` (162790d)

- Gracefully wait for bitcoind to warm-up (dec6d46)

- Support for `android_logger` (74b2b2f)

- Scrub bitcoin authentication from logs (c31def7)

- Improved syncing/scanning progress updates (faba3f, 6e282fd, fdd46f3, 5ba2a0b)

- Indexer: Fix excessive importing/rescanning (a20ae79)

- Indexer: Fix cache invalidation for spends lookups (360eaee)

- Indexer: Fix handling of missing mempool entries (e9b7511)

- Electrum: Fix TCP listener not shutting down on shutdown signal (5bd639a)

- Docker/CI: Update to Rust v1.49 (5bd639a)

Breaking CLI changes:

- The `--bare-xpub` option was removed. Use a descriptor instead.


------------

Also see the v0.2.1 releases for [bwt-electrum-plugin](https://github.com/bwt-dev/bwt-electrum-plugin/releases/tag/v0.2.1), [libbwt](https://github.com/bwt-dev/libbwt/releases/tag/v0.2.1), [libbwt-nodejs](https://github.com/bwt-dev/libbwt-nodejs/releases/tag/v0.2.1) and [libbwt-jni](https://github.com/bwt-dev/libbwt-jni/releases/tag/v0.2.1).

### Installation

Installation instructions are [available on the README](https://github.com/bwt-dev/bwt#installation).

### Verifying signatures

The releases are signed by Nadav Ivgi (@shesek). The public key can be verified on the [PGP WoT](http://keys.gnupg.net/pks/lookup?op=vindex&amp;fingerprint=on&amp;search=0x81F6104CD0F150FC),
[github](https://api.github.com/users/shesek/gpg_keys), [twitter](https://twitter.com/shesek), [keybase](https://keybase.io/nadav), [hacker news](https://news.ycombinator.com/user?id=nadaviv) and [this video presentation](https://youtu.be/SXJaN2T3M10?t=4).

```bash
# Download (change x86_64-linux to your platform)
$ wget https://github.com/bwt-dev/bwt/releases/download/v0.2.1/bwt-0.2.1-x86_64-linux.tar.gz

# Fetch public key
$ gpg --keyserver keyserver.ubuntu.com --recv-keys FCF19B67866562F08A43AAD681F6104CD0F150FC

# Verify signature
$ wget -qO - https://github.com/bwt-dev/bwt/releases/download/v0.2.1/SHA256SUMS.asc \
  | gpg --decrypt - | grep ' bwt-0.2.1-x86_64-linux.tar.gz$' | sha256sum -c -

$ tar zxvf bwt-0.2.1-x86_64-linux.tar.gz
$ ./bwt-0.1.5-x86_64-linux/bwt --xpub &lt;xpub&gt; ...
```

The signature verification should show `Good signature from &quot;Nadav Ivgi &lt;nadav@shesek.info&gt;&quot; ... Primary key fingerprint: FCF1 9B67 ...` and `bwt-0.2.1-x86_64-linux.tar.gz: OK`.

### Reproducible builds

The builds are fully reproducible.

You can verify the checksums against the v0.2.1 builds on Travis CI: https://travis-ci.org/github/bwt-dev/bwt/builds/754451937

See [more details here](https://github.com/bwt-dev/bwt#reproducible-builds).</summary>
    <title>bwt-dev/bwt: v0.2.1</title>
    <updated>2021-01-14T13:06:37Z</updated>
    <dc:date>2021-01-14T13:06:37Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/rootzoll/raspiblitz/releases/tag/v1.6.3</id>
    <link href="https://github.com/rootzoll/raspiblitz/releases/tag/v1.6.3"/>
    <summary>with mempool 2.0.1, specter 1.0.0, joininbox v0.1.16 &amp; smaller updates + fixes</summary>
    <title>rootzoll/raspiblitz: v1.6.3</title>
    <updated>2021-01-14T02:48:02Z</updated>
    <dc:date>2021-01-14T02:48:02Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/unchained-capital/caravan/releases/tag/v0.3.5</id>
    <link href="https://github.com/unchained-capital/caravan/releases/tag/v0.3.5"/>
    <summary>Update `unchained-wallets` version in order to support new Coldcard firmware version.</summary>
    <title>unchained-capital/caravan: v0.3.5</title>
    <updated>2021-01-12T20:01:19Z</updated>
    <dc:date>2021-01-12T20:01:19Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/mempool/mempool/releases/tag/v2.0.1</id>
    <link href="https://github.com/mempool/mempool/releases/tag/v2.0.1"/>
    <summary>Mempool v2.0.1 is a hotfix release:

* Fixes memory leak by not stacking data in the scan accumulator (#273)
* Also handle going from zero to initial graph data on dashboard</summary>
    <title>mempool/mempool: v2.0.1</title>
    <updated>2021-01-12T12:19:10Z</updated>
    <dc:date>2021-01-12T12:19:10Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ElementsProject/lightning/releases/tag/v0.9.3rc1</id>
    <link href="https://github.com/ElementsProject/lightning/releases/tag/v0.9.3rc1"/>
    <summary></summary>
    <title>ElementsProject/lightning: v0.9.3rc1</title>
    <updated>2021-01-11T16:48:00Z</updated>
    <dc:date>2021-01-11T16:48:00Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.5</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.5"/>
    <summary>This release includes changes in the way we index invoices for search.
As such, after update, the invoice search feature of BTCPay Server might not work for a while. (~5min if you have lot's of invoices)

### Improvements:

* Support a subset of output descriptor in the wallet setup @Kukks
* Improved styling of the notification dropdown (see #2167) @ubolator @dennisreimann
* API keys and server's url can be shown as QR Code to facilitate pairing @Kukks
* Greenfield API: Add `DefaultPaymentMethod` to the store's settings @Kukks
* Greenfield API: Can configure on-chain payment methods @Kukks @NicolasDorier
* UI Improvements (see this [commit list](https://github.com/btcpayserver/btcpayserver/pull/2151/commits)) @dennisreimann

### Bug fixes:

* Always normalize the invoice's currency in uppercase @NicolasDorier
* If a label on a wallet's transaction does not have color, it should still show it @NicolasDorier
* Do not include Tor Location header when querying the modal checkout (see #2180) @Kukks
* Webhooks should not be randomly deleted anymore. @NicolasDorier
* Fix header not showing properly after login to BTCPay Server (see #2155) @dennisreimann
* Bug: Searching invoices was timing out if there was too much invoices @rockstardev @Kukks

### Miscellaneous:

* Removing the old text search engine (DBreeze) @rockstardev @Kukks
* Add doc for asking permissions to BTCPayServer see [link](docs/greenfield-authorization.md). @Kukks</summary>
    <title>btcpayserver/btcpayserver: v1.0.6.5</title>
    <updated>2021-01-11T14:59:56Z</updated>
    <dc:date>2021-01-11T14:59:56Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/mempool/mempool/releases/tag/v2.0.0</id>
    <link href="https://github.com/mempool/mempool/releases/tag/v2.0.0"/>
    <summary>Mempool v2 is here!

&lt;img width=&quot;1161&quot; alt=&quot;Screen Shot 2021-01-11 at 23 38 10&quot; src=&quot;https://user-images.githubusercontent.com/232186/104195536-16bfd480-5466-11eb-8c66-7e5ed81bf79d.png&quot;&gt;

* Supports Bitcoin Core RPC, Electrum Server, or Esplora backends
* Fully functional block, address, and transaction explorer with APIs
* Dashboard layout displaying fee estimates and other real-time stats
* Support for multiple networks including Testnet, Liquid, and Bisq
* Optional support for Angular Universal Server Side Rendering
* Internationalization support for 20+ languages and locales
* And much more!</summary>
    <title>mempool/mempool: v2.0.0</title>
    <updated>2021-01-11T14:43:58Z</updated>
    <dc:date>2021-01-11T14:43:58Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta.rc5</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta.rc5"/>
    <summary>This release marks the first major release in the `v0.12.x` series! As this is a major release several new features are included in this release including: anchor commitment types are now the default, anchor commitment support for watchtowers, new arguments to auto compact the database as well as drop the `wtxmgr` state, generic wallet PSBT crafting+signing, and much more! As usual, this release contains several important bug fixes, so we recommend all users update. 

# Database Migrations
A migration to initialize a top-level peers bucket is included in this release. The bucket is used to track flap counts for peers that we have channels open with across restarts. These values are used to rate-limit the amount of memory that `lnd` uses to track peers online state, ensuring that we do not store large volumes of uptime information for peers that are constantly changing online state.

This release contains a migration to initialize a top-level-bucket for an outpoint index. There is also a subsequent migration that populates this index with an outpoint's status. This will cut down on expensive `bbolt` transactions throughout the codebase. The migration process should look something like this upon initial start up:
```
2020-12-21 10:45:07.256 [INF] LTND: Version: 0.12.0-beta commit=v0.12.0-beta, build=production, logging=default
2020-12-21 10:45:07.257 [INF] LTND: Active chain: Bitcoin (network=mainnet)
2020-12-21 10:45:07.257 [INF] LTND: Opening the main database, this might take a few minutes...
2020-12-21 10:45:07.257 [INF] LTND: Opening bbolt database, sync_freelist=false, auto_compact=false
2020-12-21 10:45:07.304 [INF] CHDB: Checking for schema update: latest_version=20, db_version=17
2020-12-21 10:45:07.304 [INF] CHDB: Performing database schema migration
2020-12-21 10:45:07.304 [INF] CHDB: Applying migration #18
2020-12-21 10:45:07.304 [INF] CHDB: Creating top-level bucket: &quot;peers-bucket&quot; ...
2020-12-21 10:45:07.305 [INF] CHDB: Created top-level bucket: &quot;peers-bucket&quot;
2020-12-21 10:45:07.305 [INF] CHDB: Applying migration #19
2020-12-21 10:45:07.305 [INF] CHDB: Creating top-level bucket: &quot;outpoint-bucket&quot; ...
2020-12-21 10:45:07.305 [INF] CHDB: Created top-level bucket: &quot;outpoint-bucket&quot;
2020-12-21 10:45:07.305 [INF] CHDB: Applying migration #20
2020-12-21 10:45:07.324 [INF] LTND: Database now open (time_to_open=67.71764ms)!
```

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.12.0-beta.rc5.txt` and `manifest-v0.12.0-beta.rc5.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.12.0-beta.rc5.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.12.0-beta.rc5.txt'
gpg: Signature made Tue Dec 15 18:57:27 2020 PST
gpg:                using RSA key 60A1FA7DA5BFF08BDCBBE7903BBD59E99B280306
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.


For this release roasbeef's signature is the secondary signature which can be verified with the following command: 
```
gpg --verify roasbeef-manifest-v0.12.0-beta.rc5.txt.sig manifest-v0.12.0-beta.rc5.txt
gpg: Signature made Wed Sep 30 17:35:20 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

## Verifying the Release Timestamp 

From this new version onwards, in addition to time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: `manifest-v0.12.0-beta.rc5.txt.sig.ots` and `manifest-v0.12.0-beta.rc5.txt.ots`.

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-v0.12.0-beta.rc5.txt.ots
ots verify manifest-v0.12.0-beta.rc5.txt.sig.ots -f roasbeef-manifest-v0.12.0-beta.rc5.txt.sig
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved.
The release binaries are compiled with `go1.15.6`, which is required by verifiers to arrive at the same ones.
They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.12.0-beta.rc5
gpg: Signature made Tue 15 Dec 2020 10:31:06 PM UTC using RSA key ID 9B280306
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot;
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming
that `vendor.tar.gz` and `lnd-source-v0.12.0-beta.rc5.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.12.0-beta.rc5.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.0-beta.rc5&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.0-beta.rc5&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## New Default Autopilot Heuristic

[In this version of `lnd`, the default heursitic for autopilot has been changed from preferential attachment, to a version that will attempt to optimize for the betweeness centrality of the node](https://github.com/lightningnetwork/lnd/pull/4668). At a high level, this change means that rather than trying to connect (stochastically) to the nodes that have the _most_ channels, `lnd` will instead attempt to connect to the nodes that [appear most often in the shortest paths within the network](https://en.wikipedia.org/wiki/Betweenness_centrality). This change will serve to step as a stepping stone to further diffuse the graph to make it more resilient. 

## Pathfinding Improvements 

[`lnd` will now properly penalize attempts of larger &quot;wumbo&quot; sized payments proportionally](https://github.com/lightningnetwork/lnd/pull/4602). This will serve to ensure that clients with less active failure information are able to properly prune the search space by increasing the _attempt_ cost for larger payments. New flags has been added to allow users to configure the attempt cost for this value (`attemptcost` and `attemptcostppm`). We encourage users taht frequently send larger payments to tweak these parameters to find what works best, and ideally communicate this information back to the maintainers of `lnd` so we can better tune the current default value. 

## Graph Download Optimizations 

[`lnd` will now _batch_ all insertion operations related to channel graph which should _greatly_ speed up initial graph download](https://github.com/lightningnetwork/lnd/pull/3367). Initial becnhmarks show this change resluting in a 3x speed increase, with further gains likely being seen on mobile and more constrained platforms. 

## Peer to Peer Updates 

[A new flag has been added to `lnd` to enforce a _global_ connection timeout when trying to connect out to new peers](https://github.com/lightningnetwork/lnd/pull/4452). Setting a lower value for this new command line option (`timeout`) will mean that `lnd` will give up on unrechable peers much sooner than before, which can be useful when attempting to connect to a set of addresses to open chnnel to a peer. 


## Automatic Database Compaction

The most important data of any `lnd` node is stored in its channel database (`channel.db`). The database library currently used for this DB is `bbolt` which by design does not give back free space to the file system, even if data is deleted from the DB. This can lead to large DB files and slow startup times. Compaction is the process of creating a fresh copy of a `bbolt` database that only contains data and no &quot;reserved free space&quot;. This process also de-fragments and validates the integrity of the data.

[Automatic compaction of the `channel.db` can now be turned on](https://github.com/lightningnetwork/lnd/pull/4667) with the flag `--db.bolt.auto-compact`. By default this will compact on startup, if the last compaction was more than a week ago. The flag `--db.bolt.auto-compact-min-age` can also be set to `0` to force compaction on every startup, independent of how long ago it happened last.


## Protocol Upgrades

### Anchor Output Channels
`lnd` will now open the new channel type dubbed &quot;anchor channels&quot; by default if both peers support it. This is a channel type that has been available to advanced users [since lnd v0.10](https://github.com/lightningnetwork/lnd/releases/tag/v0.10.0-beta), but it has seen a few updates that makes it [even safer](https://github.com/lightningnetwork/lnd/pull/4840) and useful in high fee scenarios, and it is now in line with [a proposed BOLT change](https://github.com/lightningnetwork/lightning-rfc/pull/824).

The anchor channel type is a new type of channel that is much safer in high fee scenarios, as it allows bumping the fees after the channel has been force closed, instead of making the peers agreeing on a future close fee. This is also a nice UX improvement, as less of the channel capacity needs to go towards the commitment fee reserve, and can instead be used for payments. In addition it allows [bundling multiple HTLC transactions](https://github.com/lightningnetwork/lnd/pull/4779) together into one, potentially saving on chain fees in force close scenarios.

The commitment transaction still needs to be signed up front with a fee that ensures its mempool acceptance, and this [fee now defaults](https://github.com/lightningnetwork/lnd/pull/4855) to 10 sat/vbyte. This can be tuned by the `--max-commit-fee-rate-anchors` flag, but this should be used with caution. One can opt-out of the anchor channel type for new channels by setting the `--protocol.no-anchors` flag.

### Static Remote Key Feature Bit Required

[This new version of `lnd` now requires channels that use a static remote key, AKA &quot;tweakless commitments&quot;](https://github.com/lightningnetwork/lnd/pull/4751). This change improves safety and security for users as now when a channel is force closed by the remote party, the funds will go directly to a user control key. Prior versions of  `lnd` have supported this channel type, but `lnd` will now **only** allow this type of channel when making channels with new peer.

Lnd will [waive this requirement](https://github.com/lightningnetwork/lnd/pull/4847) in the case where it still has legacy channels with a peer. This ensures that lnd can still connect to nodes it has existing channels with, even if they do not understand the feature bit. 

### Improved End to End Payment Security 

The MPP protocol upgrade included a so called &quot;payment address&quot; that improves end-to-end payment security by requiring the sender to include a special nonce in the onion payload specify by the receiver. As intermediate nodes can't guess this secret ahead of time, and it's encrypted in the onion only to the finally receiver, they thwarts a large class of probing and de-anonymization attacks. [This new release of `lnd` will now _require_ this feature bit set in any new invoices it creates](https://github.com/lightningnetwork/lnd/pull/4752), which means all payments that don't include this new payment secret will be rejected. 


## PSBT Signing

The internal wallet can now [create and sign PSBTs](https://github.com/lightningnetwork/lnd/pull/4389). In combination with the `ListUnspent` RPC this allows RPC users to implement full coin control.
This feature also takes us one step closer to the goal of supporting watch-only on-chain wallets in `lnd` where an online node would only have public keys to track the UTXOs and would delegate the signing to a non-networked `lnd` node that has the private keys, all through using PSBTs.
Read more about the possible use cases and dive into the examples [in our PSBT documentation](https://github.com/lightningnetwork/lnd/blob/master/docs/psbt.md).

## Build System

Leveraging the power of GitHub Workflows, we now [automatically build and push docker images](https://github.com/lightningnetwork/lnd/pull/4769) of all our releases [to Docker Hub](https://hub.docker.com/u/lightninglabs). This includes images for `amd64` and [`arm64`](https://github.com/lightningnetwork/lnd/pull/4852).

The distinction between the production `Dockerfile` and the development `dev.Dockerfile` [were made more clear in the documentation](https://github.com/lightningnetwork/lnd/pull/4790).

The release binaries for all OS/architectures are now [also built by a GitHub Workflow](https://github.com/lightningnetwork/lnd/pull/4777). The deterministic build system introduced in a previous release allows us to independently build and sign the binaries locally. Signatures of more than just one developer will be added to releases in the future.

The experiential build tag has been [removed](https://github.com/lightningnetwork/lnd/pull/4701) for the `assumechanvalid` flag that is used to prevent long rescans for neutrino nodes.

## Continuous Integration

Our continuous integration pipeline, most notably our integration tests, has received a number of improvements and bug fixes making them considerably faster and somewhat more stable:
- An integration test suite running [against a `bitcoind` with the TX index disabled](https://github.com/lightningnetwork/lnd/pull/4617) was added.
- The ~70 integration tests are now [split into 4 parts and run in parallel](https://github.com/lightningnetwork/lnd/pull/4655) reducing the execution time by ~50%.
- Log files are only uploaded to termbin.com and file.io [for failed runs](https://github.com/lightningnetwork/lnd/pull/4623) and the `bitcoind` binaries are [extracted from a docker image instead of being downloaded](https://github.com/lightningnetwork/lnd/pull/4623), shaving off a few more minutes from the total itest execution time.
- The test harness for the `btcd` node used as the mining node [were improved to fix port collisions](https://github.com/lightningnetwork/lnd/pull/4765) which resulted in flaky tests.
- A check was added that [forces new command line flags to also be documented in the `sample-lnd.conf` file](https://github.com/lightningnetwork/lnd/pull/4626).
- A new make target [for itest flake hunting](https://github.com/lightningnetwork/lnd/pull/4756) was added.
- New make targets [for running fuzz tests](https://github.com/lightningnetwork/lnd/pull/4643) were added.
- Build tags were removed from the integration test files, [allowing the linter to check those as well](https://github.com/lightningnetwork/lnd/pull/4593).
- The `zpay32` package's `Decode` and `Encode` functions now have [corresponding fuzz tests](https://github.com/lightningnetwork/lnd/pull/4651) in the `fuzz` package.
- The `brontide` fuzz tests have been [fixed](https://github.com/lightningnetwork/lnd/pull/4640).
- Fuzz testing has been [optimized](https://github.com/lightningnetwork/lnd/pull/4682) to instruct `gofuzz` to always mutate the input.

## Contract Court Performance Improvements
Performance [improvements](https://github.com/lightningnetwork/lnd/pull/4697) were made to the contract court subsystem which is responsible for closing out channels on chain and taking on-chain actions required to fully resolve the channel. The number of database transactions required to start up the subsystem has been reduced from one per channel to a single transaction, which reduces startup time. Improvements to the way the subsystem consumes new blocks from its backing bitcoin node have also improved the memory footprint of the system. 

## Extended Health Checks 

[A new optional `healthcheck` has been added to insturct `lnd` to restart itself in order to _refresh_ an expired RPC TLS cert](https://github.com/lightningnetwork/lnd/pull/4792). This change is useful in containerized contexts such as k8s, where an auto restarting `lnd` is able to propagate any auth changes in a decoupled manner upon restart. 

## `htlcswitch` Enhancements 

Database contention has been [reduced](https://github.com/lightningnetwork/lnd/pull/4547) in the link by batching removal of forwarding packages. The removal timer has also been increased from 1 minute to 1 hour.

[A bug has been fixed in our non-strict forwarding randomization](https://github.com/lightningnetwork/lnd/pull/4659) to ensure we explciitly randomize our link sleection rather than relying on the undefined ordering of map interation in the Go spec. 

## Peer Flap Rate Tracking

An [update](https://github.com/lightningnetwork/lnd/pull/4440) to the channel fitness subsystem has introduced tracking of the number of times lnd is connected and disconnected from each of its peers. This information is surfaced in the output of the `ListPeers` API. 

The flap rate we have recorded for peers is also used to rate limit the amount of data lnd will store to track the peer’s uptime. If a peer has a high flap rate, lnd will reduce the amount of data it stores in memory, resulting in more aggregated uptime information. This change is intended to protect against constantly flapping peers, and will have little effect on peers that are consistently online with the occasional restart. To ensure that we do not permanently punish a peer for a period of instability long in the past, the flap rate we track for peers is exponentially cooled down over time. 

## RPC Enchancements &amp; Bug Fixes 

### Uniform Unconfirmed Coin Selection for SendCoins+

[`lnd` now allows all RPC calls that craft and send transactions to spend unconfirmed coins](https://github.com/lightningnetwork/lnd/pull/4653). 

This change the following RPCs:

- `Lightning.SendCoins`
- `Lightning.SendMany`
- `WalletKit.SendOutputs`

We've added two new parameters for these methods, following the same format as used for `Lightning.OpenChannel` RPC:

- `min_confs` (default=1)
- `spend_unconfirmed` (default=false)


### Macaroon Root ID Key Rotation 

[`lnd` now supports _root ID_ key rotation](https://github.com/lightningnetwork/lnd/pull/4427). This allows the baker (creator) of a set of macaroons to _invalidate_ them all by deleting and regenerating the root key used to generate the macaroons. This feature is a useful security tool, as if an application/system that uses lnd's macaroons in a fine grained manner is compromised, the admin is able to _revoke_ all generated macaroons. 

Several new calls have been added to allow users to take advantage of this feature, namely:
  * The `lncli bakemacaroon` call now accepts a new parameter: `root_key_id`. This new field is an integer that can be used to rotate root ID keys. 
  * A new `lncli listmacaroonids` command has been added to allow callers to monitor all their existing allocated root IDs.
  * A new `lncli deletemacaroonid` call has been added which implements _macaroon revocation_ by allowing the caller to _delete_ a specified root key ID. 
 
 
### New Verbose Output for `ChannelBalance`

[The `lncli channebalance` call now returns much more information than before in order to give users more insight w.r.t exactly _how_ their funds are distributed off-chain](https://github.com/lightningnetwork/lnd/pull/4512). An output of the new call resmbles the following: 
```
⛰lncli channelbalance
{
    &quot;balance&quot;: &quot;27476201&quot;,
    &quot;pending_open_balance&quot;: &quot;0&quot;,
    &quot;local_balance&quot;: {
        &quot;sat&quot;: &quot;27476201&quot;,
        &quot;msat&quot;: &quot;27476201135&quot;
    },
    &quot;remote_balance&quot;: {
        &quot;sat&quot;: &quot;109137173&quot;,
        &quot;msat&quot;: &quot;109137173865&quot;
    },
    &quot;unsettled_local_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;unsettled_remote_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;pending_open_local_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;pending_open_remote_balance&quot;: {
        &quot;sat&quot;: &quot;1783362&quot;,
        &quot;msat&quot;: &quot;1783362000&quot;
    }
}
```

Note that the first two fields (`balance` and `pending_open_balance`) are now deprecated and will be _removed_ in the future. Callers should use the new fields that return both `sat` and `msat` instead. 

### Raw Key Support for `SharedKeyRequest`

[The `DeriveSharedKey` now accepts a raw public key in addition to key locator](https://github.com/lightningnetwork/lnd/pull/4436). 

### Additional HTLC Information in ListChannels

[The `ListChannels` call will now return additional information about the set of linked HTLCs in a channel](https://github.com/lightningnetwork/lnd/pull/4693). Namely, we'll now return: 
  * The `htlc_index` of the HTLC within the channel 
  * The `forwarding_channel`, or the channel that forwarded the HTLC to the targte channel 
  * The `forwarding_htlc_index`, or the HTLC index on the forwarded channel. 

### Automated Let's Encrypt Certificates 

A new series of command line flags have been added to `lnd` which allows users to automatically obtain and renew a Let's Encrypt Certificate for the RPC interface of their `lnd` node. With this change, in certain configurations, callers will be able to hit an `lnd` now without having to manually store and update the `tls.cert` locally. 
New flags added to the `lnd` command line and `lnd.conf`:

* `--letsencryptport`: The port on which lnd will listen for Let's Encrypt challenges. Let's Encrypt will always try to contact on port 80. Often non-root processes are not allowed to bind to ports lower than 1024. This configuration option allows a different port to be used, but must be used in combination with port forwarding from port 80.
* `--letsencryptdir`: The directory to store Let's Encrypt certificates within. By default this is `.lnd/letsencrypt`.
* `--letsencryptdomain`: Request a Let's Encrypt certificate for the domain specified using this flag.

When `lncli` cannot find a `tls.cert` file, it will assume the server has a valid (Let's Encrypt) certificate. It is important to pass the domain name as a command line flag to `lncli`:

`lncli --rpcserver my.domain.org:10009`

This is necessary as well when connecting to `localhost`.

### Custom Routing Hints for AddHoldInvoice 

[The `AddHoldInvoice` RPC call now allows the users to specify their own custom routing hints](https://github.com/lightningnetwork/lnd/pull/3672). 



### Allow No RPC Auth on Private Addresses 

[A new config evaluation has been added to allow user to instruct `lnd` that it should allow RPC requests with no authentiation _only_ if `lnd` is listening on a private address](https://github.com/lightningnetwork/lnd/pull/4473). This makes certain Docker based configurations more user friendly, as any dependent containers no longer need to obtain and update lnd's RPC authentication information. Assuming `lnd` is only listening on a non-public private interface, then the `--no-macaroons` config option is now valid.  

### New Channel Acceptor Parameters
Additional [fields](https://github.com/lightningnetwork/lnd/pull/4683) have been added to the `ChannelAcceptor` API, which allow custom setting of custom errors for the remote peer, an upfront shutdown address for the channel (if supported by the peer), and more. Note that the error provided will be sent to the peer verbatim, so should not contain sensitive information.

### Maximum Local CSV
When opening a channel, the remote party can specify the CSV delay for your funds. This value determines the amount of time that your balance will be unavailable in the case where your force close the channel. A [`max_local_csv` parameter](https://github.com/lightningnetwork/lnd/pull/4735) has been added to allow setting of custom limitations on this value. For outgoing channels, this can be set using the `max_local_csv` field in the `OpenChannel` request. The `maxlocaldelay` config value can be used to set a default maximum value for all channels.

### Disable TLS for REST
It is now possible to [disable TLS for REST RPC](https://github.com/lightningnetwork/lnd/pull/4648) using `--no-rest-tls`.

## Refactoring
This release sees the removal of several components from the main `lnd` package:
- `fundingmanager.go` and tests are [moved](https://github.com/lightningnetwork/lnd/pull/4757) to the `funding` package.
- `chainregistry.go` and `chainparams.go` have been [moved](https://github.com/lightningnetwork/lnd/pull/4487) to the `chainreg` package.
- `mock.go` has been [removed](https://github.com/lightningnetwork/lnd/pull/4542) in favor of the `lntest/mock` package.
- A global variable `activeNetParams` has been [removed](https://github.com/lightningnetwork/lnd/pull/4505).

The `peer` package's dependency on `brontide` has been [removed](https://github.com/lightningnetwork/lnd/pull/4645).
## Miscellaneous

The DNS servers to use for initial peer bootstrapping [can now be specified](https://github.com/lightningnetwork/lnd/pull/4744) to overwrite the hard coded default values.

All supported command line flags are now [also properly documented in the `sample-lnd.conf` file](https://github.com/lightningnetwork/lnd/pull/4626).

[A new flag has been added to instruct `lnd` to timeout early if it can't obtain the file lock on bolt DB](https://github.com/lightningnetwork/lnd/pull/4787). 

### Multi node management

Hosting nodes on non-trusted (cloud) hardware was made safer by adding a [stateless initialization mode](https://github.com/lightningnetwork/lnd/pull/1288) that instructs `lnd` to not store any unencrypted macaroons on the host's file system. Instead, the admin macaroon is returned in the response of the wallet creation request and must be stored by the caller.

To support the stateless initialization mode mentioned above on the client side as well, [configuration profiles for `lncli` can now be created](https://github.com/lightningnetwork/lnd/pull/4310). Those profiles make it easy to interact with multiple nodes from the same client machine. For additional security the macaroons stored in the profiles can optionally be encrypted with a password.

### Recovery

Forcing the on-chain wallet to rescan its state from chain was [made easier by adding the `--reset-wallet-transactions` flag](https://github.com/lightningnetwork/lnd/pull/4715) to `lnd` that replaces the functionality previously only available in the external tool `dropwtxmgr`.

### Individual subsystem log levels
A change that makes it possible to set the [log level for individual subsystems](https://github.com/lightningnetwork/lnd/pull/4772) was merged. One can now specify a global log level, and subsystem log levels that will override the global setting: `--debuglevel=debug,PEER=info,SRVR=trace`.


## Bug fixes

- A bug in [the restore logic for old SCB files](https://github.com/lightningnetwork/lnd/pull/4865) was fixed that caused the `a height hint greater than 0 must be provided` error.
- A bug was fixed in how we [watch for states on chain](https://github.com/lightningnetwork/lnd/pull/4780), that could cause us to ignore our own close transaction if we attempted recovery while our force close transaction was still in the mempool.
- All directories referenced by command line flags are [now properly created](https://github.com/lightningnetwork/lnd/pull/4622) on startup.
- Neutrino users can now [specify a full node backend with an Onion v2 address](https://github.com/lightningnetwork/lnd/pull/4806). Before this fix, only clearnet addresses were supported.
- The chain backend health check which ensures that lnd is reliably connected to a bitcoin node has been [updated](https://github.com/lightningnetwork/lnd/pull/4755) to use the `uptime` api for bitcoind nodes. This check previously used the `getBlockChainInfo` API, which proved unsuitable because it could take up to 5 minutes for bitcoind to respond due to non-granular locking in core.
- A bug in the `walletrpc` subserver’s `ListSweeps` endpoint where the `verbose` output option would fail if a sweep was not found on chain has been [fixed](https://github.com/lightningnetwork/lnd/pull/4762). This could happen for transactions that were replaced-by-fee. 
- [`lnd` will no longer allow restoted channels to be manually closed](https://github.com/lightningnetwork/lnd/pull/4525). This fixes a class of issues that would cause `lnd` to be unable to start due to a borked local channel state. 
- [`lnd` will no longer attempt to trap SIGABRT](https://github.com/lightningnetwork/lnd/pull/4627). 
- [A bug has been fixed related to mnemonic seed validation on restore](https://github.com/lightningnetwork/lnd/pull/4738). This ensures `lnd` will properly catch invalid words (that aren't in the wordlist) much earlier than before. 
- [All errors in the `routerrpc` server will now be properly mapped to gRPC status codes](https://github.com/lightningnetwork/lnd/pull/4691). 
- [`lnd` nodes using the neutrino backend will now properly be able to connect to onion v2 onion service addresses](https://github.com/lightningnetwork/lnd/pull/4806). 


The full list of changes since `v0.11.0-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.11.1-beta...v0.12.0-beta


# Contributors (Alphabetical Order)

Alex Bosworth 
András Bánki-Horváth
Ben Woosley 
Bjarne Magnussen 
Calvin Zachman 
Carla Kirk-Cohen 
Carsten Otto 
Conner Fromknecht 
Dan Janosik 
Daniel Babbev 
Dominik Spicher 
Eugene Siegel
Federico Bond 
Glen Cooper 
githorray
Graham Krizek
Hampus Sjöberg
Johan T. Halseth
Joost Jager
Juan Pablo Civile 
Jules Lamur 
Kartik Shah
Marty Jones
Matheus Degiovani 
Mayank Chhabra
MrManPew
Olaoluwa Osuntokun 
Oliver Gugger 
positiveblue
Roei Erez 
Tom Kirkpatrick 
Torkel Rogstad 
Wilmer Paulino 
Yaacov Akiba Slama
Yan Pritzker 
yyforyongyu </summary>
    <title>lightningnetwork/lnd: v0.12.0-beta.rc5</title>
    <updated>2021-01-09T01:30:55Z</updated>
    <dc:date>2021-01-09T01:30:55Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.2</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.2"/>
    <summary>* ADD: Easily share a Vault key with QR code
* ADD: How many signatures can this Vault make
* ADD: Electrum servers history - fast connect
* ADD: Ability to set servers via QR code scanning 
* ADD: CoinControl multi-selection
* FIX: better support multisig cosigning with Electrum desktop
* FIX: multisig 'Too many signatures' error
* FIX: Amount displayed on success invoice payment
* FIX: localizations for fr_FR, es_ES, de_DE, fa_IR, cs_CZ, fr_FR, nl_NL, fi_FI
* FIX: Hide balance on reorder screen
* FIX: disallow importing non-multisignature xpubs into multisig setup
* FIX: better multisig wallet descriptors suppport
* FIX: Incorrect import from Specter - p2sh wrapped segwit multisig
* FIX: Clear quick actions if storage is encrypted
* FIX: use dayjs localizedFormat plugin to render tx time
* FIX: show more accurate precalculation fee on &quot;Not enough balance.&quot; exception
* FIX: Wallet Delete on new install was not being triggered
* FIX: Fallback to English if case isn't found
* FIX: animated qr scan progress readability
* FIX: rerender UI after language change
* FIX: Hide modal when scanning
* FIX: reorder screen bug
* FIX: Don't show clipboard modal if user has already acted on it
* REF: processing push notifications
* REF: Add warning to LN
* REF: Github link on about
* DOC: Telegram and Discord links on about section
</summary>
    <title>BlueWallet/BlueWallet: v6.0.2</title>
    <updated>2021-01-07T22:06:03Z</updated>
    <dc:date>2021-01-07T22:06:03Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.0.0</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.0.0"/>
    <summary># Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.0.0/Specter-Setup-v1.0.0.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.0.0/SpecterDesktop-v1.0.0.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.0.0/specter_desktop-v1.0.0-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

**Note on macOS**: The current build supports only macOS Catalina (10.15) or higher. If you'd like to run Specter on an older macOS version, you can [install Specter from Pip](https://github.com/cryptoadvance/specter-desktop#installing-specter-from-pip).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.0.0/specterd-v1.0.0-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.0.0/specterd-v1.0.0-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.0.0/specterd-v1.0.0-x86_64-linux-gnu.zip)

# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.0.0/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @stepansnigirev's GPG key.
You can get the public key from here: [https://stepansnigirev.com/ss-specter-release.asc](https://stepansnigirev.com/ss-specter-release.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x36ED357AB24B915F) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/6F16E354F83393D6E52EC25F36ED357AB24B915F).
Fingerprint of the key is `6F16 E354 F833 93D6 E52E  C25F 36ED 357A B24B 915F`, short id: `36ed357ab24b915f`

# Release notes
- Bugfix: Fix Windows CI build (#842) (@k9ert)
- Bugfix: Allow sending to uppercase bech32 addresses (#837) (@ben-kaufman)
- Bugfix: Disable deleting a key used in an existing wallet (#822) (@ben-kaufman)
- Bugfix: Fix fiat symbol direction (#802) (@figgyfigs)
- Bugfix: Fix Electrum export for signing with ColdCard (#800) (@ben-kaufman)
- Bugfix: Fix wrong wallet address type in PDF backup file (#800) (@ben-kaufman)
- Bugfix: Fix QR scanner timeout breaking the signing UI (#800) (@ben-kaufman)
- Bugfix: Fix issue with wallet name in JSON backup download (#790) (@rajarshimaitra)
- Bugfix: Properly handle exception if address not found in wallet (#783) (@ben-kaufman)
- Bugfix: Fix spelling mistake (#766) (@szollo)
- Bugfix: Fix transaction caching to track all transactions (#760) (@ben-kaufman)
- Bugfix: Require authentication be on for stating Tor hidden service (#765) (@ben-kaufman)
- Bugfix: Make HWI Bridge settings available to all users in multiuse mode (#765) (@ben-kaufman)
- Feature: Add automatic SSL certificate generation from CLI (#789) (@k9ert)
- Feature: Allow configuring custom Tor proxy URL and control port (#765) (@ben-kaufman)
- Feature: Add Tor-only mode to force all external calls go over Tor (#765) (@ben-kaufman)
- Feature: Label any addresses from everywhere (#760) (@ben-kaufman)
- Feature: Search, sort, page limit, and jump between pages in the transactions and UTXO tabs. (#760) (@ben-kaufman)
- Feature: Export transactions, UTXO, and addresses into CSV file (#758) (@ben-kaufman)
- UI: Consistent rescan labels (#843) (@justinmoon)
- UI: Fix typo in price update notification (#831) (@instagibbs)
- UI: Change wallet type labels on new device popup (#798) (@rajarshimaitra)
- UI: Fix closing notification issue on mobile (#791) (@ben-kaufman)
- UI: Add Wallets Overview UTXO tab (#760) (@ben-kaufman)
- UI: Refactor the UTXO tab to look like the tx history tab (#760) (@ben-kaufman)
- UI: Rename address table column to label (#764) (@figgyfigs)
- UI: Move all Tor settings to new &quot;Tor&quot; Setting tab (#765) (@ben-kaufman)
- Docs: Fix Docker docs issue (#792) (@RandyMcMillan)
- Docs: Update FAQ on Appimage on Debian 10 (#773) (@k9ert)
- Devops: Improve dev-toolings with Cypress snapshots (#797) (@k9ert)
- Test: Add Cypress as a new testing framework (#712) (@k9ert)</summary>
    <title>cryptoadvance/specter-desktop: v1.0.0</title>
    <updated>2021-01-06T14:52:03Z</updated>
    <dc:date>2021-01-06T14:52:03Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.11.0-pre6</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.11.0-pre6"/>
    <summary>### This is a pre-release! Do not use unless you're sure know what you're doing!

This is a pre-release for beta-testing the next version of Specter.

Changes to notice while testing:
- Fix Coldcard signing issue when exporting to Electrum
- Fix wrong address type inPDF backup
- Fix issue when camera is open and scanning doesn't work for too long.
- Export transactions history, UTXOs, and addresses to CSV
- Reorganize the UTXO screen
- Label any address from any screen it is at.
- Sorting, searching, page limit, of the transactions/ utxo lists.
- New Tor tab in the settings for managing the connections over Tor and the Specter Tor hidden service</summary>
    <title>cryptoadvance/specter-desktop: v0.11.0-pre6</title>
    <updated>2021-01-05T07:20:02Z</updated>
    <dc:date>2021-01-05T07:20:02Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta.rc3</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta.rc3"/>
    <summary>This release marks the first major release in the `v0.12.x` series! As this is a major release several new features are included in this release including: anchor commitment types are now the default, anchor commitment support for watchtowers, new arguments to auto compact the database as well as drop the `wtxmgr` state, generic wallet PSBT crafting+signing, and much more! As usual, this release contains several important bug fixes, so we recommend all users update. 

# Database Migrations
A migration to initialize a top-level peers bucket is included in this release. The bucket is used to track flap counts for peers that we have channels open with across restarts. These values are used to rate-limit the amount of memory that `lnd` uses to track peers online state, ensuring that we do not store large volumes of uptime information for peers that are constantly changing online state.

This release contains a migration to initialize a top-level-bucket for an outpoint index. There is also a subsequent migration that populates this index with an outpoint's status. This will cut down on expensive `bbolt` transactions throughout the codebase. The migration process should look something like this upon initial start up:
```
2020-12-21 10:45:07.256 [INF] LTND: Version: 0.12.0-beta commit=v0.12.0-beta, build=production, logging=default
2020-12-21 10:45:07.257 [INF] LTND: Active chain: Bitcoin (network=mainnet)
2020-12-21 10:45:07.257 [INF] LTND: Opening the main database, this might take a few minutes...
2020-12-21 10:45:07.257 [INF] LTND: Opening bbolt database, sync_freelist=false, auto_compact=false
2020-12-21 10:45:07.304 [INF] CHDB: Checking for schema update: latest_version=20, db_version=17
2020-12-21 10:45:07.304 [INF] CHDB: Performing database schema migration
2020-12-21 10:45:07.304 [INF] CHDB: Applying migration #18
2020-12-21 10:45:07.304 [INF] CHDB: Creating top-level bucket: &quot;peers-bucket&quot; ...
2020-12-21 10:45:07.305 [INF] CHDB: Created top-level bucket: &quot;peers-bucket&quot;
2020-12-21 10:45:07.305 [INF] CHDB: Applying migration #19
2020-12-21 10:45:07.305 [INF] CHDB: Creating top-level bucket: &quot;outpoint-bucket&quot; ...
2020-12-21 10:45:07.305 [INF] CHDB: Created top-level bucket: &quot;outpoint-bucket&quot;
2020-12-21 10:45:07.305 [INF] CHDB: Applying migration #20
2020-12-21 10:45:07.324 [INF] LTND: Database now open (time_to_open=67.71764ms)!
```

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.12.0-beta.rc3.txt` and `manifest-v0.12.0-beta.rc3.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.12.0-beta.rc3.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.12.0-beta.rc3.txt'
gpg: Signature made Tue Dec 15 18:57:27 2020 PST
gpg:                using RSA key 60A1FA7DA5BFF08BDCBBE7903BBD59E99B280306
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.


For this release roasbeef's signature is the secondary signature which can be verified with the following command: 
```
gpg --verify roasbeef-manifest-v0.12.0-beta.rc3.txt.sig manifest-v0.12.0-beta.rc3.txt
gpg: Signature made Wed Sep 30 17:35:20 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

## Verifying the Release Timestamp 

From this new version onwards, in addition to time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: `manifest-v0.12.0-beta.rc3.txt.sig.ots` and `manifest-v0.12.0-beta.rc3.txt.ots`.

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-v0.12.0-beta.rc3.txt.ots
ots verify manifest-v0.12.0-beta.rc3.txt.sig.ots -f roasbeef-manifest-v0.12.0-beta.rc3.txt.sig
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved.
The release binaries are compiled with `go1.15.6`, which is required by verifiers to arrive at the same ones.
They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.12.0-beta.rc3
gpg: Signature made Tue 15 Dec 2020 10:31:06 PM UTC using RSA key ID 9B280306
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot;
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming
that `vendor.tar.gz` and `lnd-source-v0.12.0-beta.rc3.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.12.0-beta.rc3.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.0-beta.rc3&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.0-beta.rc3&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## New Default Autopilot Heuristic

[In this version of `lnd`, the default heursitic for autopilot has been changed from preferential attachment, to a version that will attempt to optimize for the betweeness centrality of the node](https://github.com/lightningnetwork/lnd/pull/4668). At a high level, this change means that rather than trying to connect (stochastically) to the nodes that have the _most_ channels, `lnd` will instead attempt to connect to the nodes that [appear most often in the shortest paths within the network](https://en.wikipedia.org/wiki/Betweenness_centrality). This change will serve to step as a stepping stone to further diffuse the graph to make it more resilient. 

## Pathfinding Improvements 

[`lnd` will now properly penalize attempts of larger &quot;wumbo&quot; sized payments proportionally](https://github.com/lightningnetwork/lnd/pull/4602). This will serve to ensure that clients with less active failure information are able to properly prune the search space by increasing the _attempt_ cost for larger payments. New flags has been added to allow users to configure the attempt cost for this value (`attemptcost` and `attemptcostppm`). We encourage users taht frequently send larger payments to tweak these parameters to find what works best, and ideally communicate this information back to the maintainers of `lnd` so we can better tune the current default value. 

## Graph Download Optimizations 

[`lnd` will now _batch_ all insertion operations related to channel graph which should _greatly_ speed up initial graph download](https://github.com/lightningnetwork/lnd/pull/3367). Initial becnhmarks show this change resluting in a 3x speed increase, with further gains likely being seen on mobile and more constrained platforms. 

## Peer to Peer Updates 

[A new flag has been added to `lnd` to enforce a _global_ connection timeout when trying to connect out to new peers](https://github.com/lightningnetwork/lnd/pull/4452). Setting a lower value for this new command line option (`timeout`) will mean that `lnd` will give up on unrechable peers much sooner than before, which can be useful when attempting to connect to a set of addresses to open chnnel to a peer. 


## Automatic Database Compaction

The most important data of any `lnd` node is stored in its channel database (`channel.db`). The database library currently used for this DB is `bbolt` which by design does not give back free space to the file system, even if data is deleted from the DB. This can lead to large DB files and slow startup times. Compaction is the process of creating a fresh copy of a `bbolt` database that only contains data and no &quot;reserved free space&quot;. This process also de-fragments and validates the integrity of the data.

[Automatic compaction of the `channel.db` can now be turned on](https://github.com/lightningnetwork/lnd/pull/4667) with the flag `--db.bolt.auto-compact`. By default this will compact on startup, if the last compaction was more than a week ago. The flag `--db.bolt.auto-compact-min-age` can also be set to `0` to force compaction on every startup, independent of how long ago it happened last.


## Protocol Upgrades

### Anchor Output Channels
`lnd` will now open the new channel type dubbed &quot;anchor channels&quot; by default if both peers support it. This is a channel type that has been available to advanced users [since lnd v0.10](https://github.com/lightningnetwork/lnd/releases/tag/v0.10.0-beta), but it has seen a few updates that makes it [even safer](https://github.com/lightningnetwork/lnd/pull/4840) and useful in high fee scenarios, and it is now in line with [a proposed BOLT change](https://github.com/lightningnetwork/lightning-rfc/pull/824).

The anchor channel type is a new type of channel that is much safer in high fee scenarios, as it allows bumping the fees after the channel has been force closed, instead of making the peers agreeing on a future close fee. This is also a nice UX improvement, as less of the channel capacity needs to go towards the commitment fee reserve, and can instead be used for payments. In addition it allows [bundling multiple HTLC transactions](https://github.com/lightningnetwork/lnd/pull/4779) together into one, potentially saving on chain fees in force close scenarios.

The commitment transaction still needs to be signed up front with a fee that ensures its mempool acceptance, and this [fee now defaults](https://github.com/lightningnetwork/lnd/pull/4855) to 10 sat/vbyte. This can be tuned by the `--max-commit-fee-rate-anchors` flag, but this should be used with caution. One can opt-out of the anchor channel type for new channels by setting the `--protocol.no-anchors` flag.

### Static Remote Key Feature Bit Required

[This new version of `lnd` now requires channels that use a static remote key,
AKA &quot;tweakless commitments&quot;](https://github.com/lightningnetwork/lnd/pull/4751). This change
improves safety and security for users as now when a channel is force closed by
the remote party, the funds will go directly to a user control key. Prior
versions of  `lnd` have supported this channel type, but `lnd` will now
**only** allow this type of channel when making channels with new peer.

Lnd will [waive this requirement](https://github.com/lightningnetwork/lnd/pull/4847) in the case where it still has legacy channels with a peer. This ensures that lnd can still
connect to nodes it has existing channels with, even if they do not understand
the feature bit. 

### Improved End to End Payment Security 

The MPP protocol upgrade included a so called &quot;payment address&quot; that improves
end-to-end payment security by requiring the sender to include a special nonce
in the onion payload specify by the receiver. As intermediate nodes can't guess
this secret ahead of time, and it's encrypted in the onion only to the finally
receiver, they thwarts a large class of probing and de-anonymization attacks.
[This new release of `lnd` will now _require_ this feature bit set in any new
invoices it creates](https://github.com/lightningnetwork/lnd/pull/4752), which
means all payments that don't include this new payment secret will be rejected. 


## PSBT Signing

The internal wallet can now [create and sign PSBTs](https://github.com/lightningnetwork/lnd/pull/4389). In combination with the `ListUnspent` RPC this allows RPC users to implement full coin control.
This feature also takes us one step closer to the goal of supporting watch-only on-chain wallets in `lnd` where an online node would only have public keys to track the UTXOs and would delegate the signing to a non-networked `lnd` node that has the private keys, all through using PSBTs.
Read more about the possible use cases and dive into the examples [in our PSBT documentation](https://github.com/lightningnetwork/lnd/blob/master/docs/psbt.md).

## Build System

Leveraging the power of GitHub Workflows, we now [automatically build and push docker images](https://github.com/lightningnetwork/lnd/pull/4769) of all our releases [to Docker Hub](https://hub.docker.com/u/lightninglabs). This includes images for `amd64` and [`arm64`](https://github.com/lightningnetwork/lnd/pull/4852).

The distinction between the production `Dockerfile` and the development `dev.Dockerfile` [were made more clear in the documentation](https://github.com/lightningnetwork/lnd/pull/4790).

The release binaries for all OS/architectures are now [also built by a GitHub Workflow](https://github.com/lightningnetwork/lnd/pull/4777). The deterministic build system introduced in a previous release allows us to independently build and sign the binaries locally. Signatures of more than just one developer will be added to releases in the future.

The experiential build tag has been [removed](https://github.com/lightningnetwork/lnd/pull/4701) for the `assumechanvalid` flag that is used to prevent long rescans for neutrino nodes.

## Continuous Integration

Our continuous integration pipeline, most notably our integration tests, has received a number of improvements and bug fixes making them considerably faster and somewhat more stable:
- An integration test suite running [against a `bitcoind` with the TX index disabled](https://github.com/lightningnetwork/lnd/pull/4617) was added.
- The ~70 integration tests are now [split into 4 parts and run in parallel](https://github.com/lightningnetwork/lnd/pull/4655) reducing the execution time by ~50%.
- Log files are only uploaded to termbin.com and file.io [for failed runs](https://github.com/lightningnetwork/lnd/pull/4623) and the `bitcoind` binaries are [extracted from a docker image instead of being downloaded](https://github.com/lightningnetwork/lnd/pull/4623), shaving off a few more minutes from the total itest execution time.
- The test harness for the `btcd` node used as the mining node [were improved to fix port collisions](https://github.com/lightningnetwork/lnd/pull/4765) which resulted in flaky tests.
- A check was added that [forces new command line flags to also be documented in the `sample-lnd.conf` file](https://github.com/lightningnetwork/lnd/pull/4626).
- A new make target [for itest flake hunting](https://github.com/lightningnetwork/lnd/pull/4756) was added.
- New make targets [for running fuzz tests](https://github.com/lightningnetwork/lnd/pull/4643) were added.
- Build tags were removed from the integration test files, [allowing the linter to check those as well](https://github.com/lightningnetwork/lnd/pull/4593).
- The `zpay32` package's `Decode` and `Encode` functions now have [corresponding fuzz tests](https://github.com/lightningnetwork/lnd/pull/4651) in the `fuzz` package.
- The `brontide` fuzz tests have been [fixed](https://github.com/lightningnetwork/lnd/pull/4640).
- Fuzz testing has been [optimized](https://github.com/lightningnetwork/lnd/pull/4682) to instruct `gofuzz` to always mutate the input.

## Contract Court Performance Improvements
Performance [improvements](https://github.com/lightningnetwork/lnd/pull/4697) were made to the contract court subsystem which is responsible for closing out channels on chain and taking on-chain actions required to fully resolve the channel. The number of database transactions required to start up the subsystem has been reduced from one per channel to a single transaction, which reduces startup time. Improvements to the way the subsystem consumes new blocks from its backing bitcoin node have also improved the memory footprint of the system. 

## Extended Health Checks 

[A new optional `healthcheck` has been added to insturct `lnd` to restart itself in order to _refresh_ an expired RPC TLS cert](https://github.com/lightningnetwork/lnd/pull/4792). This change is useful in containerized contexts such as k8s, where an auto restarting `lnd` is able to propagate any auth changes in a decoupled manner upon restart. 

## `htlcswitch` Enhancements 

Database contention has been [reduced](https://github.com/lightningnetwork/lnd/pull/4547) in the link by batching removal of forwarding packages. The removal timer has also been increased from 1 minute to 1 hour.

[A bug has been fixed in our non-strict forwarding randomization](https://github.com/lightningnetwork/lnd/pull/4659) to ensure we explciitly randomize our link sleection rather than relying on the undefined ordering of map interation in the Go spec. 

## Peer Flap Rate Tracking

An [update](https://github.com/lightningnetwork/lnd/pull/4440) to the channel fitness subsystem has introduced tracking of the number of times lnd is connected and disconnected from each of its peers. This information is surfaced in the output of the `ListPeers` API. 

The flap rate we have recorded for peers is also used to rate limit the amount of data lnd will store to track the peer’s uptime. If a peer has a high flap rate, lnd will reduce the amount of data it stores in memory, resulting in more aggregated uptime information. This change is intended to protect against constantly flapping peers, and will have little effect on peers that are consistently online with the occasional restart. To ensure that we do not permanently punish a peer for a period of instability long in the past, the flap rate we track for peers is exponentially cooled down over time. 

## RPC Enchancements &amp; Bug Fixes 

### Uniform Unconfirmed Coin Selection for SendCoins+

[`lnd` now allows all RPC calls that craft and send transactions to spend unconfirmed coins](https://github.com/lightningnetwork/lnd/pull/4653). 

This change the following RPCs:

- `Lightning.SendCoins`
- `Lightning.SendMany`
- `WalletKit.SendOutputs`

We've added two new parameters for these methods, following the same format as used for `Lightning.OpenChannel` RPC:

- `min_confs` (default=1)
- `spend_unconfirmed` (default=false)


### Macaroon Root ID Key Rotation 

[`lnd` now supports _root ID_ key rotation](https://github.com/lightningnetwork/lnd/pull/4427). This allows the baker (creator) of a set of macaroons to _invalidate_ them all by deleting and regenerating the root key used to generate the macaroons. This feature is a useful security tool, as if an application/system that uses lnd's macaroons in a fine grained manner is compromised, the admin is able to _revoke_ all generated macaroons. 

Several new calls have been added to allow users to take advantage of this feature, namely:
  * The `lncli bakemacaroon` call now accepts a new parameter: `root_key_id`. This new field is an integer that can be used to rotate root ID keys. 
  * A new `lncli listmacaroonids` command has been added to allow callers to monitor all their existing allocated root IDs.
  * A new `lncli deletemacaroonid` call has been added which implements _macaroon revocation_ by allowing the caller to _delete_ a specified root key ID. 
 
 
### New Verbose Output for `ChannelBalance`

[The `lncli channebalance` call now returns much more information than before in order to give users more insight w.r.t exactly _how_ their funds are distributed off-chain](https://github.com/lightningnetwork/lnd/pull/4512). An output of the new call resmbles the following: 
```
⛰lncli channelbalance
{
    &quot;balance&quot;: &quot;27476201&quot;,
    &quot;pending_open_balance&quot;: &quot;0&quot;,
    &quot;local_balance&quot;: {
        &quot;sat&quot;: &quot;27476201&quot;,
        &quot;msat&quot;: &quot;27476201135&quot;
    },
    &quot;remote_balance&quot;: {
        &quot;sat&quot;: &quot;109137173&quot;,
        &quot;msat&quot;: &quot;109137173865&quot;
    },
    &quot;unsettled_local_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;unsettled_remote_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;pending_open_local_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;pending_open_remote_balance&quot;: {
        &quot;sat&quot;: &quot;1783362&quot;,
        &quot;msat&quot;: &quot;1783362000&quot;
    }
}
```

Note that the first two fields (`balance` and `pending_open_balance`) are now deprecated and will be _removed_ in the future. Callers should use the new fields that return both `sat` and `msat` instead. 

### Raw Key Support for `SharedKeyRequest`

[The `DeriveSharedKey` now accepts a raw public key in addition to key locator](https://github.com/lightningnetwork/lnd/pull/4436). 

### Additional HTLC Information in ListChannels

[The `ListChannels` call will now return additional information about the set of linked HTLCs in a channel](https://github.com/lightningnetwork/lnd/pull/4693). Namely, we'll now return: 
  * The `htlc_index` of the HTLC within the channel 
  * The `forwarding_channel`, or the channel that forwarded the HTLC to the targte channel 
  * The `forwarding_htlc_index`, or the HTLC index on the forwarded channel. 

### Automated Let's Encrypt Certificates 

A new series of command line flags have been added to `lnd` which allows users to automatically obtain and renew a Let's Encrypt Certificate for the RPC interface of their `lnd` node. With this change, in certain configurations, callers will be able to hit an `lnd` now without having to manually store and update the `tls.cert` locally. 
New flags added to the `lnd` command line and `lnd.conf`:

* `--letsencryptport`: The port on which lnd will listen for Let's Encrypt challenges. Let's Encrypt will always try to contact on port 80. Often non-root processes are not allowed to bind to ports lower than 1024. This configuration option allows a different port to be used, but must be used in combination with port forwarding from port 80.
* `--letsencryptdir`: The directory to store Let's Encrypt certificates within. By default this is `.lnd/letsencrypt`.
* `--letsencryptdomain`: Request a Let's Encrypt certificate for the domain specified using this flag.

When `lncli` cannot find a `tls.cert` file, it will assume the server has a valid (Let's Encrypt) certificate. It is important to pass the domain name as a command line flag to `lncli`:

`lncli --rpcserver my.domain.org:10009`

This is necessary as well when connecting to `localhost`.

### Custom Routing Hints for AddHoldInvoice 

[The `AddHoldInvoice` RPC call now allows the users to specify their own custom routing hints](https://github.com/lightningnetwork/lnd/pull/3672). 



### Allow No RPC Auth on Private Addresses 

[A new config evaluation has been added to allow user to instruct `lnd` that it should allow RPC requests with no authentiation _only_ if `lnd` is listening on a private address](https://github.com/lightningnetwork/lnd/pull/4473). This makes certain Docker based configurations more user friendly, as any dependent containers no longer need to obtain and update lnd's RPC authentication information. Assuming `lnd` is only listening on a non-public private interface, then the `--no-macaroons` config option is now valid.  

### New Channel Acceptor Parameters
Additional [fields](https://github.com/lightningnetwork/lnd/pull/4683) have been added to the `ChannelAcceptor` API, which allow custom setting of custom errors for the remote peer, an upfront shutdown address for the channel (if supported by the peer), and more. Note that the error provided will be sent to the peer verbatim, so should not contain sensitive information.

### Maximum Local CSV
When opening a channel, the remote party can specify the CSV delay for your funds. This value determines the amount of time that your balance will be unavailable in the case where your force close the channel. A [`max_local_csv` parameter](https://github.com/lightningnetwork/lnd/pull/4735) has been added to allow setting of custom limitations on this value. For outgoing channels, this can be set using the `max_local_csv` field in the `OpenChannel` request. The `maxlocaldelay` config value can be used to set a default maximum value for all channels.

### Disable TLS for REST
It is now possible to [disable TLS for REST RPC](https://github.com/lightningnetwork/lnd/pull/4648) using `--no-rest-tls`.

## Refactoring
This release sees the removal of several components from the main `lnd` package:
- `fundingmanager.go` and tests are [moved](https://github.com/lightningnetwork/lnd/pull/4757) to the `funding` package.
- `chainregistry.go` and `chainparams.go` have been [moved](https://github.com/lightningnetwork/lnd/pull/4487) to the `chainreg` package.
- `mock.go` has been [removed](https://github.com/lightningnetwork/lnd/pull/4542) in favor of the `lntest/mock` package.
- A global variable `activeNetParams` has been [removed](https://github.com/lightningnetwork/lnd/pull/4505).

The `peer` package's dependency on `brontide` has been [removed](https://github.com/lightningnetwork/lnd/pull/4645).
## Miscellaneous

The DNS servers to use for initial peer bootstrapping [can now be specified](https://github.com/lightningnetwork/lnd/pull/4744) to overwrite the hard coded default values.

All supported command line flags are now [also properly documented in the `sample-lnd.conf` file](https://github.com/lightningnetwork/lnd/pull/4626).

[A new flag has been added to instruct `lnd` to timeout early if it can't obtain the file lock on bolt DB](https://github.com/lightningnetwork/lnd/pull/4787). 

### Multi node management

Hosting nodes on non-trusted (cloud) hardware was made safer by adding a [stateless initialization mode](https://github.com/lightningnetwork/lnd/pull/1288) that instructs `lnd` to not store any unencrypted macaroons on the host's file system. Instead, the admin macaroon is returned in the response of the wallet creation request and must be stored by the caller.

To support the stateless initialization mode mentioned above on the client side as well, [configuration profiles for `lncli` can now be created](https://github.com/lightningnetwork/lnd/pull/4310). Those profiles make it easy to interact with multiple nodes from the same client machine. For additional security the macaroons stored in the profiles can optionally be encrypted with a password.

### Recovery

Forcing the on-chain wallet to rescan its state from chain was [made easier by adding the `--reset-wallet-transactions` flag](https://github.com/lightningnetwork/lnd/pull/4715) to `lnd` that replaces the functionality previously only available in the external tool `dropwtxmgr`.

### Individual subsystem log levels
A change that makes it possible to set the [log level for individual subsystems](https://github.com/lightningnetwork/lnd/pull/4772) was merged. One can now specify a global log level, and subsystem log levels that will override the global setting: `--debuglevel=debug,PEER=info,SRVR=trace`.


## Bug fixes

- A bug in [the restore logic for old SCB files](https://github.com/lightningnetwork/lnd/pull/4865) was fixed that caused the `a height hint greater than 0 must be provided` error.
- A bug was fixed in how we [watch for states on chain](https://github.com/lightningnetwork/lnd/pull/4780), that could cause us to ignore our own close transaction if we attempted recovery while our force close transaction was still in the mempool.
- All directories referenced by command line flags are [now properly created](https://github.com/lightningnetwork/lnd/pull/4622) on startup.
- Neutrino users can now [specify a full node backend with an Onion v2 address](https://github.com/lightningnetwork/lnd/pull/4806). Before this fix, only clearnet addresses were supported.
- The chain backend health check which ensures that lnd is reliably connected to a bitcoin node has been [updated](https://github.com/lightningnetwork/lnd/pull/4755) to use the `uptime` api for bitcoind nodes. This check previously used the `getBlockChainInfo` API, which proved unsuitable because it could take up to 5 minutes for bitcoind to respond due to non-granular locking in core.
- A bug in the `walletrpc` subserver’s `ListSweeps` endpoint where the `verbose` output option would fail if a sweep was not found on chain has been [fixed](https://github.com/lightningnetwork/lnd/pull/4762). This could happen for transactions that were replaced-by-fee. 
- [`lnd` will no longer allow restoted channels to be manually closed](https://github.com/lightningnetwork/lnd/pull/4525). This fixes a class of issues that would cause `lnd` to be unable to start due to a borked local channel state. 
- [`lnd` will no longer attempt to trap SIGABRT](https://github.com/lightningnetwork/lnd/pull/4627). 
- [A bug has been fixed related to mnemonic seed validation on restore](https://github.com/lightningnetwork/lnd/pull/4738). This ensures `lnd` will properly catch invalid words (that aren't in the wordlist) much earlier than before. 
- [All errors in the `routerrpc` server will now be properly mapped to gRPC status codes](https://github.com/lightningnetwork/lnd/pull/4691). 
- [`lnd` nodes using the neutrino backend will now properly be able to connect to onion v2 onion service addresses](https://github.com/lightningnetwork/lnd/pull/4806). 


The full list of changes since `v0.11.0-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.11.1-beta...v0.12.0-beta


# Contributors (Alphabetical Order)

Alex Bosworth 
András Bánki-Horváth
Ben Woosley 
Bjarne Magnussen 
Calvin Zachman 
Carla Kirk-Cohen 
Carsten Otto 
Conner Fromknecht 
Dan Janosik 
Daniel Babbev 
Dominik Spicher 
Eugene Siegel
Federico Bond 
Glen Cooper 
githorray
Graham Krizek
Hampus Sjöberg
Johan T. Halseth
Joost Jager
Juan Pablo Civile 
Jules Lamur 
Kartik Shah
Marty Jones
Matheus Degiovani 
Mayank Chhabra
MrManPew
Olaoluwa Osuntokun 
Oliver Gugger 
positiveblue
Roei Erez 
Tom Kirkpatrick 
Torkel Rogstad 
Wilmer Paulino 
Yaacov Akiba Slama
Yan Pritzker 
yyforyongyu </summary>
    <title>lightningnetwork/lnd: v0.12.0-beta.rc3</title>
    <updated>2021-01-04T04:21:01Z</updated>
    <dc:date>2021-01-04T04:21:01Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.3.1</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.3.1"/>
    <summary>This update brings some minor bug fixes to keep your Umbrel ticking over smoothly.

Changes:

- Fix IP Collisions (#390) ba058d9 (@lukechilds)
- Update to getumbrel/manager to v0.2.9 (#393) 516fe31 (@lukechilds)
- Fix incorrect app version for sphinx-relay (#378) c303778 (@AaronDewes)
- Fix lncli and bitcoin-cli wrapper scripts (#388) 9ef5fd7 (@AaronDewes @lukechilds)
- Wrap sphinx-relay process with init system (#395) 8bb1d1e (@lukechilds)
- Umbrel v0.3.1 (#394) 2735baa (@lukechilds)

Diff: https://github.com/getumbrel/umbrel/compare/v0.3.0...v0.3.1</summary>
    <title>getumbrel/umbrel: v0.3.1</title>
    <updated>2021-01-03T08:53:13Z</updated>
    <dc:date>2021-01-03T08:53:13Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.5.4</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.5.4"/>
    <summary>This is a hotfix that improves [DoS protection](https://github.com/bisq-network/bisq/pull/5026).

For a full list of changes please see [milestone v1.5.4](https://github.com/bisq-network/bisq/milestone/48?closed=1) for more details.

Here are the release notes from v1.5.2:

## Release notes
This release improves transaction handling in certain edge cases and contains multiple fixes making Bisq more reliable in general. There are also some notable UI updates for the payment accounts and offer book screens.

### DAO
- [Fix bsq to fiat calculation](https://github.com/bisq-network/bisq/pull/4909)
- [Use 30 days average USD/BSQ price for market cap](https://github.com/bisq-network/bisq/pull/4781)

### UI
- [Sort payment methods by display string not by id](https://github.com/bisq-network/bisq/pull/4956)
- [Make sign age column sortable](https://github.com/bisq-network/bisq/pull/4929)
- [Improve UI/UX for account aging column in 'Offers' section of GUI](https://github.com/bisq-network/bisq/pull/4814)
- [Fix sorting of table columns in portfolio section](https://github.com/bisq-network/bisq/pull/4923)
- [Improve funds and portfolio screens](https://github.com/bisq-network/bisq/pull/4933)
- [Account management usability improvements](https://github.com/bisq-network/bisq/pull/4863)
- [Improve usage of available space in accounts section](https://github.com/bisq-network/bisq/pull/4914)
- [Improved Offer Book chart outlier filter](https://github.com/bisq-network/bisq/pull/4892)
- [Prevent annoying popup errors for unhandled systray exception.](https://github.com/bisq-network/bisq/pull/4874)
- [Fix warning about rejected transaction](https://github.com/bisq-network/bisq/pull/4877)
- [Improve startup info display](https://github.com/bisq-network/bisq/pull/4850)
- [Rename getsAll payout option string](https://github.com/bisq-network/bisq/pull/4825)
- [Fix private notification style issue in dark mode](https://github.com/bisq-network/bisq/pull/4968)

### Trading
- [Handle unconfirmed deposit tx in pending trades](https://github.com/bisq-network/bisq/pull/4962)
- [Fix bug with maker fee tx at create offer](https://github.com/bisq-network/bisq/pull/4947)
- [Detect and handle invalid maker fee tx](https://github.com/bisq-network/bisq/pull/4917)
- [Detect missing deposit tx to allow moving to failed trades](https://github.com/bisq-network/bisq/pull/4921)
- [Allow take offer in case account age witness is not found and trade amount is small](https://github.com/bisq-network/bisq/pull/4897)
- [Add taker check for deposit amount](https://github.com/bisq-network/bisq/pull/4860)
- [Don't allow trade start if BitcoinJ is not fully synced](https://github.com/bisq-network/bisq/pull/4764)
- [Show price deviation in % for fixed price offers and BSQ](https://github.com/bisq-network/bisq/pull/4949)
- [Show price deviation in portfolio open offers and history view](https://github.com/bisq-network/bisq/pull/4845)
- [Improve TransferWise account wording and defaults currency selections](https://github.com/bisq-network/bisq/pull/4944)
- [Remove NGN (Nigerian Naira) as their central bank blocked Transferwise](https://github.com/bisq-network/bisq/pull/4976)
- [Add extra note for Amazon gift cards](https://github.com/bisq-network/bisq/pull/4977)
- [Add memo field at withdraw to external wallet screen after successful trade](https://github.com/bisq-network/bisq/pull/4908)
- [Create JSON files of actively traded crypto and fiat assets](https://github.com/bisq-network/bisq/pull/4831)

### Wallet
- [Fix emergency payout](https://github.com/bisq-network/bisq/pull/4859)
- [Prompt for confirmation before initiating SPV resync](https://github.com/bisq-network/bisq/pull/4841)
- [Add encrypted wallet password prompt when sending funds from BSQ wallet](https://github.com/bisq-network/bisq/pull/4780)
- [Add wallet info view](https://github.com/bisq-network/bisq/pull/4935)

### Reliability
- [Add tx broadcast to mempool explorer api](https://github.com/bisq-network/bisq/pull/4943)
- [Refactor http client](https://github.com/bisq-network/bisq/pull/4942)
- [Prevent that we write data at shutdown before we have read the data](https://github.com/bisq-network/bisq/pull/4907)
- [Improve shutdown routine](https://github.com/bisq-network/bisq/pull/4927)
- [Add 1 sec delay before calling exit](https://github.com/bisq-network/bisq/pull/4843)
- [Call completeHandler if services in store services is empty](https://github.com/bisq-network/bisq/pull/4963)

### Mediation/Arbitration
- [Privacy improvements for manual payout](https://github.com/bisq-network/bisq/pull/4899)
- [Option to sign single account for market bootstrapping](https://github.com/bisq-network/bisq/pull/4957)
- [Allow sending private notifications from avatar icon at trade](https://github.com/bisq-network/bisq/pull/4952)
- [Add error log for dispute failure](https://github.com/bisq-network/bisq/pull/4822)

### Performance
- [Various small performance improvements](https://github.com/bisq-network/bisq/pull/4954)
- [Cache results of isFiatCurrency and isCryptoCurrency](https://github.com/bisq-network/bisq/pull/4955)
- [Replace use of Collections to FXCollections in desktop](https://github.com/bisq-network/bisq/pull/4875)

### Network
- [Revert TTL of mailbox messages to original value of 15 days.](https://github.com/bisq-network/bisq/pull/4920)
- [Improve filter](https://github.com/bisq-network/bisq/pull/4817)
- [Use data store diffs also for AccountAgeWitnesses](https://github.com/bisq-network/bisq/pull/4930)
- [Remove m52go btc node ip](https://github.com/bisq-network/bisq/pull/4961)
- [In seednode installer, don't run random shell script to install git lfs](https://github.com/bisq-network/bisq/pull/4848)

### API
- [Add api method 'sendbtc'](https://github.com/bisq-network/bisq/pull/4901)
- [Add api method 'getpaymentacctform'](https://github.com/bisq-network/bisq/pull/4819)
- [Add api method 'getpaymentmethods'](https://github.com/bisq-network/bisq/pull/4818)
- [Add api method 'getbalance(s)'](https://github.com/bisq-network/bisq/pull/4799)
- [Add api method 'confirmpaymentreceived'](https://github.com/bisq-network/bisq/pull/4669)
- [Add api method 'confirmpaymentsent'](https://github.com/bisq-network/bisq/pull/4668)
- [Add api method 'takeoffer'](https://github.com/bisq-network/bisq/pull/4667)
- Add api method 'getunusedbsqaddress': [1](https://github.com/bisq-network/bisq/pull/4798), [2](https://github.com/bisq-network/bisq/pull/4773)
- [Add tx fee rate api methods: gettxfeerate, settxfeerate, unsettxfeerate](https://github.com/bisq-network/bisq/pull/4858)
- [Shut down rpc service at app shut down routine](https://github.com/bisq-network/bisq/pull/4852)

### Development
- [Don't shut down seed in regtest mode if all connections lost](https://github.com/bisq-network/bisq/pull/4898)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.5.4.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.5.4.jar`
The output need to match the value from the Bisq-1.5.4.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.5.4.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.5.4 or later. You can verify the binary the same way as you do with the Bisq application.

## Credits

Thanks to everyone who directly contributed to this release:

- @chimp1984
- @ripcurlx 
- @deusmax 
- @ghubstan
- @jmacxx 
- @m52go 
- @oscarguindzberg 
- @sqrrm 
- @stejbac 
- @wiz

A special thanks to our first time contributors:

- @Jakub-CZ: [Fix warning about rejected transaction](https://github.com/bisq-network/bisq/pull/4877)
- @huey735: [Rename getsAll payout option string](https://github.com/bisq-network/bisq/pull/4825)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.5.4</title>
    <updated>2020-12-31T12:50:14Z</updated>
    <dc:date>2020-12-31T12:50:14Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.3.0</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.3.0"/>
    <summary>Introducing the Umbrel App Store. You can now download and install BTCPay Server, Specter Desktop, Sphinx Relay, BTC RPC Explorer, Ride The Lightning, Lightning Terminal, and ThunderHub — all on your Umbrel in one click.

Changes:

- Add Electrs to README.md (#330) 7ab2d06 (@PeterXMR)
- Add app framework (#333) ffe9e2f (@lukechilds)
- Add btc-rpc-explorer app (#334) e9ceed5 (@lukechilds)
- Update example app PR link in docs c114eaa (@lukechilds)
- Tweak support link (#337) 83f7f87 (@mayankchhabra)
- Correctly set project name for apps (#338) 433794a (@lukechilds)
- Pass APP_HIDDEN_SERVICE environment variable to apps (#340) 56343b1 (@lukechilds)
- Set default APP_HIDDEN_SERVICE value to &quot;notyetset.onion&quot; 9fcc687 (@lukechilds)
- Supress errors when app hidden service does not yet exist 4b6546a (@lukechilds)
- Only ignore top level dotfiles (#344) d7b68c6 (@lukechilds)
- Remove quotes from .env-sample file (#346) 6f4241f (@AaronDewes)
- Reduce dbcache post IBD (#345) 1354cdf (@lukechilds)
- Upgrade btc-rpc-explorer to v2.1.0 (#350) 353cec4 (@lukechilds)
- Add thunderhub app (#343) 3d9902d (@apotdevin)
- Add sphinx-relay app (#341) 9f46a08 (@gonzaloaune)
- Add ride-the-lightning app (#336) f8179b5 (@louneskmt @lukechilds)
- Add lightning-terminal app (#348) 29cad06 (@louneskmt @lukechilds)
- Add specter-desktop app (#339) 5a763f6 (@k9ert @lukechilds)
- Exclude .gitkeep files when creating app data dir bcc71e9 (@lukechilds)
- Add btcpay-server app (#353) 52bde35 (@louneskmt @mayankchhabra @lukechilds)
- Remove specter-desktop authentication 9c224e8 (@lukechilds)
- Set shutdown timeouts for all apps to 1m b658d31 (@lukechilds)
- Update sphinx-relay to v1.3.2 6231fdb (@lukechilds)
- Exclude app-data from UMBREL_ROOT chown (#365) 828b133 (@lukechilds)
- Pull new app containers on update (#364) 35007d1 (@lukechilds)
- Kill karen on update (#366) a0baddc (@lukechilds)
- Clarify app logs (#367) b9c1bb8 (@mayankchhabra)
- Check for empty value before pulling app (#369) 549f985 (@mayankchhabra)
- Create app data dir before pulling images (#371) a1a41bf (@louneskmt)
- Add apps to registry.json (#373) c3f3571 (@mayankchhabra)
- Add debug script (#294) e5ac5e3 (@AaronDewes @louneskmt @mayankchhabra)
- Umbrel App Framework (#374) df2d1ec (@mayankchhabra)
- Update to getumbrel/dashboard to v0.3.14 (#375) 9575b7e (@lukechilds)
- Update to getumbrel/manager to v0.2.8 (#376) 46de834 (@lukechilds

Diff: https://github.com/getumbrel/umbrel/compare/v0.2.15...v0.3.0</summary>
    <title>getumbrel/umbrel: v0.3.0</title>
    <updated>2020-12-30T14:26:35Z</updated>
    <dc:date>2020-12-30T14:26:35Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.5.3</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.5.3"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

This is a hotfix that introduces [DoS protection](https://github.com/bisq-network/bisq/pull/5026).

Here are the release notes from v1.5.2:

## Release notes
This release improves transaction handling in certain edge cases and contains multiple fixes making Bisq more reliable in general. There are also some notable UI updates for the payment accounts and offer book screens.

### DAO
- [Fix bsq to fiat calculation](https://github.com/bisq-network/bisq/pull/4909)
- [Use 30 days average USD/BSQ price for market cap](https://github.com/bisq-network/bisq/pull/4781)

### UI
- [Sort payment methods by display string not by id](https://github.com/bisq-network/bisq/pull/4956)
- [Make sign age column sortable](https://github.com/bisq-network/bisq/pull/4929)
- [Improve UI/UX for account aging column in 'Offers' section of GUI](https://github.com/bisq-network/bisq/pull/4814)
- [Fix sorting of table columns in portfolio section](https://github.com/bisq-network/bisq/pull/4923)
- [Improve funds and portfolio screens](https://github.com/bisq-network/bisq/pull/4933)
- [Account management usability improvements](https://github.com/bisq-network/bisq/pull/4863)
- [Improve usage of available space in accounts section](https://github.com/bisq-network/bisq/pull/4914)
- [Improved Offer Book chart outlier filter](https://github.com/bisq-network/bisq/pull/4892)
- [Prevent annoying popup errors for unhandled systray exception.](https://github.com/bisq-network/bisq/pull/4874)
- [Fix warning about rejected transaction](https://github.com/bisq-network/bisq/pull/4877)
- [Improve startup info display](https://github.com/bisq-network/bisq/pull/4850)
- [Rename getsAll payout option string](https://github.com/bisq-network/bisq/pull/4825)
- [Fix private notification style issue in dark mode](https://github.com/bisq-network/bisq/pull/4968)

### Trading
- [Handle unconfirmed deposit tx in pending trades](https://github.com/bisq-network/bisq/pull/4962)
- [Fix bug with maker fee tx at create offer](https://github.com/bisq-network/bisq/pull/4947)
- [Detect and handle invalid maker fee tx](https://github.com/bisq-network/bisq/pull/4917)
- [Detect missing deposit tx to allow moving to failed trades](https://github.com/bisq-network/bisq/pull/4921)
- [Allow take offer in case account age witness is not found and trade amount is small](https://github.com/bisq-network/bisq/pull/4897)
- [Add taker check for deposit amount](https://github.com/bisq-network/bisq/pull/4860)
- [Don't allow trade start if BitcoinJ is not fully synced](https://github.com/bisq-network/bisq/pull/4764)
- [Show price deviation in % for fixed price offers and BSQ](https://github.com/bisq-network/bisq/pull/4949)
- [Show price deviation in portfolio open offers and history view](https://github.com/bisq-network/bisq/pull/4845)
- [Improve TransferWise account wording and defaults currency selections](https://github.com/bisq-network/bisq/pull/4944)
- [Remove NGN (Nigerian Naira) as their central bank blocked Transferwise](https://github.com/bisq-network/bisq/pull/4976)
- [Add extra note for Amazon gift cards](https://github.com/bisq-network/bisq/pull/4977)
- [Add memo field at withdraw to external wallet screen after successful trade](https://github.com/bisq-network/bisq/pull/4908)
- [Create JSON files of actively traded crypto and fiat assets](https://github.com/bisq-network/bisq/pull/4831)

### Wallet
- [Fix emergency payout](https://github.com/bisq-network/bisq/pull/4859)
- [Prompt for confirmation before initiating SPV resync](https://github.com/bisq-network/bisq/pull/4841)
- [Add encrypted wallet password prompt when sending funds from BSQ wallet](https://github.com/bisq-network/bisq/pull/4780)
- [Add wallet info view](https://github.com/bisq-network/bisq/pull/4935)

### Reliability
- [Add tx broadcast to mempool explorer api](https://github.com/bisq-network/bisq/pull/4943)
- [Refactor http client](https://github.com/bisq-network/bisq/pull/4942)
- [Prevent that we write data at shutdown before we have read the data](https://github.com/bisq-network/bisq/pull/4907)
- [Improve shutdown routine](https://github.com/bisq-network/bisq/pull/4927)
- [Add 1 sec delay before calling exit](https://github.com/bisq-network/bisq/pull/4843)
- [Call completeHandler if services in store services is empty](https://github.com/bisq-network/bisq/pull/4963)

### Mediation/Arbitration
- [Privacy improvements for manual payout](https://github.com/bisq-network/bisq/pull/4899)
- [Option to sign single account for market bootstrapping](https://github.com/bisq-network/bisq/pull/4957)
- [Allow sending private notifications from avatar icon at trade](https://github.com/bisq-network/bisq/pull/4952)
- [Add error log for dispute failure](https://github.com/bisq-network/bisq/pull/4822)

### Performance
- [Various small performance improvements](https://github.com/bisq-network/bisq/pull/4954)
- [Cache results of isFiatCurrency and isCryptoCurrency](https://github.com/bisq-network/bisq/pull/4955)
- [Replace use of Collections to FXCollections in desktop](https://github.com/bisq-network/bisq/pull/4875)

### Network
- [Revert TTL of mailbox messages to original value of 15 days.](https://github.com/bisq-network/bisq/pull/4920)
- [Improve filter](https://github.com/bisq-network/bisq/pull/4817)
- [Use data store diffs also for AccountAgeWitnesses](https://github.com/bisq-network/bisq/pull/4930)
- [Remove m52go btc node ip](https://github.com/bisq-network/bisq/pull/4961)
- [In seednode installer, don't run random shell script to install git lfs](https://github.com/bisq-network/bisq/pull/4848)

### API
- [Add api method 'sendbtc'](https://github.com/bisq-network/bisq/pull/4901)
- [Add api method 'getpaymentacctform'](https://github.com/bisq-network/bisq/pull/4819)
- [Add api method 'getpaymentmethods'](https://github.com/bisq-network/bisq/pull/4818)
- [Add api method 'getbalance(s)'](https://github.com/bisq-network/bisq/pull/4799)
- [Add api method 'confirmpaymentreceived'](https://github.com/bisq-network/bisq/pull/4669)
- [Add api method 'confirmpaymentsent'](https://github.com/bisq-network/bisq/pull/4668)
- [Add api method 'takeoffer'](https://github.com/bisq-network/bisq/pull/4667)
- Add api method 'getunusedbsqaddress': [1](https://github.com/bisq-network/bisq/pull/4798), [2](https://github.com/bisq-network/bisq/pull/4773)
- [Add tx fee rate api methods: gettxfeerate, settxfeerate, unsettxfeerate](https://github.com/bisq-network/bisq/pull/4858)
- [Shut down rpc service at app shut down routine](https://github.com/bisq-network/bisq/pull/4852)

### Development
- [Don't shut down seed in regtest mode if all connections lost](https://github.com/bisq-network/bisq/pull/4898)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.5.3.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.5.3.jar`
The output need to match the value from the Bisq-1.5.3.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

~The binary of this version is not signed by a code signing certificate right now as it was in previous versions. This is because of an expired certificate that wasn't renewed in-time. It will be signed on 28th of Dec with the newly received certificate and this note will be removed afterwards.~ The Windows binary was signed on Dec 27th and uploaded together with an updated signature file.

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.5.3.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.5.3 or later. You can verify the binary the same way as you do with the Bisq application.

## Credits

Thanks to everyone who directly contributed to this release:

- @chimp1984
- @ripcurlx 
- @deusmax 
- @ghubstan
- @jmacxx 
- @m52go 
- @oscarguindzberg 
- @sqrrm 
- @stejbac 
- @wiz

A special thanks to our first time contributors:

- @Jakub-CZ: [Fix warning about rejected transaction](https://github.com/bisq-network/bisq/pull/4877)
- @huey735: [Rename getsAll payout option string](https://github.com/bisq-network/bisq/pull/4825)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.5.3</title>
    <updated>2020-12-30T13:52:55Z</updated>
    <dc:date>2020-12-30T13:52:55Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.11.0-pre4</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.11.0-pre4"/>
    <summary>### This is a pre-release! Do not use unless you're sure know what you're doing!

This is a pre-release for beta-testing the next version of Specter.

Changes to notice while testing:
- Fix Coldcard signing issue when exporting to Electrum
- Fix wrong address type inPDF backup
- Fix issue when camera is open and scanning doesn't work for too long.
- Export transactions history, UTXOs, and addresses to CSV
- Reorganize the UTXO screen
- Label any address from any screen it is at.
- Sorting, searching, page limit, of the transactions/ utxo lists.
- New Tor tab in the settings for managing the connections over Tor and the Specter Tor hidden service</summary>
    <title>cryptoadvance/specter-desktop: v0.11.0-pre4</title>
    <updated>2020-12-28T13:43:43Z</updated>
    <dc:date>2020-12-28T13:43:43Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.11.0-pre3</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.11.0-pre3"/>
    <summary>### This is a pre-release! Do not use unless you're sure know what you're doing!

This is a pre-release for beta-testing the next version of Specter.

Changes to notice while testing:
- Fix Coldcard signing issue when exporting to Electrum
- Fix wrong address type inPDF backup
- Fix issue when camera is open and scanning doesn't work for too long.
- Export transactions history, UTXOs, and addresses to CSV
- Reorganize the UTXO screen
- Label any address from any screen it is at.
- Sorting, searching, page limit, of the transactions/ utxo lists.
- New Tor tab in the settings for managing the connections over Tor and the Specter Tor hidden service</summary>
    <title>cryptoadvance/specter-desktop: v0.11.0-pre3</title>
    <updated>2020-12-26T16:15:48Z</updated>
    <dc:date>2020-12-26T16:15:48Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.5.2</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.5.2"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This release improves transaction handling in certain edge cases and contains multiple fixes making Bisq more reliable in general. There are also some notable UI updates for the payment accounts and offer book screens.

### DAO
- [Fix bsq to fiat calculation](https://github.com/bisq-network/bisq/pull/4909)
- [Use 30 days average USD/BSQ price for market cap](https://github.com/bisq-network/bisq/pull/4781)

### UI
- [Sort payment methods by display string not by id](https://github.com/bisq-network/bisq/pull/4956)
- [Make sign age column sortable](https://github.com/bisq-network/bisq/pull/4929)
- [Improve UI/UX for account aging column in 'Offers' section of GUI](https://github.com/bisq-network/bisq/pull/4814)
- [Fix sorting of table columns in portfolio section](https://github.com/bisq-network/bisq/pull/4923)
- [Improve funds and portfolio screens](https://github.com/bisq-network/bisq/pull/4933)
- [Account management usability improvements](https://github.com/bisq-network/bisq/pull/4863)
- [Improve usage of available space in accounts section](https://github.com/bisq-network/bisq/pull/4914)
- [Improved Offer Book chart outlier filter](https://github.com/bisq-network/bisq/pull/4892)
- [Prevent annoying popup errors for unhandled systray exception.](https://github.com/bisq-network/bisq/pull/4874)
- [Fix warning about rejected transaction](https://github.com/bisq-network/bisq/pull/4877)
- [Improve startup info display](https://github.com/bisq-network/bisq/pull/4850)
- [Rename getsAll payout option string](https://github.com/bisq-network/bisq/pull/4825)
- [Fix private notification style issue in dark mode](https://github.com/bisq-network/bisq/pull/4968)

### Trading
- [Handle unconfirmed deposit tx in pending trades](https://github.com/bisq-network/bisq/pull/4962)
- [Fix bug with maker fee tx at create offer](https://github.com/bisq-network/bisq/pull/4947)
- [Detect and handle invalid maker fee tx](https://github.com/bisq-network/bisq/pull/4917)
- [Detect missing deposit tx to allow moving to failed trades](https://github.com/bisq-network/bisq/pull/4921)
- [Allow take offer in case account age witness is not found and trade amount is small](https://github.com/bisq-network/bisq/pull/4897)
- [Add taker check for deposit amount](https://github.com/bisq-network/bisq/pull/4860)
- [Don't allow trade start if BitcoinJ is not fully synced](https://github.com/bisq-network/bisq/pull/4764)
- [Show price deviation in % for fixed price offers and BSQ](https://github.com/bisq-network/bisq/pull/4949)
- [Show price deviation in portfolio open offers and history view](https://github.com/bisq-network/bisq/pull/4845)
- [Improve TransferWise account wording and defaults currency selections](https://github.com/bisq-network/bisq/pull/4944)
- [Remove NGN (Nigerian Naira) as their central bank blocked Transferwise](https://github.com/bisq-network/bisq/pull/4976)
- [Add extra note for Amazon gift cards](https://github.com/bisq-network/bisq/pull/4977)
- [Add memo field at withdraw to external wallet screen after successful trade](https://github.com/bisq-network/bisq/pull/4908)
- [Create JSON files of actively traded crypto and fiat assets](https://github.com/bisq-network/bisq/pull/4831)

### Wallet
- [Fix emergency payout](https://github.com/bisq-network/bisq/pull/4859)
- [Prompt for confirmation before initiating SPV resync](https://github.com/bisq-network/bisq/pull/4841)
- [Add encrypted wallet password prompt when sending funds from BSQ wallet](https://github.com/bisq-network/bisq/pull/4780)
- [Add wallet info view](https://github.com/bisq-network/bisq/pull/4935)

### Reliability
- [Add tx broadcast to mempool explorer api](https://github.com/bisq-network/bisq/pull/4943)
- [Refactor http client](https://github.com/bisq-network/bisq/pull/4942)
- [Prevent that we write data at shutdown before we have read the data](https://github.com/bisq-network/bisq/pull/4907)
- [Improve shutdown routine](https://github.com/bisq-network/bisq/pull/4927)
- [Add 1 sec delay before calling exit](https://github.com/bisq-network/bisq/pull/4843)
- [Call completeHandler if services in store services is empty](https://github.com/bisq-network/bisq/pull/4963)

### Mediation/Arbitration
- [Privacy improvements for manual payout](https://github.com/bisq-network/bisq/pull/4899)
- [Option to sign single account for market bootstrapping](https://github.com/bisq-network/bisq/pull/4957)
- [Allow sending private notifications from avatar icon at trade](https://github.com/bisq-network/bisq/pull/4952)
- [Add error log for dispute failure](https://github.com/bisq-network/bisq/pull/4822)

### Performance
- [Various small performance improvements](https://github.com/bisq-network/bisq/pull/4954)
- [Cache results of isFiatCurrency and isCryptoCurrency](https://github.com/bisq-network/bisq/pull/4955)
- [Replace use of Collections to FXCollections in desktop](https://github.com/bisq-network/bisq/pull/4875)

### Network
- [Revert TTL of mailbox messages to original value of 15 days.](https://github.com/bisq-network/bisq/pull/4920)
- [Improve filter](https://github.com/bisq-network/bisq/pull/4817)
- [Use data store diffs also for AccountAgeWitnesses](https://github.com/bisq-network/bisq/pull/4930)
- [Remove m52go btc node ip](https://github.com/bisq-network/bisq/pull/4961)
- [In seednode installer, don't run random shell script to install git lfs](https://github.com/bisq-network/bisq/pull/4848)

### API
- [Add api method 'sendbtc'](https://github.com/bisq-network/bisq/pull/4901)
- [Add api method 'getpaymentacctform'](https://github.com/bisq-network/bisq/pull/4819)
- [Add api method 'getpaymentmethods'](https://github.com/bisq-network/bisq/pull/4818)
- [Add api method 'getbalance(s)'](https://github.com/bisq-network/bisq/pull/4799)
- [Add api method 'confirmpaymentreceived'](https://github.com/bisq-network/bisq/pull/4669)
- [Add api method 'confirmpaymentsent'](https://github.com/bisq-network/bisq/pull/4668)
- [Add api method 'takeoffer'](https://github.com/bisq-network/bisq/pull/4667)
- Add api method 'getunusedbsqaddress': [1](https://github.com/bisq-network/bisq/pull/4798), [2](https://github.com/bisq-network/bisq/pull/4773)
- [Add tx fee rate api methods: gettxfeerate, settxfeerate, unsettxfeerate](https://github.com/bisq-network/bisq/pull/4858)
- [Shut down rpc service at app shut down routine](https://github.com/bisq-network/bisq/pull/4852)

### Development
- [Don't shut down seed in regtest mode if all connections lost](https://github.com/bisq-network/bisq/pull/4898)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.5.2.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.5.2.jar`
The output need to match the value from the Bisq-1.5.2.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

~The binary of this version is not signed by a code signing certificate right now as it was in previous versions. This is because of an expired certificate that wasn't renewed in-time. It will be signed on 28th of Dec with the newly received certificate and this note will be removed afterwards.~ The Windows binary was signed on Dec 27th and uploaded together with an updated signature file.

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.5.2.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.5.2 or later. You can verify the binary the same way as you do with the Bisq application.

## Credits

Thanks to everyone who directly contributed to this release:

- @chimp1984
- @ripcurlx 
- @deusmax 
- @ghubstan
- @jmacxx 
- @m52go 
- @oscarguindzberg 
- @sqrrm 
- @stejbac 
- @wiz

A special thanks to our first time contributors:

- @Jakub-CZ: [Fix warning about rejected transaction](https://github.com/bisq-network/bisq/pull/4877)
- @huey735: [Rename getsAll payout option string](https://github.com/bisq-network/bisq/pull/4825)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.5.2</title>
    <updated>2020-12-22T15:04:56Z</updated>
    <dc:date>2020-12-22T15:04:56Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/unchained-capital/caravan/releases/tag/v0.3.4</id>
    <link href="https://github.com/unchained-capital/caravan/releases/tag/v0.3.4"/>
    <summary>Adding Coldcard support to caravan</summary>
    <title>unchained-capital/caravan: v0.3.4</title>
    <updated>2020-12-21T16:07:38Z</updated>
    <dc:date>2020-12-21T16:07:38Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.11.0-pre2</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.11.0-pre2"/>
    <summary>### This is a pre-release! Do not use unless you're sure know what you're doing!

This is a pre-release for beta-testing the next version of Specter.

Changes to notice while testing:
- Export transactions history, UTXOs, and addresses to CSV
- Reorganize the UTXO screen
- Label any address from any screen it is at.
- Sorting, searching, page limit, of the transactions/ utxo lists.
- New Tor tab in the settings for managing the connections over Tor and the Specter Tor hidden service</summary>
    <title>cryptoadvance/specter-desktop: v0.11.0-pre2</title>
    <updated>2020-12-21T13:54:58Z</updated>
    <dc:date>2020-12-21T13:54:58Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta.rc2</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta.rc2"/>
    <summary>This release marks the first major release in the `v0.12.x` series! As this is a major release several new features are included in this release including: anchor commitment types are now the default, anchor commitment support for watchtowers, new arguments to auto compact the database as well as drop the `wtxmgr` state, generic wallet PSBT crafting+signing, and much more! As usual, this release contains several important bug fixes, so we recommend all users update. 

# Database Migrations
- TODO: describe &quot;peers-bucket&quot;

This release contains a migration to initialize a top-level-bucket for an outpoint index. There is also a subsequent migration that populates this index with an outpoint's status. This will cut down on expensive `bbolt` transactions throughout the codebase. The migration process should look something like this upon initial start up:
```
2020-12-21 10:45:07.256 [INF] LTND: Version: 0.12.0-beta commit=v0.12.0-beta, build=production, logging=default
2020-12-21 10:45:07.257 [INF] LTND: Active chain: Bitcoin (network=mainnet)
2020-12-21 10:45:07.257 [INF] LTND: Opening the main database, this might take a few minutes...
2020-12-21 10:45:07.257 [INF] LTND: Opening bbolt database, sync_freelist=false, auto_compact=false
2020-12-21 10:45:07.304 [INF] CHDB: Checking for schema update: latest_version=20, db_version=17
2020-12-21 10:45:07.304 [INF] CHDB: Performing database schema migration
2020-12-21 10:45:07.304 [INF] CHDB: Applying migration #18
2020-12-21 10:45:07.304 [INF] CHDB: Creating top-level bucket: &quot;peers-bucket&quot; ...
2020-12-21 10:45:07.305 [INF] CHDB: Created top-level bucket: &quot;peers-bucket&quot;
2020-12-21 10:45:07.305 [INF] CHDB: Applying migration #19
2020-12-21 10:45:07.305 [INF] CHDB: Creating top-level bucket: &quot;outpoint-bucket&quot; ...
2020-12-21 10:45:07.305 [INF] CHDB: Created top-level bucket: &quot;outpoint-bucket&quot;
2020-12-21 10:45:07.305 [INF] CHDB: Applying migration #20
2020-12-21 10:45:07.324 [INF] LTND: Database now open (time_to_open=67.71764ms)!
```

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.12.0-beta.rc2.txt` and `manifest-v0.12.0-beta.rc2.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.12.0-beta.rc2.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.12.0-beta.rc2.txt'
gpg: Signature made Tue Dec 15 18:57:27 2020 PST
gpg:                using RSA key 60A1FA7DA5BFF08BDCBBE7903BBD59E99B280306
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.


For this release roasbeef's signature is the secondary signature which can be verified with the following command: 
```
gpg --verify roasbeef-manifest-v0.12.0-beta.rc2.txt.sig manifest-v0.12.0-beta.rc2.txt
gpg: Signature made Wed Sep 30 17:35:20 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

## Verifying the Release Timestamp 

From this new version onwards, in addition to time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: `manifest-v0.12.0-beta.rc2.txt.sig.ots` and `manifest-v0.12.0-beta.rc2.txt.ots`.

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-v0.12.0-beta.rc2.txt.ots
ots verify manifest-v0.12.0-beta.rc2.txt.sig.ots -f roasbeef-manifest-v0.12.0-beta.rc2.txt.sig
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved.
The release binaries are compiled with `go1.15.6`, which is required by verifiers to arrive at the same ones.
They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.12.0-beta.rc2
gpg: Signature made Tue 15 Dec 2020 10:31:06 PM UTC using RSA key ID 9B280306
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot;
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming
that `vendor.tar.gz` and `lnd-source-v0.12.0-beta.rc2.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.12.0-beta.rc2.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.0-beta.rc2&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.0-beta.rc2&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## New Default Autopilot Heuristic

[In this version of `lnd`, the default heursitic for autopilot has been changed from preferential attachment, to a version that will attempt to optimize for the betweeness centrality of the node](https://github.com/lightningnetwork/lnd/pull/4668). At a high level, this change means that rather than trying to connect (stochastically) to the nodes that have the _most_ channels, `lnd` will instead attempt to connect to the nodes that [appear most often in the shortest paths within the network](https://en.wikipedia.org/wiki/Betweenness_centrality). This change will serve to step as a stepping stone to further diffuse the graph to make it more resilient. 

## Pathfinding Improvements 

[`lnd` will now properly penalize attempts of larger &quot;wumbo&quot; sized payments proportionally](https://github.com/lightningnetwork/lnd/pull/4602). This will serve to ensure that clients with less active failure information are able to properly prune the search space by increasing the _attempt_ cost for larger payments. New flags has been added to allow users to configure the attempt cost for this value (`attemptcost` and `attemptcostppm`). We encourage users taht frequently send larger payments to tweak these parameters to find what works best, and ideally communicate this information back to the maintainers of `lnd` so we can better tune the current default value. 

## Graph Download Optimizations 

[`lnd` will now _batch_ all insertion operations related to channel graph which should _greatly_ speed up initial graph download](https://github.com/lightningnetwork/lnd/pull/3367). Initial becnhmarks show this change resluting in a 3x speed increase, with further gains likely being seen on mobile and more constrained platforms. 

## Peer to Peer Updates 

[A new flag has been added to `lnd` to enforce a _global_ connection timeout when trying to connect out to new peers](https://github.com/lightningnetwork/lnd/pull/4452). Setting a lower value for this new command line option (`timeout`) will mean that `lnd` will give up on unrechable peers much sooner than before, which can be useful when attempting to connect to a set of addresses to open chnnel to a peer. 


## Automatic Database Compaction

The most important data of any `lnd` node is stored in its channel database (`channel.db`). The database library currently used for this DB is `bbolt` which by design does not give back free space to the file system, even if data is deleted from the DB. This can lead to large DB files and slow startup times. Compaction is the process of creating a fresh copy of a `bbolt` database that only contains data and no &quot;reserved free space&quot;. This process also de-fragments and validates the integrity of the data.

[Automatic compaction of the `channel.db` can now be turned on](https://github.com/lightningnetwork/lnd/pull/4667) with the flag `--db.bolt.auto-compact`. By default this will compact on startup, if the last compaction was more than a week ago. The flag `--db.bolt.auto-compact-min-age` can also be set to `0` to force compaction on every startup, independent of how long ago it happened last.


## Protocol Upgrades

### Anchor Output Channels
`lnd` will now open the new channel type dubbed &quot;anchor channels&quot; by default if both peers support it. This is a channel type that has been available to advanced users [since lnd v0.10](https://github.com/lightningnetwork/lnd/releases/tag/v0.10.0-beta), but it has seen a few updates that makes it [even safer](https://github.com/lightningnetwork/lnd/pull/4840) and useful in high fee scenarios, and it is now in line with [a proposed BOLT change](https://github.com/lightningnetwork/lightning-rfc/pull/824).

The anchor channel type is a new type of channel that is much safer in high fee scenarios, as it allows bumping the fees after the channel has been force closed, instead of making the peers agreeing on a future close fee. This is also a nice UX improvement, as less of the channel capacity needs to go towards the commitment fee reserve, and can instead be used for payments. In addition it allows [bundling multiple HTLC transactions](https://github.com/lightningnetwork/lnd/pull/4779) together into one, potentially saving on chain fees in force close scenarios.

The commitment transaction still needs to be signed up front with a fee that ensures its mempool acceptance, and this [fee now defaults](https://github.com/lightningnetwork/lnd/pull/4855) to 10 sat/vbyte. This can be tuned by the `--max-commit-fee-rate-anchors` flag, but this should be used with caution. One can opt-out of the anchor channel type for new channels by setting the `--protocol.no-anchors` flag.

### Static Remote Key Feature Bit Required

[This new version of `lnd` now requires channels that use a static remote key,
AKA &quot;tweakless commitments&quot;](https://github.com/lightningnetwork/lnd/pull/4751). This change
improves safety and security for users as now when a channel is force closed by
the remote party, the funds will go directly to a user control key. Prior
versions of  `lnd` have supported this channel type, but `lnd` will now
**only** allow this type of channel when making channels with new peer.

Lnd will [waive this requirement](https://github.com/lightningnetwork/lnd/pull/4847) in the case where it still has legacy channels with a peer. This ensures that lnd can still
connect to nodes it has existing channels with, even if they do not understand
the feature bit. 

### Improved End to End Payment Security 

The MPP protocol upgrade included a so called &quot;payment address&quot; that improves
end-to-end payment security by requiring the sender to include a special nonce
in the onion payload specify by the receiver. As intermediate nodes can't guess
this secret ahead of time, and it's encrypted in the onion only to the finally
receiver, they thwarts a large class of probing and de-anonymization attacks.
[This new release of `lnd` will now _require_ this feature bit set in any new
invoices it creates](https://github.com/lightningnetwork/lnd/pull/4752), which
means all payments that don't include this new payment secret will be rejected. 


## PSBT Signing

The internal wallet can now [create and sign PSBTs](https://github.com/lightningnetwork/lnd/pull/4389). In combination with the `ListUnspent` RPC this allows RPC users to implement full coin control.
This feature also takes us one step closer to the goal of supporting watch-only on-chain wallets in `lnd` where an online node would only have public keys to track the UTXOs and would delegate the signing to a non-networked `lnd` node that has the private keys, all through using PSBTs.
Read more about the possible use cases and dive into the examples [in our PSBT documentation](https://github.com/lightningnetwork/lnd/blob/master/docs/psbt.md).

## Build System

Leveraging the power of GitHub Workflows, we now [automatically build and push docker images](https://github.com/lightningnetwork/lnd/pull/4769) of all our releases [to Docker Hub](https://hub.docker.com/u/lightninglabs). This includes images for `amd64` and [`arm64`](https://github.com/lightningnetwork/lnd/pull/4852).

The distinction between the production `Dockerfile` and the development `dev.Dockerfile` [were made more clear in the documentation](https://github.com/lightningnetwork/lnd/pull/4790).

The release binaries for all OS/architectures are now [also built by a GitHub Workflow](https://github.com/lightningnetwork/lnd/pull/4777). The deterministic build system introduced in a previous release allows us to independently build and sign the binaries locally. Signatures of more than just one developer will be added to releases in the future.

The experiential build tag has been [removed](https://github.com/lightningnetwork/lnd/pull/4701) for the `assumechanvalid` flag that is used to prevent long rescans for neutrino nodes.

## Continuous Integration

Our continuous integration pipeline, most notably our integration tests, has received a number of improvements and bug fixes making them considerably faster and somewhat more stable:
- An integration test suite running [against a `bitcoind` with the TX index disabled](https://github.com/lightningnetwork/lnd/pull/4617) was added.
- The ~70 integration tests are now [split into 4 parts and run in parallel](https://github.com/lightningnetwork/lnd/pull/4655) reducing the execution time by ~50%.
- Log files are only uploaded to termbin.com and file.io [for failed runs](https://github.com/lightningnetwork/lnd/pull/4623) and the `bitcoind` binaries are [extracted from a docker image instead of being downloaded](https://github.com/lightningnetwork/lnd/pull/4623), shaving off a few more minutes from the total itest execution time.
- The test harness for the `btcd` node used as the mining node [were improved to fix port collisions](https://github.com/lightningnetwork/lnd/pull/4765) which resulted in flaky tests.
- A check was added that [forces new command line flags to also be documented in the `sample-lnd.conf` file](https://github.com/lightningnetwork/lnd/pull/4626).
- A new make target [for itest flake hunting](https://github.com/lightningnetwork/lnd/pull/4756) was added.
- New make targets [for running fuzz tests](https://github.com/lightningnetwork/lnd/pull/4643) were added.
- Build tags were removed from the integration test files, [allowing the linter to check those as well](https://github.com/lightningnetwork/lnd/pull/4593).
- The `zpay32` package's `Decode` and `Encode` functions now have [corresponding fuzz tests](https://github.com/lightningnetwork/lnd/pull/4651) in the `fuzz` package.
- The `brontide` fuzz tests have been [fixed](https://github.com/lightningnetwork/lnd/pull/4640).
- Fuzz testing has been [optimized](https://github.com/lightningnetwork/lnd/pull/4682) to instruct `gofuzz` to always mutate the input.

## Contract Court Performance Improvements
Performance [improvements](https://github.com/lightningnetwork/lnd/pull/4697) were made to the contract court subsystem which is responsible for closing out channels on chain and taking on-chain actions required to fully resolve the channel. The number of database transactions required to start up the subsystem has been reduced from one per channel to a single transaction, which reduces startup time. Improvements to the way the subsystem consumes new blocks from its backing bitcoin node have also improved the memory footprint of the system. 

## Extended Health Checks 

[A new optional `healthcheck` has been added to insturct `lnd` to restart itself in order to _refresh_ an expired RPC TLS cert](https://github.com/lightningnetwork/lnd/pull/4792). This change is useful in containerized contexts such as k8s, where an auto restarting `lnd` is able to propagate any auth changes in a decoupled manner upon restart. 

## `htlcswitch` Enhancements 

Database contention has been [reduced](https://github.com/lightningnetwork/lnd/pull/4547) in the link by batching removal of forwarding packages. The removal timer has also been increased from 1 minute to 1 hour.

[A bug has been fixed in our non-strict forwarding randomization](https://github.com/lightningnetwork/lnd/pull/4659) to ensure we explciitly randomize our link sleection rather than relying on the undefined ordering of map interation in the Go spec. 

## Peer Flap Rate Tracking

An [update](https://github.com/lightningnetwork/lnd/pull/4440) to the channel fitness subsystem has introduced tracking of the number of times lnd is connected and disconnected from each of its peers. This information is surfaced in the output of the `ListPeers` API. 

The flap rate we have recorded for peers is also used to rate limit the amount of data lnd will store to track the peer’s uptime. If a peer has a high flap rate, lnd will reduce the amount of data it stores in memory, resulting in more aggregated uptime information. This change is intended to protect against constantly flapping peers, and will have little effect on peers that are consistently online with the occasional restart. To ensure that we do not permanently punish a peer for a period of instability long in the past, the flap rate we track for peers is exponentially cooled down over time. 

## RPC Enchancements &amp; Bug Fixes 

### Uniform Unconfirmed Coin Selection for SendCoins+

[`lnd` now allows all RPC calls that craft and send transactions to spend unconfirmed coins](https://github.com/lightningnetwork/lnd/pull/4653). 

This change the following RPCs:

- `Lightning.SendCoins`
- `Lightning.SendMany`
- `WalletKit.SendOutputs`

We've added two new parameters for these methods, following the same format as used for `Lightning.OpenChannel` RPC:

- `min_confs` (default=1)
- `spend_unconfirmed` (default=false)


### Macaroon Root ID Key Rotation 

[`lnd` now supports _root ID_ key rotation](https://github.com/lightningnetwork/lnd/pull/4427). This allows the baker (creator) of a set of macaroons to _invalidate_ them all by deleting and regenerating the root key used to generate the macaroons. This feature is a useful security tool, as if an application/system that uses lnd's macaroons in a fine grained manner is compromised, the admin is able to _revoke_ all generated macaroons. 

Several new calls have been added to allow users to take advantage of this feature, namely:
  * The `lncli bakemacaroon` call now accepts a new parameter: `root_key_id`. This new field is an integer that can be used to rotate root ID keys. 
  * A new `lncli listmacaroonids` command has been added to allow callers to monitor all their existing allocated root IDs.
  * A new `lncli deletemacaroonid` call has been added which implements _macaroon revocation_ by allowing the caller to _delete_ a specified root key ID. 
 
 
### New Verbose Output for `ChannelBalance`

[The `lncli channebalance` call now returns much more information than before in order to give users more insight w.r.t exactly _how_ their funds are distributed off-chain](https://github.com/lightningnetwork/lnd/pull/4512). An output of the new call resmbles the following: 
```
⛰lncli channelbalance
{
    &quot;balance&quot;: &quot;27476201&quot;,
    &quot;pending_open_balance&quot;: &quot;0&quot;,
    &quot;local_balance&quot;: {
        &quot;sat&quot;: &quot;27476201&quot;,
        &quot;msat&quot;: &quot;27476201135&quot;
    },
    &quot;remote_balance&quot;: {
        &quot;sat&quot;: &quot;109137173&quot;,
        &quot;msat&quot;: &quot;109137173865&quot;
    },
    &quot;unsettled_local_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;unsettled_remote_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;pending_open_local_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;pending_open_remote_balance&quot;: {
        &quot;sat&quot;: &quot;1783362&quot;,
        &quot;msat&quot;: &quot;1783362000&quot;
    }
}
```

Note that the first two fields (`balance` and `pending_open_balance`) are now deprecated and will be _removed_ in the future. Callers should use the new fields that return both `sat` and `msat` instead. 

### Raw Key Support for `SharedKeyRequest`

[The `DeriveSharedKey` now accepts a raw public key in addition to key locator](https://github.com/lightningnetwork/lnd/pull/4436). 

### Additional HTLC Information in ListChannels

[The `ListChannels` call will now return additional information about the set of linked HTLCs in a channel](https://github.com/lightningnetwork/lnd/pull/4693). Namely, we'll now return: 
  * The `htlc_index` of the HTLC within the channel 
  * The `forwarding_channel`, or the channel that forwarded the HTLC to the targte channel 
  * The `forwarding_htlc_index`, or the HTLC index on the forwarded channel. 

### Automated Let's Encrypt Certificates 

A new series of command line flags have been added to `lnd` which allows users to automatically obtain and renew a Let's Encrypt Certificate for the RPC interface of their `lnd` node. With this change, in certain configurations, callers will be able to hit an `lnd` now without having to manually store and update the `tls.cert` locally. 
New flags added to the `lnd` command line and `lnd.conf`:

* `--letsencryptport`: The port on which lnd will listen for Let's Encrypt challenges. Let's Encrypt will always try to contact on port 80. Often non-root processes are not allowed to bind to ports lower than 1024. This configuration option allows a different port to be used, but must be used in combination with port forwarding from port 80.
* `--letsencryptdir`: The directory to store Let's Encrypt certificates within. By default this is `.lnd/letsencrypt`.
* `--letsencryptdomain`: Request a Let's Encrypt certificate for the domain specified using this flag.

When `lncli` cannot find a `tls.cert` file, it will assume the server has a valid (Let's Encrypt) certificate. It is important to pass the domain name as a command line flag to `lncli`:

`lncli --rpcserver my.domain.org:10009`

This is necessary as well when connecting to `localhost`.

### Custom Routing Hints for AddHoldInvoice 

[The `AddHoldInvoice` RPC call now allows the users to specify their own custom routing hints](https://github.com/lightningnetwork/lnd/pull/3672). 



### Allow No RPC Auth on Private Addresses 

[A new config evaluation has been added to allow user to instruct `lnd` that it should allow RPC requests with no authentiation _only_ if `lnd` is listening on a private address](https://github.com/lightningnetwork/lnd/pull/4473). This makes certain Docker based configurations more user friendly, as any dependent containers no longer need to obtain and update lnd's RPC authentication information. Assuming `lnd` is only listening on a non-public private interface, then the `--no-macaroons` config option is now valid.  

### New Channel Acceptor Parameters
Additional [fields](https://github.com/lightningnetwork/lnd/pull/4683) have been added to the `ChannelAcceptor` API, which allow custom setting of custom errors for the remote peer, an upfront shutdown address for the channel (if supported by the peer), and more. Note that the error provided will be sent to the peer verbatim, so should not contain sensitive information.

### Maximum Local CSV
When opening a channel, the remote party can specify the CSV delay for your funds. This value determines the amount of time that your balance will be unavailable in the case where your force close the channel. A [`max_local_csv` parameter](https://github.com/lightningnetwork/lnd/pull/4735) has been added to allow setting of custom limitations on this value. For outgoing channels, this can be set using the `max_local_csv` field in the `OpenChannel` request. The `maxlocaldelay` config value can be used to set a default maximum value for all channels.

### Disable TLS for REST
It is now possible to [disable TLS for REST RPC](https://github.com/lightningnetwork/lnd/pull/4648) using `--no-rest-tls`.

## Refactoring
This release sees the removal of several components from the main `lnd` package:
- `fundingmanager.go` and tests are [moved](https://github.com/lightningnetwork/lnd/pull/4757) to the `funding` package.
- `chainregistry.go` and `chainparams.go` have been [moved](https://github.com/lightningnetwork/lnd/pull/4487) to the `chainreg` package.
- `mock.go` has been [removed](https://github.com/lightningnetwork/lnd/pull/4542) in favor of the `lntest/mock` package.
- A global variable `activeNetParams` has been [removed](https://github.com/lightningnetwork/lnd/pull/4505).

The `peer` package's dependency on `brontide` has been [removed](https://github.com/lightningnetwork/lnd/pull/4645).
## Miscellaneous

The DNS servers to use for initial peer bootstrapping [can now be specified](https://github.com/lightningnetwork/lnd/pull/4744) to overwrite the hard coded default values.

All supported command line flags are now [also properly documented in the `sample-lnd.conf` file](https://github.com/lightningnetwork/lnd/pull/4626).

[A new flag has been added to instruct `lnd` to timeout early if it can't obtain the file lock on bolt DB](https://github.com/lightningnetwork/lnd/pull/4787). 

### Multi node management

Hosting nodes on non-trusted (cloud) hardware was made safer by adding a [stateless initialization mode](https://github.com/lightningnetwork/lnd/pull/1288) that instructs `lnd` to not store any unencrypted macaroons on the host's file system. Instead, the admin macaroon is returned in the response of the wallet creation request and must be stored by the caller.

To support the stateless initialization mode mentioned above on the client side as well, [configuration profiles for `lncli` can now be created](https://github.com/lightningnetwork/lnd/pull/4310). Those profiles make it easy to interact with multiple nodes from the same client machine. For additional security the macaroons stored in the profiles can optionally be encrypted with a password.

### Recovery

Forcing the on-chain wallet to rescan its state from chain was [made easier by adding the `--reset-wallet-transactions` flag](https://github.com/lightningnetwork/lnd/pull/4715) to `lnd` that replaces the functionality previously only available in the external tool `dropwtxmgr`.

### Individual subsystem log levels
A change that makes it possible to set the [log level for individual subsystems](https://github.com/lightningnetwork/lnd/pull/4772) was merged. One can now specify a global log level, and subsystem log levels that will override the global setting: `--debuglevel=debug,PEER=info,SRVR=trace`.


## Bug fixes

- A bug in [the restore logic for old SCB files](https://github.com/lightningnetwork/lnd/pull/4865) was fixed that caused the `a height hint greater than 0 must be provided` error.
- A bug was fixed in how we [watch for states on chain](https://github.com/lightningnetwork/lnd/pull/4780), that could cause us to ignore our own close transaction if we attempted recovery while our force close transaction was still in the mempool.
- All directories referenced by command line flags are [now properly created](https://github.com/lightningnetwork/lnd/pull/4622) on startup.
- Neutrino users can now [specify a full node backend with an Onion v2 address](https://github.com/lightningnetwork/lnd/pull/4806). Before this fix, only clearnet addresses were supported.
- The chain backend health check which ensures that lnd is reliably connected to a bitcoin node has been [updated](https://github.com/lightningnetwork/lnd/pull/4755) to use the `uptime` api for bitcoind nodes. This check previously used the `getBlockChainInfo` API, which proved unsuitable because it could take up to 5 minutes for bitcoind to respond due to non-granular locking in core.
- A bug in the `walletrpc` subserver’s `ListSweeps` endpoint where the `verbose` output option would fail if a sweep was not found on chain has been [fixed](https://github.com/lightningnetwork/lnd/pull/4762). This could happen for transactions that were replaced-by-fee. 
- [`lnd` will no longer allow restoted channels to be manually closed](https://github.com/lightningnetwork/lnd/pull/4525). This fixes a class of issues that would cause `lnd` to be unable to start due to a borked local channel state. 
- [`lnd` will no longer attempt to trap SIGABRT](https://github.com/lightningnetwork/lnd/pull/4627). 
- [A bug has been fixed related to mnemonic seed validation on restore](https://github.com/lightningnetwork/lnd/pull/4738). This ensures `lnd` will properly catch invalid words (that aren't in the wordlist) much earlier than before. 
- [All errors in the `routerrpc` server will now be properly mapped to gRPC status codes](https://github.com/lightningnetwork/lnd/pull/4691). 
- [`lnd` nodes using the neutrino backend will now properly be able to connect to onion v2 onion service addresses](https://github.com/lightningnetwork/lnd/pull/4806). 


# Contributors (Alphabetical Order)

Alex Bosworth 
András Bánki-Horváth
Ben Woosley 
Bjarne Magnussen 
Calvin Zachman 
Carla Kirk-Cohen 
Carsten Otto 
Conner Fromknecht 
Dan Janosik 
Daniel Babbev 
Dominik Spicher 
Eugene Siegel
Federico Bond 
Glen Cooper 
githorray
Graham Krizek
Hampus Sjöberg
Johan T. Halseth
Joost Jager
Juan Pablo Civile 
Jules Lamur 
Kartik Shah
Marty Jones
Matheus Degiovani 
Mayank Chhabra
MrManPew
Olaoluwa Osuntokun 
Oliver Gugger 
positiveblue
Roei Erez 
Tom Kirkpatrick 
Torkel Rogstad 
Wilmer Paulino 
Yaacov Akiba Slama
Yan Pritzker 
yyforyongyu </summary>
    <title>lightningnetwork/lnd: v0.12.0-beta.rc2</title>
    <updated>2020-12-19T01:34:49Z</updated>
    <dc:date>2020-12-19T01:34:49Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.1</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.1"/>
    <summary>- ADD: enable batch-send on multisig wallets
- FIX: Speed-up multisig wallets (disable handoff for multisig)
- FIX: Import Multisig from Specter Desktop - Fingerprint is Incorrect
- FIX: broken export .txn file on tx confirmation screen
- FIX: backup screen would flash during loading on dark mode
- FIX: Handle opening links if the default browser isn't Safari
- FIX: contradiction in Vault introduction text
- FIX: localizations for CA, DE, ES, fa_IR, sl_SI, cs_CZ, pt_BR</summary>
    <title>BlueWallet/BlueWallet: v6.0.1</title>
    <updated>2020-12-18T19:51:22Z</updated>
    <dc:date>2020-12-18T19:51:22Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/eclair/releases/tag/v0.5.0</id>
    <link href="https://github.com/ACINQ/eclair/releases/tag/v0.5.0"/>
    <summary># Eclair v0.5.0

This release includes many exciting new features, API changes as well as several bug fixes and improvements.
It is fully compatible with 0.4.2 (and all previous versions of eclair).

# Major changes

### Cluster mode

Eclair now allows you to scale up one _logical_ lightning node across multiple servers.

Front servers take care of routing table related gossip and syncing requests from peers, which is cpu/bandwidth intensive.
The backend server can focus on core channel management.
BOLT 1 and BOLT 7 messages are handled in the frontend, while BOLT 2 messages go through and are processed in the backend.

This new feature is key for robust and scalable enterprise deployments.
Head over to the [documentation](./docs/Cluster.md) for more details.

### Blockchain watchdogs

Eclair now includes a blockchain watchdog, that fetches bitcoin headers from various sources in order to detect whether we're being [eclipsed](https://eprint.iacr.org/2015/263.pdf).

The current blockchain sources we use are:

- blockchainheaders.net (headers over DNS)
- blockstream.info
- mempool.space

### Seed segregation

Eclair now splits your seed into two distinct parts: `node_seed.dat` and `channel_seed.dat`.

It makes sense to separate the keys that are used for connection handling and gossip (and have no impact on your funds) from the keys that are used for channel operations (and have a direct, critical impact on your funds).

This change paves the way for future security improvements, such as using hardware wallets for channel keys.

### Per-node feerate tolerance

On-chain feerate spikes have a subtle but important impact on the security of your channel funds.
Eclair lets you configure the tolerance you have with your peers via the `eclair.on-chain-fees.feerate-tolerance` configuration parameter.

With this release, you can now override this configuration for specific nodes.
This can be useful when one of your peer is trusted and you know it won't try to cheat you (for example because it's one of your own nodes, a family member's node or a friend).
You can configure a higher feerate tolerance with these nodes than with nodes you don't know or trust.

### Plugin improvements

More plugins hooks have been added to eclair, to allow custom connection management and custom commitment formats.
Hats off to @btcontract who was able to implement [hosted channels](https://github.com/btcontract/hosted-channels-rfc) entirely as an eclair plugin!

### API changes

This release contains a few improvements to existing APIs:

- The `channelId` field has been added to the `channel-state-changed` websocket event
- Initial relay fees can be configured when opening a channel with the `open` API

Head over to our [API documentation](https://acinq.github.io/eclair) for more details.

### Miscellaneous improvements and bug fixes

- #1617 lets you redirect traffic automatically from a tor node to a normal node
- `option_static_remotekey` is now optionally activated by default

# Verifying signatures

You will need `gpg` and our release signing key 7A73FE77DE2C4027. Note that you can get it:

- from our website: https://acinq.co/pgp/drouinf.asc
- from github user @sstone, a committer on eclair: https://api.github.com/users/sstone/gpg_keys

To import our signing key:

```sh
$ gpg --import drouinf.asc
```

To verify the release file checksums and signatures:

```sh
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```

# Building

Eclair builds are deterministic. To reproduce our builds, please use the following environment (*):

- Ubuntu 19.10
- AdoptOpenJDK 11.0.6
- Maven 3.6.3

Use the following command to generate the eclair-node package:

```sh
mvn clean install -DskipTests
```

That should generate `eclair-node/target/eclair-node-0.5.0-XXXXXXX-bin.zip` with sha256 checksums that match the one we provide and sign in `SHA256SUMS.asc`

(*) You may be able to build the exact same artefacts with other operating systems or versions of JDK 11, we have not tried everything.

# Upgrading

This release is fully compatible with Eclair v0.4.2. You don't need to close your channels, just stop eclair, upgrade and restart.

# Changelog

- 131b2e01 Add workaround for lnd sync issue (#1563)
- bffb7a3f Fix race condition in integration test (#1564)
- 90bf08e6 Update akka to 2.6.10 (#1568)
- 9c16bb75 Manual watching of peer-connection actor (#1567)
- b0716aea Make `Commitments` a trait (#1542)
- ad17683b (Minor) Fix `Features.toString` (#1573)
- 98508f30 Fix empty replyTo in update_relay_fee (#1572)
- e74f3458 Clarify crossSign helper functions (#1578)
- 28f72e41 Remote address in ConnectionInfo (#1579)
- baa22696 Rework features compatibility (#1576)
- 1f90e5b8 Add per-node feerate tolerance (#1575)
- 366f9bef Add a case object to get router data (#1581)
- c5566540 Add blockchain watchdog (#1545)
- f32e75b0 Segregate the node seed from the channel seed (#1584)
- 59449bfc Increase docker timeouts for electrumx in tests (#1589)
- c0d465c4 Fix NodeRelayer flaky test (#1588)
- e5db3147 Allow plugins to provide broken HTLCs after a restart (#1586)
- c0e38841 Add a test to ensure `NodeParams.nodeId` always equals `NodeParams.privateKey.publicKey` (#1593)
- 54b589cb Improve MPP-send for direct channels (#1599)
- 407b330f Remove `timedOutOutgoingHtlcs` from AbstractCommitments (#1604)
- 06c95a7a Clarify trampoline to legacy diagram (#1607)
- 6b32fd06 Allow plugins to force reconnect (#1594)
- 8bfb9f08 Clean up bitcoinheaders error logs (#1606)
- 6330e76d [CI] Exclude tests that call external APIs (#1622)
- 848b4338 Ack htlc settlement commands after writing state (#1615)
- ed61b577 Improve CustomCommitmentsPlugin methods (#1613)
- ce73ef3a Allow overriding of Tor target (#1617)
- 8cfa3f5c Set the same priority for all routing messages (#1624)
- a2a980c7 Add channelId to websocket event (#1605)
- 3ebf601a Minor: Less spammy and better logs (#1618)
- 040e6d08 Retrieve bitcoin's mempool-min-fee (#1608)
- a4d18456 Set initial relay fees during channel open (#1610)
- 8d6af350 Add router API for invoice routing hints (#1590)
- 4e567053 Remove old compatibility workaround for eclair mobile (#1625)
- 08c21fa5 Distribute connection-handling on multiple machines using akka-cluster (#1566)
- c13ae5e1 Set min-fee-rate to 2 sat/byte (#1626)
- 0e5ec4dc Fix bug in enforceMinimumFeerate (#1629)
- e8b47e14 Move fee provider configuration section (#1631)
- 0ce993d6 fixup! Distribute connection-handling (#1566) (#1634)
- c7cc536b Improve channel exceptions (#1585)
- df7789ed Add metrics to track utxos (#1609)
- ade17ecb Use a local actorsystem by default (#1636)
- bbbd2294 Accept remote's closing fee when we have nothing at stake (#1633)
- 95b34f27 Fix duplicate implicit btc amount conversions (#1637)
- 810323ca Settle HTLCs revoked commit (#1630)
- 30735b40 fixup! Settle HTLCs revoked commit (#1630) (#1638)
- 183bdde0 Activate static_remotekey by default (#1639)
- dae5eeed Disable the distibuted pubsub extension by default (#1642)
- 413ee29d Fix htlc origin JSON serialization (#1641)
- 9425fd4b Make PluginParams a simple trait (#1643)
- 370fe416 Measure the distribution of payments across nodes (#1644)
- 5e6c28e8 ElectrumWatcher: fix for unconfirmed txs (#1647)
- 39d9bfbe Add cluster doc, and packaging improvements (#1646)
- d44ff85d (Minor) Improve logs (#1648)</summary>
    <title>ACINQ/eclair: v0.5.0</title>
    <updated>2020-12-18T14:30:44Z</updated>
    <dc:date>2020-12-18T14:30:44Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.4</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.4"/>
    <summary>### Bug fixes:

* Fix coin selection label filter (@Kukks)
* Greenfield: Fix behaviour after first admin signup (see #2150) @dennisreimann
* Greenfield: If invoice is not found, error 404 should be returned rather than a crash @dennisreimann
* Attempt to fix sometimes broken Mark as Seen button @NicolasDorier

### Improvements

* Improve the invoice details view (see #2144) @dennisreimann @dstrukt

### Miscellaneous

* API Keys: Add usage examples link to docs @dennisreimann</summary>
    <title>btcpayserver/btcpayserver: v1.0.6.4</title>
    <updated>2020-12-18T04:03:59Z</updated>
    <dc:date>2020-12-18T04:03:59Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.0</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.0"/>
    <summary>ADD: Multisig Vaults
ADD: Create Multisig Vaults
ADD: Import Multisig Vaults
ADD: Vaults Backup
ADD: Coordination Backup
ADD: Manage/edit Keys
ADD: Share co-signers
ADD: Quorum setup
ADD: Choose address type
ADD: Persian language
ADD: Help section and tips to Vaults
FIX: Scan multisig cosigner in formats: plain Zpub, wallet descriptor
FIX: Txs disappear and re-fetch if opened wallet too fast
FIX: DE, CZ, ES, IT and RU language files
FIX: Transaction details not shown when 'display in wallets list'
FIX: LNURL wallet not found</summary>
    <title>BlueWallet/BlueWallet: v6.0.0</title>
    <updated>2020-12-16T18:46:54Z</updated>
    <dc:date>2020-12-16T18:46:54Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta.rc1</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta.rc1"/>
    <summary>This release marks the first major release in the `v0.12.x` series! As this is a major release several new features are included in this release including: anchor commitment types are now the default, anchor commitment support for watchtowers, new arguments to auto compact the database as well as drop the `wtxmgr` state, generic wallet PSBT crafting+signing, and more more! As usual this release contains several important bug fixes, so we recommend at all users update. 

# Database Migrations
TODO

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.12.0-beta.rc1.txt` and `manifest-v0.12.0-beta.rc1.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.12.0-beta.rc1.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.12.0-beta.rc1.txt'
gpg: Signature made Tue Dec 15 18:57:27 2020 PST
gpg:                using RSA key 60A1FA7DA5BFF08BDCBBE7903BBD59E99B280306
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.


For this release roasbeef's signature is the secondary signature which can be verified with the following command: 
```
gpg --verify roasbeef-manifest-v0.12.0-beta.rc1.txt.sig manifest-v0.12.0-beta.rc1.txt
gpg: Signature made Wed Sep 30 17:35:20 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

## Verifying the Release Timestamp 

From this new version onwards, in addition time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: ` manifest-v0.12.0-beta.rc1.txt.sig.ots` and `manifest-v0.12.0-beta.rc1.txt.ots`.

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-v0.12.0-beta.rc1.txt.ots
ots verify manifest-v0.12.0-beta.rc1.txt.sig.ots -f roasbeef-manifest-v0.12.0-beta.rc1.txt.sig
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved.
The release binaries are compiled with `go1.15.6`, which is required by verifiers to arrive at the same ones.
They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.12.0-beta.rc1
gpg: Signature made Tue 15 Dec 2020 10:31:06 PM UTC using RSA key ID 9B280306
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot;
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming
that `vendor.tar.gz` and `lnd-source-v0.12.0-beta.rc1.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.12.0-beta.rc1.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.0-beta.rc1&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.0-beta.rc1&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

TODO

# Contributors (Alphabetical Order)

Alex Bosworth 
András Bánki-Horváth
Ben Woosley 
Bjarne Magnussen 
Calvin Zachman 
Carla Kirk-Cohen 
Carsten Otto 
Conner Fromknecht 
Dan Janosik 
Daniel Babbev 
Dominik Spicher 
Eugene 
Federico Bond 
Glen Cooper 
githorray
Graham Krizek
Hampus Sjöberg
Johan T. Halseth
Joost Jager
Juan Pablo Civile 
Jules Lamur 
Kartik Shah
Marty Jones
Matheus Degiovani 
Mayank Chhabra
MrManPew
Olaoluwa Osuntokun 
Oliver Gugger 
positiveblue
Roei Erez 
Tom Kirkpatrick 
Torkel Rogstad 
Wilmer Paulino 
Yaacov Akiba Slama
Yan Pritzker 
yyforyongyu </summary>
    <title>lightningnetwork/lnd: v0.12.0-beta.rc1</title>
    <updated>2020-12-16T03:23:56Z</updated>
    <dc:date>2020-12-16T03:23:56Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/phoenix/releases/tag/v1.4.4</id>
    <link href="https://github.com/ACINQ/phoenix/releases/tag/v1.4.4"/>
    <summary>## Main changes

#### Support for lightning parameters in BIP21 invoices

BIP21 URIs can contain a `lightning` field if the recipient also accepts lightning payments. In that case the wallet now lets the user choose how he wants to pay the invoice.

#### Improve swapout feerate

Minimum feerate for swapout is now dynamic and should adjust with the state of the mempool.

## Complete list of changes

- **app**: https://github.com/ACINQ/phoenix/compare/v1.4.3...v1.4.4

## Verifying signatures

You will need `gpg` and our release signing key E434ED292E85643A. Note that you can get it:
- from our website: https://acinq.co/pgp/padioupm.asc
- from github user @pm47, a committer on eclair: https://api.github.com/users/pm47/gpg_keys

To import our signing key:
```
$ gpg --import padioupm.asc
```

To verify the release file checksums and signatures:
```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```</summary>
    <title>ACINQ/phoenix: v1.4.4</title>
    <updated>2020-12-15T13:09:47Z</updated>
    <dc:date>2020-12-15T13:09:47Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.3</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.3"/>
    <summary>### New features

* Greenfield API: Can update invoice metadata @Kukks
* Greenfield API: User notifications API @Kukks 
* Greenfield API: Can specify the preferred language when creating an invoice @NicolasDorier
* Greenfield API: Can specify the URL to redirect customer to when he paid when creating an invoice @NicolasDorier
* Greenfield API: Expose the `checkoutLink` of the created invoice, where you need to redirect your customer to pay in BTC @NicolasDorier
* Add a `Mark all as seen` button to the notification dropdown @ubolator
* Support of Armenian language in checkout page. Thanks to Mash Mashok
* Add ability to add custom CSS to pull payments @ubolator
* Introduce some basic spam protection for hosts with open registration (see #2106) @Kukks


### Improvements

* Hide pagination &amp; page size when not necessary (#2122) @dennisreimann @dstrukt
* Document in `/docs` miscellaneous features of BTCPay (such as optional arguments of the checkout page) @NicolasDorier
* UI: Improve mobile store setup view @dennisreimann @dstrukt
* Improve U2F support, should leverage OS support and now work properly on mobile Safari (See #2086) @dennisreimann
* Improve how new label picked their color (See #2072) @ubolator
* Improve the design of transaction's label dropdown to fix display issue when there are too many (see #2078) @ubolator

### Bug fixes:

* Ensure campaign status is shown correctly in minimal crowdfund app (#2062) @ubolator
* Can remove automatic labels from invoices @NicolasDorier
* Fix Pay Button Link preview when app mode chosen (#2115) @Kukks
* If the user was not admin, the API Keys page was ignoring some of the checked permissions @NicolasDorier
* Greenfield API: If invoice creation failed for some reason, BTCPay would give a HTTP 500 error without details helping the user. @NicolasDorier
* Fix performance issue: Some invoice queries were causing a full table scan on all invoices rather than using an index. @NicolasDorier
* Fix: Importing an incorrect wallet from BlueWallet was crashing (#2098) @Kukks
* Fix classic theme for payment requests (Fix #2084) @dennisreimann

### Miscellaneous:

* Removing the bitpay invoice translator @NicolasDorier
* Improve the documentation of API Keys page @NicolasDorier
* Fix doc for create invoice request's metadata @NicolasDorier
* Fix docs for pull payments @Kukks</summary>
    <title>btcpayserver/btcpayserver: v1.0.6.3</title>
    <updated>2020-12-13T12:26:24Z</updated>
    <dc:date>2020-12-13T12:26:24Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.5.1</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.5.1"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

This is a hotfix that fixes critical bugs that can occur during the trade process!

For a full list of changes please see [milestone v1.5.1](https://github.com/bisq-network/bisq/milestone/46) for more details.

Here are the release notes from v1.5.0:

## Release notes

This release finally brings SegWit to Bisq's trade protocol. It also implements fee optimizations enabled by SegWit, so mining fees for all BTC transactions are lower.

There are also some notable trading-related updates: you can now edit pricing and payment methods of your live offers; account limits have been simplified (and removed where unneeded); and 3 new payment methods were added (Australian PayID, TransferWise and Amazon gift cards).

The SegWit integration wouldn't have been possible without the anonymous sponsor who pre-funded the project, so big thanks to them! If you might be interested in pre-funding a specific feature, please contact us on Keybase in the #projects channel. Bisq is a critical element of the Bitcoin ecosystem and could really use your help.

### DAO
- [Use LegacyAddress instead of Address for BSQ](https://github.com/bisq-network/bisq/pull/4681)
- [Remove outliers when calculating BSQ rate](https://github.com/bisq-network/bisq/pull/4706)
- [Hide proposal delete button](https://github.com/bisq-network/bisq/pull/4739)

### UI
- Improve labeling of charts: [1](https://github.com/bisq-network/bisq/pull/4740), [2](https://github.com/bisq-network/bisq/pull/4715)
- [Cleanup user interface elements in `Send Funds` screen](https://github.com/bisq-network/bisq/pull/4718)
- [Add export to csv hyperlink (as button takes too much vertical space)](https://github.com/bisq-network/bisq/pull/4702)

### Trading
- [Use SegWit for the trade protocol](https://github.com/bisq-network/bisq/pull/4612)
- [Simplify limits for signed and unsigned accounts](https://github.com/bisq-network/bisq/pull/4744)
- [Update `Edit Offer` to allow for change of market and payment method](https://github.com/bisq-network/bisq/pull/4728)
- [Add new payment method: Australian PayID](https://github.com/bisq-network/bisq/pull/4743)
- [Add new payment method: TransferWise](https://github.com/bisq-network/bisq/pull/4726)
- [Add new payment method: Amazon Gift Cards](https://github.com/bisq-network/bisq/pull/4788)
- [Fix bug with reading historical data](https://github.com/bisq-network/bisq/pull/4745)

### Wallet
- Add SegWit fee estimation: [1](https://github.com/bisq-network/bisq/pull/4710), [2](https://github.com/bisq-network/bisq/pull/4754)
- [Speed up restore from seed](https://github.com/bisq-network/bisq/pull/4840)
- [Allow user-defined block explorers](https://github.com/bisq-network/bisq/pull/4733)
- [Show current tx fee rate on main screen](https://github.com/bisq-network/bisq/pull/4676)

### Privacy
- [Update netlayer references to Bisq repository](https://github.com/bisq-network/bisq/pull/4694)

### Network
- [Remove HitBTC as a pricenode data provider](https://github.com/bisq-network/bisq/pull/4756)
- [Add new burningman address for delayed payout txs](https://github.com/bisq-network/bisq/pull/4768)
- [Reduce seednode default max connections to 20](https://github.com/bisq-network/bisq/pull/4751)
- [Show past deviation in monitor](https://github.com/bisq-network/bisq/pull/4734)
- [Clean up mailbox messages for closed trades](https://github.com/bisq-network/bisq/pull/4746)
- [Admin filter for auto-confirmation service addresses](https://github.com/bisq-network/bisq/pull/4736)

### API
- [Implement 'canceloffer' api method](https://github.com/bisq-network/bisq/pull/4714)
- [Implement api methods 'keepfunds', 'withdrawfunds'](https://github.com/bisq-network/bisq/pull/4711)
- [Implement 'gettrade' api method](https://github.com/bisq-network/bisq/pull/4704)
- [Implement 'takeoffer' api method](https://github.com/bisq-network/bisq/pull/4673)
- [Implement 'confirmpaymentsent' api method](https://github.com/bisq-network/bisq/pull/4674)
- [Implement 'confirmpaymentreceived' api method](https://github.com/bisq-network/bisq/pull/4675)
- [Optionally print the json contract for a given trade id](https://github.com/bisq-network/bisq/pull/4705)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.5.1.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.5.1.jar`
The output need to match the value from the Bisq-1.5.1.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.5.1.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.5.1 or later. You can verify the binary the same way as you do with the Bisq application.

## Credits

Thanks to everyone who directly contributed to this release:

- Bayernatoor
- cd2357
- chimp1984
- Christoph Atteneder
- deusmax
- Florian Reimair
- Stan
- James Cox
- Luis Aranguren
- mrosseel
- Oscar Guindzberg
- sqrrm
- wiz

A special thanks to our first time contributors:

- Luis Aranguren
- deusmax

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).
</summary>
    <title>bisq-network/bisq: v1.5.1</title>
    <updated>2020-12-08T16:07:43Z</updated>
    <dc:date>2020-12-08T16:07:43Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.3</id>
    <link href="https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.3"/>
    <summary># Summary

This silent release fixes Ledger incompatibility.

- **Ledger hardware wallet fix for Ledger 1.5.1 firmware**

# Newbie Guide

While setting up Wasabi is straightforward, even a Linux wizard with the longest beard can get stuck on the most basic tasks. Consider taking a look at the [Installation Instructions](https://docs.wasabiwallet.io/using-wasabi/InstallPackage.html) guide.

# Advanced Guide

If you want to build Wasabi from source code or update the source code check out [these instructions.](https://docs.wasabiwallet.io/using-wasabi/BuildSource.html)

From version 1.1.3 Wasabi also introduces [reproducible builds](https://reproducible-builds.org/): [Deterministic Build Guide](https://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi.Documentation/Guides/DeterministicBuildGuide.md)

Build with .NET Core 3.1.403-win-x64.

## FAQ

- **Frequently asked questions [here](https://docs.wasabiwallet.io/FAQ/).**
- **Requirements?** x64, Linux, &gt;Win10, &gt;macOS 10.13.

# Release Notes

- **UI fixes** https://github.com/zkSNACKs/WalletWasabi/pull/4759
- **HWI upgrade** https://github.com/zkSNACKs/WalletWasabi/pull/4497
- **PSBT fixes** https://github.com/zkSNACKs/WalletWasabi/pull/4608 https://github.com/zkSNACKs/WalletWasabi/pull/4807</summary>
    <title>zkSNACKs/WalletWasabi: v1.1.12.3</title>
    <updated>2020-12-08T08:59:56Z</updated>
    <dc:date>2020-12-08T08:59:56Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/phoenix/releases/tag/v1.4.3</id>
    <link href="https://github.com/ACINQ/phoenix/releases/tag/v1.4.3"/>
    <summary>## Main changes

#### Fixed some connection issues with peer

Use ip address instead of domain name to connect to the trampoline node. This caused connectivity issues in some cases, due to IPv6 conversion.

## Complete list of changes

- **app**: https://github.com/ACINQ/phoenix/compare/v1.4.2...v1.4.3
- **core**: https://github.com/ACINQ/eclair/compare/v0.4.5-android-phoenix...v0.4.6-android-phoenix

## Verifying signatures

You will need `gpg` and our release signing key E434ED292E85643A. Note that you can get it:
- from our website: https://acinq.co/pgp/padioupm.asc
- from github user @pm47, a committer on eclair: https://api.github.com/users/pm47/gpg_keys

To import our signing key:
```
$ gpg --import padioupm.asc
```

To verify the release file checksums and signatures:
```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```</summary>
    <title>ACINQ/phoenix: v1.4.3</title>
    <updated>2020-12-07T14:22:13Z</updated>
    <dc:date>2020-12-07T14:22:13Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.4</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.4"/>
    <summary># v0.10.4 (Hotfix release)
# Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.4/Specter-Setup-v0.10.4.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.4/SpecterDesktop-v0.10.4.dmg) (only Catalina or above), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.4/specter_desktop-v0.10.4-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.4/specterd-v0.10.4-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.4/specterd-v0.10.4-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.4/specterd-v0.10.4-x86_64-linux-gnu.zip)

# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.4/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @stepansnigirev's GPG key.
You can get public key from here: [https://stepansnigirev.com/ss-specter-release.asc](https://stepansnigirev.com/ss-specter-release.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x36ED357AB24B915F) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/6F16E354F83393D6E52EC25F36ED357AB24B915F).
Fingerprint of the key is `6F16 E354 F833 93D6 E52E  C25F 36ED 357A B24B 915F`, short id: `36ed357ab24b915f`

# Release notes
- Bugfix: Fix error handling for loading wallet balances (#750) (@ben-kaufman)
- Bugfix: Fix issue with adding more keys to an existing device (#754) (@stepansnigirev)
- Bugfix: Fix crash due to a wallet failing to load (#752) (@ben-kaufman)</summary>
    <title>cryptoadvance/specter-desktop: v0.10.4</title>
    <updated>2020-12-06T17:24:03Z</updated>
    <dc:date>2020-12-06T17:24:03Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.2</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.2"/>
    <summary># Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.2/Specter-Setup-v0.10.2.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.2/SpecterDesktop-v0.10.2.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.2/specter_desktop-v0.10.2-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.2/specterd-v0.10.2-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.2/specterd-v0.10.2-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.2/specterd-v0.10.2-x86_64-linux-gnu.zip)

# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.2/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @stepansnigirev's GPG key.
You can get public key from here: [https://stepansnigirev.com/ss-specter-release.asc](https://stepansnigirev.com/ss-specter-release.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x36ED357AB24B915F) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/6F16E354F83393D6E52EC25F36ED357AB24B915F).
Fingerprint of the key is `6F16 E354 F833 93D6 E52E  C25F 36ED 357A B24B 915F`, short id: `36ed357ab24b915f`

# Release notes
- HWI: Update udev rules for Specter DIY (#742) (@stepansnigirev)
- HWI: Update communication with Specter DIY (#746) (@stepansnigirev)
- Bugfix: Fix RBF for UTXO consolidation and wrong fee on import tx (#744) (@ben-kaufman)
- Bugfix: Remove export wallet from cc and cobo for singlesig (#743) (@stepansnigirev)
- Bugfix: Fix transaction times issue with Bitcoin Core (#738) (@ben-kaufman)
- Bugfix: Support parsing changed electrum files from Coldcard (#736) (@stepansnigirev)
- Bugfix: Remove listwalletdir call from wallet manager checker (#734) (@stepansnigirev)
- Bugfix: Fix Trezor and Keepkey multisig address verification (#733) (@stepansnigirev)
- Bugfix: Show QR code address verification only for Specter-DIY (#714) (@ben-kaufman)
- Bugfix: Fix typo with links (target=&quot;blank&quot; =&gt; target=&quot;_blank&quot;)(#703) (@stepansnigirev)
- Bugfix: Add .python-version to .gitignore (#699) (@Sjors)
- Bugfix: Allow renaming admin account and a few bug fixes (#732) (@ben-kaufman)
- Bugfix: Fix typo:manual configuration (#739)
- Feature: Electrum import and export support (#721) (@ben-kaufman)
- UI: Mobile friendly UI (#731) (@ben-kaufman)
- UI: Add transaction data popup (#692) (@ben-kaufman)
- UI: Move toggling price functionality to the right toolbar (#691) (@ben-kaufman)
- Refactoring: Break down the controller into endpoints (#726) (@ben-kaufman)
- Dependencies: Update pyinstaller requirements.txt (#745) (@ben-kaufman)
- Dependencies: Bump embit version (#728) (@stepansnigirev)
- Dependencies: Update dependencies and use Bitcoin Core v0.20.1 for tests (#687) (@k9ert)
- Devops: Bitcoind without docker (#686) (@k9ert)
- Docs: Update FAQ on how to recover password (#727) (@k9ert)
- Docs: Update FAQ on how to upgrade Specter Desktop (#702) (@k9ert)</summary>
    <title>cryptoadvance/specter-desktop: v0.10.2</title>
    <updated>2020-12-05T13:56:43Z</updated>
    <dc:date>2020-12-05T13:56:43Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.2</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.2"/>
    <summary>*  Reverting uppercasing of Bech32 addresses in QR code (@Rockstardev) see #2100

It turns out this is not compatible with every wallets.</summary>
    <title>btcpayserver/btcpayserver: v1.0.6.2</title>
    <updated>2020-12-04T05:23:26Z</updated>
    <dc:date>2020-12-04T05:23:26Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.1</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.1"/>
    <summary>### Bug fixes:

* The sync popup when the nodes are synching was not showing up (@Kukks)</summary>
    <title>btcpayserver/btcpayserver: v1.0.6.1</title>
    <updated>2020-12-03T14:38:56Z</updated>
    <dc:date>2020-12-03T14:38:56Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/rootzoll/raspiblitz/releases/tag/v1.6.2</id>
    <link href="https://github.com/rootzoll/raspiblitz/releases/tag/v1.6.2"/>
    <summary>Now with Pool (command line) &amp; Sphinx Relay Server to join the Podcast 2.0 experiment.

JoinMarket with Bech32-Orderbook &amp; LNbits with Lightning Paper Vouchers.</summary>
    <title>rootzoll/raspiblitz: v1.6.2</title>
    <updated>2020-12-02T01:32:47Z</updated>
    <dc:date>2020-12-02T01:32:47Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v5.6.7</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v5.6.7"/>
    <summary>* ADD: Coin Control
* ADD: Handle fiat rate from alternate sources
* ADD: new languages: Bulgarian, Polish, Welsh
* ADD: UYU currency
* FIX: PayJoin is now BIP compliant
* FIX: better support for BRD (aka bread) wallet with segwit
* FIX: Disregarding current denomination on send screen, scanning address always resets it to BTC
* FIX: import *.txn file with txhex - extra newline character prevented it from being recognized (closes #2161)
* FIX: locale pt_BR, cs_CZ, sl_SI, es_ES, nl_NL, fi_FI, ru
* FIX: translate message if Bitcoin address or LN invoice is in clipboard
* FIX: Styling for large screens
* FIX: exclude change address from recipients for Confirm screen
* FIX: Don't show loading indicator on launch and onsnapitem
* FIX: Show alert if storage access is denied
* FIX: When wallet card has balance but no txs it displays 'pull to refresh'
* FIX: broken wallet-&gt;send-&gt;longtap send btn-&gt;choose photo
* FIX: Use system color on widgets
* FIX: hide provide entropy button when creating Lightning or MS wallet
* FIX: Can't paste in address block while building tx</summary>
    <title>BlueWallet/BlueWallet: v5.6.7</title>
    <updated>2020-12-01T09:29:20Z</updated>
    <dc:date>2020-12-01T09:29:20Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.2.15</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.2.15"/>
    <summary>This update fixes some compatibility issues between Umbrel and the latest version of Electrum Wallet.

Changes:

- Ensure PR builds run against the correct commit (#273) e9e2611 (@AaronDewes)
- Remove use of deprecated ::set-env in GitHub Actions (#316) b7416dc (@AaronDewes)
- Prevent LND from rotating TLS cert every startup (#318) a627fdf (@louneskmt)
- Update to getumbrel/electrs:v0.8.6 (#321) 6b28d84 (@lukechilds)

Diff: https://github.com/getumbrel/umbrel/compare/v0.2.14...v0.2.15</summary>
    <title>getumbrel/umbrel: v0.2.15</title>
    <updated>2020-11-26T10:52:47Z</updated>
    <dc:date>2020-11-26T10:52:47Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin-core/HWI/releases/tag/1.2.1</id>
    <link href="https://github.com/bitcoin-core/HWI/releases/tag/1.2.1"/>
    <summary>Also available on [PyPi](https://pypi.org/project/hwi/) and can be installed with `pip install -U hwi`

## Fixed

* Compatibility with Ledger Bitcoin app 1.5.1
* BitBox02 unlocks during `enumerate`
</summary>
    <title>bitcoin-core/HWI: 1.2.1</title>
    <updated>2020-11-26T02:44:59Z</updated>
    <dc:date>2020-11-26T02:44:59Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.0</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.0"/>
    <summary>### Important security fix

* Due to a privacy leak vulnerability, users of the payment button are strongly encouraged to update as soon as possible.

### New features

* Add QR code scan/show for PSBT  + Import wallet via QR [spec](https://github.com/BlockchainCommons/Research/blob/master/papers/bcr-2020-005-ur.md) (supported by Cobo vault / Blue wallet) (#1931)
* Checkout experience: Unified QR Code for on-chain and offchain payment (ref #2060) (@rockstardev)
* Greenfield: Clean webhook API github-like (ref #2058) (@NicolasDorier @Kukks)
* Greenfield: Can query invoice payment data (@Kukks)
* Allow users to select block explorers from a list or specify their own URL  (@Kukks)
* Allow disabling live notifications globally and disabling specific notifications per user (ref #1991) (@Kukks)
* Allow custom redirect_url for PoS (ref #1924) (@mariodian)
* A new experimental plugin system (@Kukks)

### Improvements

* UI: Make store setup more intuitive (ref #2011) (@dennisreimann @dstrukt)
* UI: Improve payment request design (ref #2011) (@dennisreimann @dstrukt) (ref #2011) (@dennisreimann @dstrukt)
* UI: Improve pull payments design (ref #2011) (@dennisreimann @dstrukt)
* UI: Improvement of the modal checkout overlay  (see [this comment](https://github.com/btcpayserver/btcpayserver/pull/1930#issuecomment-701298441)) (@dennisreimann)
* BTCPay Server vault operations can now be retried without having to refresh the page (@NicolasDorier)
* UX: Warning and hint system for stores not completely set up (@dennisreimann @rockstardev)
* Greenfield (Breaking change): Invoice state renamed `Confirmed/Complete` to `Settled`. (@NicolasDorier)
* Greenfield (Breaking change): Invoice state renamed `Paid` to `Processing`. (@NicolasDorier)
* Breaking change: Remove SQLite as the default database option (@Kukks)
* UI: Make sure transaction labels display correctly when there are many (ref #2076) (@ubolator)
* UI: Properly center payment button content (@ubolator)
* UI: Improvement of the lightning node info view (ref #2066) (@dennisreimann)
* Share the link of a pay button so one can embed in a QR code (fix #635) (@Kukks)
* Checkout experience: Make QR codes with bech32 uppercase again (@rockstardev)
* Add warning if the merchant setup invoice confirmation to zero conf (@ubolator)
* Adds a warning to configure the e-mail server before &quot;Requires a confirmation mail for registering&quot; checkbox can be checked if e-mail server is not configured. (@ubolator)
* Payment requests: Partially paid invoices are reused for future payments in payment requests. (@NicolasDorier)
* API Keys UI: Properly align form items (@dennisreimann)
* Wallets: By default, created PSBT were including previous transactions. Some hardware wallets ended up returning timeouts, so we reverted this decision. (@NicolasDorier)

### Bug fixes:

* Fix payment button page title (ref #1952) (@sgracia13)
* Do not log the database connection string (@Kukks)
* Payjoin: Use base64 instead of hex for BIP78 (fix #1984) (@Kukks)
* If a password fail to be reset by mail, show proper error (fix #1986) (@NicolasDorier)
* Email was not included in the invoice text search (@Kukks)
* Greenfield: The create invoice route should not sending back generic errors if it fails (@dennisreimann)
* Fix-up links which were ignoring custom root path (@ubolator)
* Greenfield: Opening a channel with lightning was not working properly (ref #2054) (@dennisreimann)
* Docs: Create invoice route was referencing the wrong type in the doc (@dennisreimann)
* Payment Request user input rounding issue (ref #2014) (@Kukks)
* In store settings, the create new token button was returning an error (@NicolasDorier)
* Wallet: When clicking on the app's label of a transaction, an error 404 occured (@Kukks)
* Checkout experience: If coinswitch was activated, the altcoin tab was missing (@Kukks)
* If Email verification is turned off but you requested a forgot password form, it would ignore the request internally. (@Kukks)
* Docs: Fix swagger format for dates (@Kukks)
* Payjoin: Do not include maxadditionalfeecontribution if there is no change. (ref #2007) (@NicolasDorier)
* Checkout: If an invoice accepting lightning payments was partially paid, the payment of the new lightning invoice was buggy. (@Kukks)</summary>
    <title>btcpayserver/btcpayserver: v1.0.6.0</title>
    <updated>2020-11-25T15:24:27Z</updated>
    <dc:date>2020-11-25T15:24:27Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin-core/HWI/releases/tag/1.2.1-rc.1</id>
    <link href="https://github.com/bitcoin-core/HWI/releases/tag/1.2.1-rc.1"/>
    <summary>Release Candidate 1 for HWI 1.2.1</summary>
    <title>bitcoin-core/HWI: 1.2.1-rc.1</title>
    <updated>2020-11-25T02:49:10Z</updated>
    <dc:date>2020-11-25T02:49:10Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/rust-bitcoin/rust-lightning/releases/tag/v0.0.12</id>
    <link href="https://github.com/rust-bitcoin/rust-lightning/releases/tag/v0.0.12"/>
    <summary> * Large API overhauls to make several major API surfaces much easier to work.
 * C/C++ Bindings are a part of this release, however are still considered beta status. They are expected to mature as more language-specific binding work is built on top.</summary>
    <title>rust-bitcoin/rust-lightning: v0.0.12</title>
    <updated>2020-11-24T22:53:13Z</updated>
    <dc:date>2020-11-24T22:53:13Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bwt-dev/bwt/releases/tag/v0.2.0</id>
    <link href="https://github.com/bwt-dev/bwt/releases/tag/v0.2.0"/>
    <summary>### Changelog

- Descriptor based tracking! ✨🎉 (#1)

  You can now specify output script descriptors to track via `--descriptor &lt;descriptor&gt;`. Descriptors are also used internally to represent user-provided `--xpub`s.

  The HTTP API was updated to be fully descriptor-based. Wallets and wallet origins   are now identified by the descriptor checksum, addresses have descriptors associated with them,   and a new `bip32_origins` field is available based on the descriptor origin information.

- Support for Electrum multi-signature wallets (#60)

  For a manual server setup, this requires using the `sortedmulti()` descriptor.  For example, for a 2-of-3 wallet: `sortedmulti(2,xpub1...,xpub2...,xpub3...)`.

  With the Electrum plugin, this should Just Work™.

- Alpha release of [`libbwt`](https://github.com/shesek/bwt/blob/master/doc/libbwt.md) (#64), a C FFI interface for managing the bwt servers, and of [`nodejs-bwt-daemon`](https://github.com/shesek/bwt/tree/master/contrib/nodejs-bwt-daemon) (#65), a nodejs package that wraps it.

- Support non-wallet transactions in `blockchain.transaction.get` / `GET /tx/:txid/hex` (requires txindex and no pruning)

- Emit wallet rescan and blockchain sync progress updates (via mpsc, [ffi](#64) and the console)

- Support binding on ephemeral port (e.g. `--http-addr 127.0.0.1:0`) (#63)

- Reduce the number of dependencies (#61)

- Shutdown cleanly, via `SIGINT`/`SIGTERM` for CLI or a custom signal for library users (#62, #66)

- HTTP: Alias `GET /txs/since/0` as `GET /txs`

- Fix `blockchain.scripthash.listunspent` / `Query::list_unspent` to return an empty set instead of erroring when there's no history.

- Electrum: Fix `mempool.get_fee_histogram` (5af7bfc62d7d98)

- Upgrade to rust-bitcoin v0.25, rust-miniscript v4.0.0 and rust-bitcoincore-rpc v0.12

Breaking CLI changes:

- The `-d` CLI option was changed to mean `--descriptor` instead of `--bitcoind-dir` (which is now available as `-r`).

- Renamed `--http-server-addr` to `--http-addr` and `--electrum-rpc-addr` to `--electrum-addr`

- The CLI now accepts a single `--rescan-since` timestamp instead of a separate one for each descriptor/xpub.

- The separator for environment variables with multiple values is now `;` instead of `,`.
  For example: `DESCRIPTORS=&quot;wpkh(xpub../0/*);wpkh(xpub../1/*)&quot;`


------------

### Downloads

|         | Full Server &lt;sup&gt;1&lt;/sup&gt; | Electrum Server &lt;sup&gt;2&lt;/sup&gt; | Electrum Plugin &lt;sup&gt;3&lt;/sup&gt;
|---------|--|--|--
| **Linux**   | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-x86_64-linux.tar.gz) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-electrum_only-x86_64-linux.tar.gz) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-electrum_plugin-x86_64-linux.tar.gz) |
| **macOS**   | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-x86_64-osx.zip) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-electrum_only-x86_64-osx.zip) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-electrum_plugin-x86_64-osx.zip) |
| **Windows** | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-x86_64-win.zip) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-electrum_only-x86_64-win.zip) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-electrum_plugin-x86_64-win.zip) |
| **ARMv7**   | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-arm32v7.tar.gz) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-electrum_only-arm32v7.tar.gz) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-electrum_plugin-arm32v7.tar.gz) |
| **ARMv8**   | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-arm64v8.tar.gz) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-electrum_only-arm64v8.tar.gz) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-electrum_plugin-arm64v8.tar.gz)&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=4&gt;&lt;sub&gt;&lt;sup&gt;1&lt;/sup&gt; Includes Electrum RPC, HTTP API and WebHooks support ([learn more](https://github.com/shesek/bwt#installation))&lt;br&gt;&lt;sup&gt;2&lt;/sup&gt; Includes Electrum RPC support only ([learn more](https://github.com/shesek/bwt#electrum-only-server))&lt;br&gt;&lt;sup&gt;3&lt;/sup&gt; Plugin with an embedded RPC server - *hot wallets are unsupported* ([learn more](https://github.com/shesek/bwt#electrum-plugin))&lt;/sub&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; |

### Installation

Installation instructions are [available on the README](https://github.com/shesek/bwt#installation).

### Verifying signatures

The releases are signed by Nadav Ivgi (@shesek). The public key can be verified on [keybase](https://keybase.io/nadav), [github](https://api.github.com/users/shesek/gpg_keys), [twitter](https://twitter.com/shesek) and [HN](https://news.ycombinator.com/user?id=nadaviv). The signature can be verified as follows (replace `x86_64-linux` with your download):

```bash
# Download package
$ wget https://github.com/shesek/bwt/releases/download/v0.2.0/bwt-0.2.0-x86_64-linux.tar.gz
# Fetch signing key
$ gpg --keyserver keyserver.ubuntu.com --recv-keys FCF19B67866562F08A43AAD681F6104CD0F150FC
# Verify signature
$ wget -qO - https://github.com/shesek/bwt/releases/download/v0.2.0/SHA256SUMS.asc \
  | gpg --decrypt - | grep ' bwt-0.2.0-x86_64-linux.tar.gz$' | sha256sum -c -
```

You should see `Good signature from &quot;Nadav Ivgi &lt;nadav@shesek.info&gt;&quot; ... Primary key fingerprint: FCF1 9B67 ...` and `bwt-0.2.0-x86_64-linux.tar.gz: OK`.

### Reproducible builds

The builds are fully reproducible.

You can verify the checksums against the v0.2.0 builds on Travis CI: https://travis-ci.org/github/shesek/bwt/builds/745668826

See [more details here](https://github.com/shesek/bwt#reproducible-builds).</summary>
    <title>bwt-dev/bwt: v0.2.0</title>
    <updated>2020-11-24T16:21:58Z</updated>
    <dc:date>2020-11-24T16:21:58Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.5.0</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.5.0"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

## Release notes

This release finally brings SegWit to Bisq's trade protocol. It also implements fee optimizations enabled by SegWit, so mining fees for all BTC transactions are lower.

There are also some notable trading-related updates: you can now edit pricing and payment methods of your live offers; account limits have been simplified (and removed where unneeded); and 3 new payment methods were added (Australian PayID, TransferWise and Amazon gift cards).

The SegWit integration wouldn't have been possible without the anonymous sponsor who pre-funded the project, so big thanks to them! If you might be interested in pre-funding a specific feature, please contact us on Keybase in the #projects channel. Bisq is a critical element of the Bitcoin ecosystem and could really use your help.

### DAO
- [Use LegacyAddress instead of Address for BSQ](https://github.com/bisq-network/bisq/pull/4681)
- [Remove outliers when calculating BSQ rate](https://github.com/bisq-network/bisq/pull/4706)
- [Hide proposal delete button](https://github.com/bisq-network/bisq/pull/4739)

### UI
- Improve labeling of charts: [1](https://github.com/bisq-network/bisq/pull/4740), [2](https://github.com/bisq-network/bisq/pull/4715)
- [Cleanup user interface elements in `Send Funds` screen](https://github.com/bisq-network/bisq/pull/4718)
- [Add export to csv hyperlink (as button takes too much vertical space)](https://github.com/bisq-network/bisq/pull/4702)

### Trading
- [Use SegWit for the trade protocol](https://github.com/bisq-network/bisq/pull/4612)
- [Simplify limits for signed and unsigned accounts](https://github.com/bisq-network/bisq/pull/4744)
- [Update `Edit Offer` to allow for change of market and payment method](https://github.com/bisq-network/bisq/pull/4728)
- [Add new payment method: Australian PayID](https://github.com/bisq-network/bisq/pull/4743)
- [Add new payment method: TransferWise](https://github.com/bisq-network/bisq/pull/4726)
- [Add new payment method: Amazon Gift Cards](https://github.com/bisq-network/bisq/pull/4788)
- [Fix bug with reading historical data](https://github.com/bisq-network/bisq/pull/4745)

### Wallet
- Add SegWit fee estimation: [1](https://github.com/bisq-network/bisq/pull/4710), [2](https://github.com/bisq-network/bisq/pull/4754)
- [Speed up restore from seed](https://github.com/bisq-network/bisq/pull/4840)
- [Allow user-defined block explorers](https://github.com/bisq-network/bisq/pull/4733)
- [Show current tx fee rate on main screen](https://github.com/bisq-network/bisq/pull/4676)

### Privacy
- [Update netlayer references to Bisq repository](https://github.com/bisq-network/bisq/pull/4694)

### Network
- [Remove HitBTC as a pricenode data provider](https://github.com/bisq-network/bisq/pull/4756)
- [Add new burningman address for delayed payout txs](https://github.com/bisq-network/bisq/pull/4768)
- [Reduce seednode default max connections to 20](https://github.com/bisq-network/bisq/pull/4751)
- [Show past deviation in monitor](https://github.com/bisq-network/bisq/pull/4734)
- [Clean up mailbox messages for closed trades](https://github.com/bisq-network/bisq/pull/4746)
- [Admin filter for auto-confirmation service addresses](https://github.com/bisq-network/bisq/pull/4736)

### API
- [Implement 'canceloffer' api method](https://github.com/bisq-network/bisq/pull/4714)
- [Implement api methods 'keepfunds', 'withdrawfunds'](https://github.com/bisq-network/bisq/pull/4711)
- [Implement 'gettrade' api method](https://github.com/bisq-network/bisq/pull/4704)
- [Implement 'takeoffer' api method](https://github.com/bisq-network/bisq/pull/4673)
- [Implement 'confirmpaymentsent' api method](https://github.com/bisq-network/bisq/pull/4674)
- [Implement 'confirmpaymentreceived' api method](https://github.com/bisq-network/bisq/pull/4675)
- [Optionally print the json contract for a given trade id](https://github.com/bisq-network/bisq/pull/4705)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.5.0.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.5.0.jar`
The output need to match the value from the Bisq-1.5.0.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.5.0.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.5.0 or later. You can verify the binary the same way as you do with the Bisq application.

## Credits

Thanks to everyone who directly contributed to this release:

- Bayernatoor
- cd2357
- chimp1984
- Christoph Atteneder
- deusmax
- Florian Reimair
- Stan
- James Cox
- Luis Aranguren
- mrosseel
- Oscar Guindzberg
- sqrrm
- wiz

A special thanks to our first time contributors:

- Luis Aranguren
- deusmax

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).
</summary>
    <title>bisq-network/bisq: v1.5.0</title>
    <updated>2020-11-24T13:55:09Z</updated>
    <dc:date>2020-11-24T13:55:09Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ElementsProject/lightning/releases/tag/v0.9.2</id>
    <link href="https://github.com/ElementsProject/lightning/releases/tag/v0.9.2"/>
    <summary>We're pleased to announce the 0.9.2 release of c-lightning, named by Sergi Delgado.

This is a significant release with new CLI-level notifications, better channel state reporting, and stable plugin-hook call ordering.

Note that as of this release c-lightning-generated **PSBTs** are only considered valid by bitcoind **v0.20.1** and above.

**Did you know**: c-lightning deprecates features with 6 months warning, and you can set `allow-deprecated-apis=false` to test?

## Highlights for Users

 * We now keep track of channel closure rationales. Wonder &quot;why did my channel close&quot; no more. All channel state changes are now listed in `listpeers`'s `state_changes`.
 * *NEW* CLI/RPC notifications! Tired of waiting for `close` to finish without getting any updates? With notifications, the `close` command will publish notifications (think CLI status updates) for slow closes. Must have `allow-deprecated-apis` set to false for these to work.
 * New optional argument `commitment_feerate` on the `multifundchannel` command. This is useful for setting one feerate for the funding transaction and another for the channel commitment transactions.
 * Two new commands added to `hsmtool`!
    * `generatehsm` allows you to create an HSM `hsm_secret` from a BIP39 pass phrase. (Note that due to c-lightning's current seed derivation process, wallet addresses aren't standard 'BIP39 to BIP32' compliant. Which is a fancy way of saying your pass phrase isn't portable to other, non-clightning wallets.)
    * `dumponchaindescriptors` will output the xpub for the HD wallet master key. This will let you track _swept_ c-lightning wallet funds -- anchor outputs and unswept channel outputs won't be visible until swept.
 * The starting feerate for mutual closes has been reduced to 'slow', to avoid overpayment.
 * In-memory log buffer now is 10MB, down from 100MB.


## Highlights for the Network

 * We no longer support receiving full gossip from ancient LND nodes
 * Fixed re-transmission order of multiple new HTLCS. This was causing channel closures with LND.


## Highlights for Developers

 * Plugin hook call ordering. Hooks can now specify that they must be called 'before' or 'after' other plugins.
 * pyln-client will handle and send RPC command notifications.
 * pyln-proto now includes a pure python implementation of the sphinx onion creation and processing.
 * PostgresSQL key-value DSNs now supported.
 * Plugin hook `htlc_accepted` can now return a custom `failure_onion`.


More details can be found at https://github.com/ElementsProject/lightning/blob/v0.9.2/CHANGELOG.md

Thanks to everyone for their contributions and bug reports; please keep them coming.

Since 0.9.1, we've had 321 commits from 15 different authors over ~58 days, an average commit rate of 5.5344 commits per day.

A special thanks goes to the 4 first time contributors:

 * YOSHIDA Masanori @siburu
 * @grubles
 * Jordi Montes @positiveblue
 * @lakshit24

Cheers,
Lisa, Christian, Rusty, ZmnSCPxj
</summary>
    <title>ElementsProject/lightning: v0.9.2</title>
    <updated>2020-11-23T17:46:44Z</updated>
    <dc:date>2020-11-23T17:46:44Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.1</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.1"/>
    <summary>#  v0.10.1 (Hotfix to support Ledger's new firmware)

# Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.1/Specter-Setup-v0.10.1.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.1/SpecterDesktop-v0.10.1.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.1/specter_desktop-v0.10.1-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.1/specterd-v0.10.1-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.1/specterd-v0.10.1-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.1/specterd-v0.10.1-x86_64-linux-gnu.zip)

# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.1/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @stepansnigirev's GPG key.
You can get public key from here: [https://stepansnigirev.com/ss-specter-release.asc](https://stepansnigirev.com/ss-specter-release.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x36ED357AB24B915F) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/6F16E354F83393D6E52EC25F36ED357AB24B915F).
Fingerprint of the key is `6F16 E354 F833 93D6 E52E  C25F 36ED 357A B24B 915F`, short id: `36ed357ab24b915f`

# Release notes
- Bugfix: Fix integration with Ledger running the latest Bitcoin app (1.5.1) (#682) (@ben-kaufman)</summary>
    <title>cryptoadvance/specter-desktop: v0.10.1</title>
    <updated>2020-11-23T07:31:15Z</updated>
    <dc:date>2020-11-23T07:31:15Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.1-pre1</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.1-pre1"/>
    <summary>THIS IS A PRERELEASE

Don't use it if you don't know what you're doing.
</summary>
    <title>cryptoadvance/specter-desktop: v0.10.1-pre1</title>
    <updated>2020-11-22T13:59:09Z</updated>
    <dc:date>2020-11-22T13:59:09Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bwt-dev/bwt/releases/tag/v0.2.0-rc.1</id>
    <link href="https://github.com/bwt-dev/bwt/releases/tag/v0.2.0-rc.1"/>
    <summary></summary>
    <title>bwt-dev/bwt: v0.2.0-rc.1</title>
    <updated>2020-11-21T14:51:18Z</updated>
    <dc:date>2020-11-21T14:51:18Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.0</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.0"/>
    <summary># Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.0/Specter-Setup-v0.10.0.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.0/SpecterDesktop-v0.10.0.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.0/specter_desktop-v0.10.0-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.0/specterd-v0.10.0-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.0/specterd-v0.10.0-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.0/specterd-v0.10.0-x86_64-linux-gnu.zip)

# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.10.0/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @stepansnigirev's GPG key.
You can get public key from here: [https://stepansnigirev.com/ss-specter-release.asc](https://stepansnigirev.com/ss-specter-release.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x36ED357AB24B915F) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/6F16E354F83393D6E52EC25F36ED357AB24B915F).
Fingerprint of the key is `6F16 E354 F833 93D6 E52E  C25F 36ED 357A B24B 915F`, short id: `36ed357ab24b915f`

# Release notes
- HWI: Fix integration with Ledger running the latest Bitcoin app (1.5.1) (#650) (@ben-kaufman)
- HWI: Fix BitBox02 integration (#652) (@ben-kaufman)
- Bugfix: Fix spelling mistake (#589) (@danielnordh)
- Bugfix: Fix infinite pacman on backup (#576) (@stepansnigirev)
- Bugfix: Specifying python version better (#574) (@k9ert)
- Bugfix: Fix issue with error popup on Electron app (#609) (@ben-kaufman)
- Bugfix: Fix failing to write backup causing wallet to disappear (#612) (@ben-kaufman)
- Bugfix: Fix isascii for Python3.6 (#623) (@stepansnigirev)
- Bugfix: Fix raw transaction processing (#626) (@stepansnigirev)
- Bugfix: Add context menu to Electron app (#637) (@ben-kaufman)
- Bugfix: Remove &quot;ban&quot; over BIP44 xpubs and set default network to mainnet if Bitcoin Core not detected (#643) (@stepansnigirev)
- Bugfix: Fix paste psbt/ xpub prompts for desktop app + fix typo causing adding multisig issue (#649) (@ben-kaufman)
- Bugfix: Fix signing issue with coldcard and cobo when cosigners' derivation path is not specified properly (#653) (@stepansnigirev)
- Feature: Support Specter file format in import wallet screen (#580) (@ben-kaufman)
- Feature: Use sat/vbytes as fee unit everywhere (#582) (@ben-kaufman)
- Feature: Bundle Tor with macOS and Windows desktop apps (#610) (@ben-kaufman)
- Feature: Add connect to node with QR code option (#611) (@ben-kaufman)
- Feature: Wallet PDF backup (#614, #644) (@ben-kaufman)
- Feature: Show Bitcoin price with amounts (#622) (@ben-kaufman)
- Feature: Support using Specter as an offline signing device and coordinator (#625) (@ben-kaufman)
- Feature: Transactions and addresses caching in CSV file (#625, #639) (@ben-kaufman)
- UI: Add icons for all devices types (#592) (@stepansnigirev)
- UI: New device wizard and various UI improvements (#598, #636, #641) (@ben-kaufman)
- UI: Export wallet from new wallet wizard (#624) (@ben-kaufman)
- UI: Addresses history list pagination and indicate for each address if it is already used or not (#635) (@ben-kaufman)
- UI: Reorganize wallet settings page into tabs (#638) (@ben-kaufman)
- Feature: RBF support (#587) (@ben-kaufman)
- Refactoring: Swap to embit for xpub and address derivation (#588) (@stepansnigirev)
- Refactoring: Improve logs, refactoring and improve checker tests (#595) (@k9ert)
- Devops: Add release script (#594) (@k9ert)
- Devops: Add pre-commit configuration (#596) (@k9ert)
- Docs: Update Tor documentation (#613, #633) (@stepansnigirev)
- Docs: Add daemon documentation (#621) (@stepansnigirev)
- Test: Fix checker test (#616) (@stepansnigirev)</summary>
    <title>cryptoadvance/specter-desktop: v0.10.0</title>
    <updated>2020-11-21T12:21:35Z</updated>
    <dc:date>2020-11-21T12:21:35Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.0-pre5</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.0-pre5"/>
    <summary>THIS IS A PRERELEASE

Don't use it if you don't know what you're doing!</summary>
    <title>cryptoadvance/specter-desktop: v0.10.0-pre5</title>
    <updated>2020-11-21T10:00:19Z</updated>
    <dc:date>2020-11-21T10:00:19Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.0-pre4</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.0-pre4"/>
    <summary>THIS IS A PRERELEASE

Don't use it if you don't know what you're doing!</summary>
    <title>cryptoadvance/specter-desktop: v0.10.0-pre4</title>
    <updated>2020-11-21T08:48:05Z</updated>
    <dc:date>2020-11-21T08:48:05Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.0-pre3</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.0-pre3"/>
    <summary>THIS IS A PRERELEASE

Don't use it if you don't know what you're doing!</summary>
    <title>cryptoadvance/specter-desktop: v0.10.0-pre3</title>
    <updated>2020-11-20T16:31:05Z</updated>
    <dc:date>2020-11-20T16:31:05Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v5.6.6</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v5.6.6"/>
    <summary>v5.6.6
======

* FIX: camera is not closing after QR with PSBT (UR) scanned from hw wallet
* FIX: Input amount can now start with dot for fractional values
* ADD: ARS fiat currency
* FIX: locales nl_NL, sl_SI, es_ES
* FIX: Dim nonselected wallets on additional screens
* FIX: Use numberformatter for properly displaying the wallet balance on widget
* REF: new wallets now generate 12 words mnemonic seed instead of 24, same security, but easier to manage


v5.6.5
======

* ADD: Price Current/Previous Widget
* ADD: Allow image for importing wallet
* FIX: wallets are not refreshing when app boots
* FIX: wallets are not refreshing when they are navigated to
* FIX: Some colors were not using usetheme
* FIX: Track time first seen of unconfirmed transactions
* FIX: missing transactions after restart for single-address wallets
* FIX: locales nl_NL, ru
* FIX: Widget Fiat calculation
* FIX: 'RnSksIsAppInstalled' was being read from the wrong suite

v5.6.3
======

* ADD: Market Widget for iOS 14
* ADD: Large iOS widget
* ADD: Turkish Lira
* FIX: Refill not working on Lightning
* FIX: iOS - lightning:lnurl... links
* FIX: hodlhodl - my contracts - sorted by creation time
* FIX: scanQR now has progress bar when scanning animated QRs
* FIX: Backup screen visibility
* REF: brush up locales sl_SI, cs_CZ
* REF: Wallet types style
</summary>
    <title>BlueWallet/BlueWallet: v5.6.6</title>
    <updated>2020-11-20T16:15:52Z</updated>
    <dc:date>2020-11-20T16:15:52Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.0-pre2</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.0-pre2"/>
    <summary>THIS IS A PRERELEASE

Don't use it if you don't know what you're doing!</summary>
    <title>cryptoadvance/specter-desktop: v0.10.0-pre2</title>
    <updated>2020-11-20T13:27:41Z</updated>
    <dc:date>2020-11-20T13:27:41Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.0-pre1</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.10.0-pre1"/>
    <summary>

THIS IS A PRERELEASE

Don't use it if you don't know what you're doing!</summary>
    <title>cryptoadvance/specter-desktop: v0.10.0-pre1</title>
    <updated>2020-11-19T21:46:43Z</updated>
    <dc:date>2020-11-19T21:46:43Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/phoenix/releases/tag/v1.4.2</id>
    <link href="https://github.com/ACINQ/phoenix/releases/tag/v1.4.2"/>
    <summary>## Main changes

#### Fixed some &quot;route not found&quot; errors

There was an issue where channels with less than 15 000 satoshis were ignored by the path-finding algorithm, which could prevent payments from going through and incorrectly trigger a &quot;Route not found&quot; error.

## Complete list of changes

- **app**: https://github.com/ACINQ/phoenix/compare/v1.4.1...v1.4.2
- **core**: https://github.com/ACINQ/eclair/compare/v0.4.4-android-phoenix...v0.4.5-android-phoenix

Thanks @bitcoinuser for updating PT-BR translation.

## Verifying signatures

You will need `gpg` and our release signing key E434ED292E85643A. Note that you can get it:
- from our website: https://acinq.co/pgp/padioupm.asc
- from github user @pm47, a committer on eclair: https://api.github.com/users/pm47/gpg_keys

To import our signing key:
```
$ gpg --import padioupm.asc
```

To verify the release file checksums and signatures:
```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```</summary>
    <title>ACINQ/phoenix: v1.4.2</title>
    <updated>2020-11-17T14:37:10Z</updated>
    <dc:date>2020-11-17T14:37:10Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/phoenix/releases/tag/v1.4.1</id>
    <link href="https://github.com/ACINQ/phoenix/releases/tag/v1.4.1"/>
    <summary>## Main changes

#### Customizable max fees for outgoing Lightning payments

Users can now change the maximum fees that the trampoline node can use for outgoing LN payments. In some cases, the [default setting](https://phoenix.acinq.co/faq#what-are-the-fees) may not be sufficient so the user can try higher fees. Note that the trampoline node will always try to use as low fee as possible. Also, setting a super high fee will not help if the recipient is simply not reachable (no channels/no connection) or does not have enough inbound liquidity.

This setting is available in Setting &gt; Payment settings

#### Better error messages for failed payments

Some error messages are rewritten to be more explicit and provide guidance to users.

#### Small channels are more resilient to high fee environment

Channels inbound capacity is also displayed in the wallet's channels list.

## Complete list of changes

- **app**: https://github.com/ACINQ/phoenix/compare/v1.4.0...v1.4.1
- **core**: https://github.com/ACINQ/eclair/compare/v0.4.2-android-phoenix...v0.4.4-android-phoenix

Thanks @bitcoinuser for updating PT-BR translation.

## Verifying signatures

You will need `gpg` and our release signing key E434ED292E85643A. Note that you can get it:
- from our website: https://acinq.co/pgp/padioupm.asc
- from github user @pm47, a committer on eclair: https://api.github.com/users/pm47/gpg_keys

To import our signing key:
```
$ gpg --import padioupm.asc
```

To verify the release file checksums and signatures:
```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```</summary>
    <title>ACINQ/phoenix: v1.4.1</title>
    <updated>2020-11-13T10:45:16Z</updated>
    <dc:date>2020-11-13T10:45:16Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.2.14</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.2.14"/>
    <summary>This Umbrel release brings LND v0.11.1, native segwit addresses for on-chain deposits and some tiny but mighty changes that will silently prepare your Umbrel for some big upcoming updates.

Changes:

- Make sure containers don't autostart on boot (#288) 238b0d6
- Proxy dev HMR websockets through NGINX (#290) 2a3e2eb
- Add docker-compose.override.ym to .gitignore (#289) ea3249e
- Mention permissions in SECURITY.md (#296) 84bd730
- Get device IP more reliably (#297) ebc95bd (Thanks, @nioncode!)
- Autodetect docker binrary path (#297) 3504d4b (Thanks, @nioncode!)
- Prevent unbound variable error (#297) 046a067 (Thanks, @nioncode!)
- Remove redundant docker pull (#297) 0dab55d (Thanks, @nioncode!)
- Move zmq params to bitcoin.conf 2be6232
- Add txindex=1 to bitcoin.conf (#305) b42caaf
- Add blockfilterindex=1 to bitcoin.conf (#306) 96ef3b3
- Update to getumbrel/dashboard:v0.3.12 (#307) e2b762e
- Bump lnd to v0.11.1 (#278) 56614f3
- Update to getumbrel/dashboard to v0.3.13 (#310) 6da4d27
- Update to getumbrel/middleware to v0.1.7 (#311) 4ec925e

Diff: https://github.com/getumbrel/umbrel/compare/v0.2.13...v0.2.14</summary>
    <title>getumbrel/umbrel: v0.2.14</title>
    <updated>2020-11-12T12:02:23Z</updated>
    <dc:date>2020-11-12T12:02:23Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.9.2</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.9.2"/>
    <summary># v0.9.2 (Hotfix for v0.9.1 Linux binaries)

# Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.2/Specter-Setup-v0.9.2.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.2/SpecterDesktop-v0.9.2.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.2/specter_desktop-v0.9.2-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.2/specterd-v0.9.2-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.2/specterd-v0.9.2-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.2/specterd-v0.9.2-x86_64-linux-gnu.zip)

# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.2/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @stepansnigirev's GPG key.
You can get public key from here: [https://stepansnigirev.com/ss-specter-release.asc](https://stepansnigirev.com/ss-specter-release.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x36ED357AB24B915F) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/6F16E354F83393D6E52EC25F36ED357AB24B915F).
Fingerprint of the key is `6F16 E354 F833 93D6 E52E  C25F 36ED 357A B24B 915F`, short id: `36ed357ab24b915f`

# Release notes
Bugfix: Fix Linux binary executable.</summary>
    <title>cryptoadvance/specter-desktop: v0.9.2</title>
    <updated>2020-11-02T19:43:38Z</updated>
    <dc:date>2020-11-02T19:43:38Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.9.1</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.9.1"/>
    <summary># Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.1/Specter-Setup-v0.9.1.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.1/SpecterDesktop-v0.9.1.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.1/specter_desktop-v0.9.1-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.1/specterd-v0.9.1-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.1/specterd-v0.9.1-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.1/specterd-v0.9.1-x86_64-linux-gnu.zip)

# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.9.1/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @stepansnigirev's GPG key.
You can get public key from here: [https://stepansnigirev.com/ss-specter-release.asc](https://stepansnigirev.com/ss-specter-release.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x36ED357AB24B915F) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/6F16E354F83393D6E52EC25F36ED357AB24B915F).
Fingerprint of the key is `6F16 E354 F833 93D6 E52E  C25F 36ED 357A B24B 915F`, short id: `36ed357ab24b915f`

# Release notes
 - Bugfix: Fix hash verification #554 (@ben-kaufman)
- Bugfix: Fix CI related fixes #551 #552 #553 (@ben-kaufman)
- Bugfix: fixes #486 support binary psbt #535 (Stepan Snigirev)
- Bugfix: fix label size #532 (Stepan Snigirev)
- Bugfix: Minor spelling fix #531 (Daniel Mross)
- Bugfix: update coldcard instructions to generic json #527 (Stepan Snigirev)
- Bugfix: Feedback again for non working Core-connections #491 (Kim Neunert)
- Bugfix: fix for proper namespace package cryptoadvance #524 (Kim Neunert)
- Bugfix: Enable macOS dock icon #520 (Chris Beams)
- Bugfix: Scanning of upper-case btc-addresses (Samourai) fixes 479 #510 (Kim Neunert)
- Bugfix: rework discovery of pip installed version #502 (Andreas Zuber)
- Bugfix: fix broken windows build #508 (Kim Neunert)
- Bugfix: Fix amount validation #516 (@ben-kaufman)
- Bugfix: Fix display address on Specter HWI and an error when creating wallets #511 (@ben-kaufman)
- Bugfix: Minor spelling change #485 (Michael Flaxman)
- Bugfix: Update HWI to 1.2.0 closes #500 #476 (#506)
- Bugfix: Blackify (#497) (@mflaxman)
- Bugfix: Specify python version &lt;3.9 (#559) (@mflaxman)
- Performance: Add threaded checker for Bitcoin RPC calls (#558) (@stepansnigirev)
- Feature: Allow manual specterd upload for the desktop app (#560) (@ben-kaufman)
- Feature: add tx hash to psbt filename #548 (Michael Flaxman)
- Feature: backup files on write and rollback to prevent corrupt-data #542 (Stepan Snigirev)
- Feature: Use Electron for desktop app #555 #473 (@ben-kaufman)
- Feature: change wallet export to use alias instead of name #543 (Michael Flaxman)
- Feature: add page loader to get visual feedback while loading #541 (Stepan Snigirev)
- Feature: Now devices can get renamed #534 (Stepan Snigirev)
- Feature: friendly camera error message if camera unavailable #533 (Stepan Snigirev)
- Feature: electrum watch-only export #530 (Michael Flaxman)
- Feature: Improves update version checker #525 (Stepan Snigirev)
- Feature: ask for encryption password at hot wallet only if it's enabled #526 (Stepan Snigirev)
- Feature: BIP39 passphrases, custom derivations and more for hot wallets #514 (@ben-kaufman)
- Feature: Packaging pip-releases as tarballs and sha256-hashes them #523 (Kim Neunert)
- Feature: add support for non-hardened derivation for hot storage #521 (Stepan Snigirev)
- Feature: Support for url context paths #504 (kexkey)
- Feature: add pip-compile and hash support for security/reproducibility #496 (Michael Flaxman)
- Feature add pip-compile and hash support for security/reproducibility (#496) (@mflaxman)
- Feature: All code now blackified (#497) (@mflaxman)
- Refactoring: Remove RPC calls from the UI #557 (@ben-kaufman)
- Refactoring: Refactor preparation for observers #544 (Stepan Snigirev)
- Refactoring: Code Compliance via Black #497 #529 (Michael Flaxman)
- Refactoring: persistence.py #255 #403 (Kim Neunert)
- Refactoring: Update HWI to 1.2.0 #506 (@ben-kaufman)
- Docs: Hardwarewallet Troubleshooting #522 (Kim Neunert)
- Docs: Update hwibridge.md #505 (Kim Neunert)
- Docs: Update FAQ on Coin Control (@moritzwietersheim) (#563)</summary>
    <title>cryptoadvance/specter-desktop: v0.9.1</title>
    <updated>2020-11-02T15:29:55Z</updated>
    <dc:date>2020-11-02T15:29:55Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v5.6.2</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v5.6.2"/>
    <summary>ADD: Import LNDHub from QR
ADD: Electrum server import from QR
ADD: Privacy Settings Screen
ADD: Clipboard read opt-out
ADD: Support lnurl fallback scheme
ADD: Philippines Peso currency
FIX: Copy balance on wallet/transactions screen crash
FIX: Remove padding to prevent text concealment
REF: Show numeric keyboard when ask for numbers in prompt
FIX: Locales de_DE, sl_SI, ru, fi_FI, ja_JP, es, pt_BR
REF: Improve wallet import speed</summary>
    <title>BlueWallet/BlueWallet: v5.6.2</title>
    <updated>2020-10-30T11:40:47Z</updated>
    <dc:date>2020-10-30T11:40:47Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.5.9</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.5.9"/>
    <summary>### Bug fixes:

* If there was too many pending invoice, postgres would be overwhelmed and freeze some requests (Igor Rylko)
* Emails were not included in the text search anymore @Kukks
* Payjoin: Do not include maxadditionalfeecontribution if there is no change. @NicolasDorier</summary>
    <title>btcpayserver/btcpayserver: v1.0.5.9</title>
    <updated>2020-10-28T10:28:35Z</updated>
    <dc:date>2020-10-28T10:28:35Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.2</id>
    <link href="https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.2"/>
    <summary># Summary

This hotfix contains fixes and some minor improvements.

- **ColdCard signing fix with multi-signature address**
- **Transaction labels are shown on History Tab**
- **Local blocks storage optimization - Wasabi will use less space on disk**

# Newbie Guide

While setting up Wasabi is straightforward, even a Linux wizard with the longest beard can get stuck on the most basic tasks. Consider taking a look at the [Installation Instructions](https://docs.wasabiwallet.io/using-wasabi/InstallPackage.html) guide.

# Advanced Guide

If you want to build Wasabi from source code or update the source code check out [these instructions.](https://docs.wasabiwallet.io/using-wasabi/BuildSource.html)

From version 1.1.3 Wasabi also introduces [reproducible builds](https://reproducible-builds.org/): [Deterministic Build Guide](https://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi.Documentation/Guides/DeterministicBuildGuide.md)

Build with .NET Core 3.1.403-win-x64.

## FAQ

- **Frequently asked questions [here](https://docs.wasabiwallet.io/FAQ/).**
- **Requirements?** x64, Linux, &gt;Win10, &gt;macOS 10.13.

# Release Notes

- **UI changes** https://github.com/zkSNACKs/WalletWasabi/pull/4616 https://github.com/zkSNACKs/WalletWasabi/pull/4425
- **NBitcoin upgrade** https://github.com/zkSNACKs/WalletWasabi/pull/4614
- **Block storage improvement** https://github.com/zkSNACKs/WalletWasabi/pull/4370 https://github.com/zkSNACKs/WalletWasabi/pull/3809 https://github.com/zkSNACKs/WalletWasabi/pull/3800</summary>
    <title>zkSNACKs/WalletWasabi: v1.1.12.2</title>
    <updated>2020-10-27T11:00:23Z</updated>
    <dc:date>2020-10-27T11:00:23Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.8.2-pre3</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.8.2-pre3"/>
    <summary>Test new CI, DON'T USE YET!</summary>
    <title>cryptoadvance/specter-desktop: v0.8.2-pre3</title>
    <updated>2020-10-27T09:02:01Z</updated>
    <dc:date>2020-10-27T09:02:01Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.8.2-pre2</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.8.2-pre2"/>
    <summary>Test new CI, DON'T USE YET!</summary>
    <title>cryptoadvance/specter-desktop: v0.8.2-pre2</title>
    <updated>2020-10-27T05:13:36Z</updated>
    <dc:date>2020-10-27T05:13:36Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.1</id>
    <link href="https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.1"/>
    <summary># Summary

This hotfix contains fixes for issues those only encountered by a minority of users however this is critical for them, which are the followings: 

- **PayJoin compatibility with JoinMarket** 
- **ColdCard signing fix with multi-signature address**

# Newbie Guide

While setting up Wasabi is straightforward, even a Linux wizard with the longest beard can get stuck on the most basic tasks. Consider taking a look at the [Installation Instructions](https://docs.wasabiwallet.io/using-wasabi/InstallPackage.html) guide.

# Advanced Guide

If you want to build Wasabi from source code or update the source code check out [these instructions.](https://docs.wasabiwallet.io/using-wasabi/BuildSource.html)

From version 1.1.3 Wasabi also introduces [reproducible builds](https://reproducible-builds.org/): [Deterministic Build Guide](https://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi.Documentation/Guides/DeterministicBuildGuide.md)

Build with .NET Core 3.1.403-win-x64.

## FAQ

- **Frequently asked questions [here](https://docs.wasabiwallet.io/FAQ/).**
- **Requirements?** x64, Linux, &gt;Win10, &gt;macOS 10.13.

# Release Notes

- **UI improvements** https://github.com/zkSNACKs/WalletWasabi/pull/4272 https://github.com/zkSNACKs/WalletWasabi/pull/4186 https://github.com/zkSNACKs/WalletWasabi/pull/4323 https://github.com/zkSNACKs/WalletWasabi/pull/4334 https://github.com/zkSNACKs/WalletWasabi/pull/4283 https://github.com/zkSNACKs/WalletWasabi/pull/4163 https://github.com/zkSNACKs/WalletWasabi/pull/4285 https://github.com/zkSNACKs/WalletWasabi/pull/4316 https://github.com/zkSNACKs/WalletWasabi/pull/4286 https://github.com/zkSNACKs/WalletWasabi/pull/4404
- **PayJoin** https://github.com/zkSNACKs/WalletWasabi/pull/4427 
- **Business logic improvements** https://github.com/zkSNACKs/WalletWasabi/pull/4525 https://github.com/zkSNACKs/WalletWasabi/pull/4601 https://github.com/zkSNACKs/WalletWasabi/pull/4428</summary>
    <title>zkSNACKs/WalletWasabi: v1.1.12.1</title>
    <updated>2020-10-22T14:09:47Z</updated>
    <dc:date>2020-10-22T14:09:47Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.4.2</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.4.2"/>
    <summary>**A newer version is available! Please don’t use this version anymore.**

## Release notes
This release is packed with new features and improvements:
- Use SegWit addresses to fund and withdraw from your Bisq wallet
&gt; **_NOTE:_** Although it's now finally possible to transfer out of Bisq to Bech32 wallets, do not expect any fee savings just yet, because all Bisq trading transactions still happen against P2PKH addresses. This change will be shipped in one of the next releases.
- Startup time reduced further, especially on slow connections
- Improvements in the trade protocol to make trading more reliable
- Bug fixes, bug fixes, bug fixes...

### UI
- Improve wording: [1](https://github.com/bisq-network/bisq/pull/4603), [2](https://github.com/bisq-network/bisq/pull/4515)
- [Show info popup if Bisq started under Qubes OS](https://github.com/bisq-network/bisq/pull/4520)
- [Remove short cut info for removed key handlers](https://github.com/bisq-network/bisq/pull/4472)

### Trading
- Show if seller has XMR autoconfirmation enabled: [1](https://github.com/bisq-network/bisq/pull/4578), [2](https://github.com/bisq-network/bisq/pull/4625)
- [XMR autoconfirmation should get amount from trade not offer](https://github.com/bisq-network/bisq/pull/4560)
- [Reactivate confirm button again in specific cases](https://github.com/bisq-network/bisq/pull/4602)
- [Display the calculated security deposit at each order entry](https://github.com/bisq-network/bisq/pull/4555)

### Wallet
- [Fund/Withdraw BTC from/to SegWit addresses](https://github.com/bisq-network/bisq/pull/4509)
- [Set memo to transaction after transaction creation and not on broadcast success](https://github.com/bisq-network/bisq/pull/4619)
- [Fix bug with wallet seed restore and open offers](https://github.com/bisq-network/bisq/pull/4507)

### Reliability
- [New trade statistics](https://github.com/bisq-network/bisq/pull/4611)
- [Remove address prefix for mailbox messages](https://github.com/bisq-network/bisq/pull/4610)
- Trade protocol improvements: [1](https://github.com/bisq-network/bisq/pull/4566), [2](https://github.com/bisq-network/bisq/pull/4533)
- [Upgrade to bitcoinj 0.15.8](https://github.com/bisq-network/bisq/pull/4504)
- [Fix bug with missing remove of old filter when new filter is added](https://github.com/bisq-network/bisq/pull/4576)

### Privacy
- [Use binaries from tor browser v10.0](https://github.com/bisq-network/bisq/pull/4604)

### Mediation/Arbitration
- [Add signature to dispute result and various other improvements](https://github.com/bisq-network/bisq/pull/4543)

### Network
- [Adding two torv3 seednodes, removing torv2 nodes](https://github.com/bisq-network/bisq/pull/4645)
- [Replace emzy's v2 seednodes with new v3 seednodes](https://github.com/bisq-network/bisq/pull/4644)

### API
- [Add core support for registration of regtest dispute agents via API](https://github.com/bisq-network/bisq/pull/4524)

### Development
- [Do not log full filter object in case of an invalid Filter](https://github.com/bisq-network/bisq/pull/4607)
- [Setting jvm option `-Djdk.module.illegalAccess=deny`](https://github.com/bisq-network/bisq/pull/4600)
- [Add flags to header to signal which dev setup is used](https://github.com/bisq-network/bisq/pull/4471)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.4.2.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.4.2.jar`
The output need to match the value from the Bisq-1.4.2.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.4.2.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.4.2 or later. You can verify the binary the same way as you do with the Bisq application.</summary>
    <title>bisq-network/bisq: v1.4.2</title>
    <updated>2020-10-21T12:39:35Z</updated>
    <dc:date>2020-10-21T12:39:35Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/rootzoll/raspiblitz/releases/tag/v1.6.1</id>
    <link href="https://github.com/rootzoll/raspiblitz/releases/tag/v1.6.1"/>
    <summary>Includes the LND security fix.
Update is strongly advised!
MENU &gt; UPDATE &gt; RELEASE
and follow instructions.

Now also including: Mempool Explorer, PyBlock, ..</summary>
    <title>rootzoll/raspiblitz: v1.6.1</title>
    <updated>2020-10-21T08:02:48Z</updated>
    <dc:date>2020-10-21T08:02:48Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/phoenix/releases/tag/v1.4.0</id>
    <link href="https://github.com/ACINQ/phoenix/releases/tag/v1.4.0"/>
    <summary>## Main changes

#### Background payment reception

The app can now wake up to process an incoming payment or a fulfilled HTLC. Users do not have to start their app manually to receive a payment, thus removing the synchronization requirement between sender and receiver. This feature uses Firebase Cloud Messaging. Messages relayed by FCM do not contain any details about payments.

When the wake up message arrives, a sticky notification is displayed. The peer will pause the payment and wait ~20/30 seconds for the app to accept the payment, or fail the payment downstream. If the payment succeeds, the notification will show the amount received.

#### Access control changes 

The seed is now encrypted using a new improved format leveraging the Android Keystore to protect the seed and allowing the node to run background tasks. The device's TEE/SE will be used when possible. The legacy PIN used on existing wallets is deprecated and migrated to the new format after updating the app. Wallet is locked with the system screen lock (schema/PIN/fingerprint...).

An additional security setting is available, requiring users to authenticate with fingerprint each time the seed is decrypted. This setting may improve security on rooted device (*) but obviously disables background processing features.

(*) We don't recommend using Bitcoin wallets (except on Testnet) on a rooted phone.

#### Automatic channel creation

Channels are now created automatically. A setting lets users revert to the existing behaviour and manually confirm channel creation on a case-by-case basis. An Android notification is displayed if needed to let users react in time.

#### Custom default description

Default payment description is now empty, and can be changed by users.

#### Intro screens

A short intro has been added for new installs, with 3 screens containing information about the automatic channel creation mechanism (including price) and the seed.

#### Payment metadata

Payments for swap-in/swap-out, or payments that open/close channels will now contain a bit more information, like the on-chain address, or the fee cost for opening a channel.

#### Mempool.space on-chain explorer

Users can now use either Blockstream.info or Mempool.space (now the default explorer).

#### Faster start

Wallet will use its last known feerates when bootstrapping.

## Complete list of changes

- **app**: https://github.com/ACINQ/phoenix/compare/v1.3.3...v1.4.0
- **core**: https://github.com/ACINQ/eclair/compare/v0.3.10-android-phoenix...v0.4.2-android-phoenix

Thanks @ibertario @mautematico @bitcoinuser @fiatjaf for their contributions.

## Verifying signatures

You will need `gpg` and our release signing key E434ED292E85643A. Note that you can get it:
- from our website: https://acinq.co/pgp/padioupm.asc
- from github user @pm47, a committer on eclair: https://api.github.com/users/pm47/gpg_keys

To import our signing key:
```
$ gpg --import padioupm.asc
```

To verify the release file checksums and signatures:
```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```</summary>
    <title>ACINQ/phoenix: v1.4.0</title>
    <updated>2020-10-20T15:05:31Z</updated>
    <dc:date>2020-10-20T15:05:31Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/eclair/releases/tag/v0.4.2</id>
    <link href="https://github.com/ACINQ/eclair/releases/tag/v0.4.2"/>
    <summary>This release includes many exciting new features, API changes as well as several bug fixes and improvements.
Its is fully compatible with 0.4.1 (and all previous versions of eclair).

# Major changes

### Plugins

Third-party plugins are now able to add new feature bits to eclair and handle unknown custom messages.
This lets plugin developers offer services to their customers that are not available in the Lightning specification (e.g. swap-in/swap-out), while staying fully compatible with the network.

See #1528 for more details.

### Anchor Outputs

This release adds experimental support for [anchor outputs](https://github.com/lightningnetwork/lightning-rfc/pull/688) channels.
The main benefit of this type of channels is that it is possible to bump the on-chain fees of commitment transactions and htlc transactions once they are in the mempool to speed up their confirmation.

Eclair is fully compatible with the anchor output specification, but automatic fee bumping has not been implemented yet, hence we do not recommend activating the feature.
Some attacks that are specific to anchor outputs have also been discovered recently and haven't been fully addressed yet, but will be fixed in future releases.

### Keysend

This release adds support for spontaneous payments using [keysend](https://github.com/ElementsProject/lightning/pull/3611).
It is fully compatible with lnd and c-lightning and makes it easy for public LN nodes to receive donations.

### API changes

This release contains many new APIs and improvements to existing ones:

- Add `signmessage`/`verifymessage` APIs: this allows signing arbitrary messages with the node's key and is compatible with lnd and c-lightning
- We publish new channel events to the websocket (`channel-opened`, `channel-state-changed` and `channel-closed`)
- The `sendtoroute` API now lets you choose the channels that must be used, making it easy to rebalance your local channels

Head over to our [API documentation](https://acinq.github.io/eclair) for more details.

# Miscellaneous improvements and bug fixes

- Many actors have been refactored to use [Akka Typed](https://doc.akka.io/docs/akka/current/typed/index.html) instead of classic actors.
  This leads to a cleaner design, better types and more help from the compiler to detect unhandled messages.
- We added support for Bitcoin Core 0.20.1.
- We added support for non-default Bitcoin Core wallets (see #1540 for details)
- We fixed the `override-features` configuration parameter, which wasn't overriding features everywhere. This parameter can be very useful for example to sync only from specific nodes, or advertize wumbo support only to nodes that you trust.

# Verifying signatures

You will need `gpg` and our release signing key 7A73FE77DE2C4027. Note that you can get it:

- from our website: https://acinq.co/pgp/drouinf.asc
- from github user @sstone, a committer on eclair: https://api.github.com/users/sstone/gpg_keys

To import our signing key:

```sh
$ gpg --import drouinf.asc
```

To verify the release file checksums and signatures:

```sh
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```

# Building

Eclair builds are deterministic. To reproduce our builds, please use the following environment (*):

- Ubuntu 19.10
- AdoptOpenJDK 11.0.6
- Maven 3.6.3

Use the following command to generate the eclair-node package:

```sh
mvn clean install -DskipTests
```

That should generate `eclair-node/target/eclair-node-0.4.2-XXXXXXX-bin.zip` with sha256 checksums that matches the one we provide and sign in `SHA256SUMS.asc`

(*) You may be able to build the exact same artefacts with other operating systems or versions of JDK 11, we have not tried everything.

# Upgrading

This release is fully compatible with Eclair v0.4.1. You don't need to close your channels, just stop eclair, upgrade and restart.

# Changelog

- ebfca8cef Bitcoin Core Wallet small refactoring (#1482)
- e06325e03 fixup! Split the `Peer` in two (#1347) (#1487)
- 65facab14 Add debug logs to transport handler (#1488)
- ea57bb266 Release 0.4.1 (#1481)
- 92a094c49 Anchor output transaction format (#1484)
- aca7499df Use github action for scoverage (#1490)
- 625e996ae Update MinFinalCltvExpiryDelta default value and activate wumbo (#1483)
- ab4831fe6 Use file filter for scoverage upload (#1492)
- e6909cfcb Implement the KeySend feature, spontaneous payments (#1485)
- a3dd365c6 Revive codecov.yml (#1493)
- bc81cd527 Add delay before setting watches at startup (#1489)
- 8cd264457 Do not merge user provided features with defaults (#1435)
- 3d4e00fe1 Activate anchor output in channels (#1491)
- 6f9edec10 Relax relaying requirement on expiry (#1497)
- 5a5a0b96f Verify feature graph in Init (#1495)
- 01f924ae8 Add API commands to sign &amp; verify arbitrary messages (#1499)
- 1b21e14b9 Fix typo related to pico-bitcoin conversion (#1503)
- daddfc007 Type fee rates info (#1504)
- 3d168a5ba Remove semaphore build (#1517)
- 2c437421d Show reminder of failed tests at the end (#1521)
- 153f82c8c Refactor integration tests (#1494)
- ef1bf0b9a Use the `replyTo` pattern for Register messages (#1514)
- e54066be5 Remove `Status.Failure` in register responses (#1516)
- 14a69b810 Trampoline relay exhausted liquidity (#1523)
- 77e972bcb Improve blockchain watchers (#1500)
- ea7202380 Set the channel version in the init msg for the fundee (#1518)
- e34b74f88 Fix flaky integration test (#1524)
- 6b05099f0 Use the `replyTo` pattern for Channel messages (#1520)
- b954defa2 Update to Bitcoin Core 0.20.1 (#1526)
- d0011005a Migrate relayers to akka typed (#1525)
- 2fc118c29 Do not reply to htlc settlement commands (#1527)
- f26423563 Improve relayer logs (#1529)
- 3158c2668 More leeway in tests (#1530)
- eed82e262 Update to scala 2.13.3 and akka 2.6.9 (#1532)
- 750b372b2 Minor improvements to the watcher (#1531)
- 662e0c4bc Anchor output: handle unilateral close (#1501)
- 6ef72a0bd Set a timefactor for typed actors tests (#1541)
- 3a773c1fd Allow plugins to handle custom messages and features (#1528)
- 483cce4ae Split IntegrationSpec (#1535)
- 42481c66e Add some channel events to websocket (#1536)
- 36c9b9b5a Configure bitcoin wallet (#1540)
- 8a27b4ca8 Fixup funder fee buffer (#1364)
- 0ab7ec63f Add DB entry for payment router error (#1513)
- 127416801 Make all commands extend `Has*ReplyToCommand` (#1543)
- 382868dda [ChannelRelay] Prioritize lowest capacity channels (#1539)
- 56d216b91 Separate configuration for peer-connection (#1548)
- 8885ed7f4 (minor) Improve logs in channel relayer (#1550)
- 428349a34 Send to channel route (#1537)
- 20e0b4bc4 Fix override-features implementation (#1549)
- ed6175043 Nits (#1553)
- b728520ad Prevent disabling `var_onion_optin` (#1552)
- eea1ba99b Add backward-compatibility tests on some database codecs (#1554)
- 50363569c Fix forceclose API (#1555)
- 135ce6cc8 Use maven plugin to include tests (#1557)
- a76db1c27 Fix channel CMD_SIGN (#1556)
- 3da76c08a Allow mandatory static-remotekey (#1558)
- 4b55d3e71 Fix typo in startup script (#1559)
- 3e3397cfb Fix Docker JAVA_OPTS expansion (#1561)
</summary>
    <title>ACINQ/eclair: v0.4.2</title>
    <updated>2020-10-19T13:13:59Z</updated>
    <dc:date>2020-10-19T13:13:59Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.4.1</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.4.1"/>
    <summary>**A newer pre-release version based on v1.4.1 fixing a [wrong trade history entry](https://github.com/bisq-network/bisq/pull/4678) is available! Please don’t use this version anymore.**

## Release notes
This release is packed with new features and improvements:
- Use SegWit addresses to fund and withdraw from your Bisq wallet
&gt; **_NOTE:_** Although it's now finally possible to transfer out of Bisq to Bech32 wallets, do not expect any fee savings just yet, because all Bisq trading transactions still happen against P2PKH addresses. This change will be shipped in one of the next releases.
- Startup time reduced further, especially on slow connections
- Improvements in the trade protocol to make trading more reliable
- Bug fixes, bug fixes, bug fixes...

### UI
- Improve wording: [1](https://github.com/bisq-network/bisq/pull/4603), [2](https://github.com/bisq-network/bisq/pull/4515)
- [Show info popup if Bisq started under Qubes OS](https://github.com/bisq-network/bisq/pull/4520)
- [Remove short cut info for removed key handlers](https://github.com/bisq-network/bisq/pull/4472)

### Trading
- Show if seller has XMR autoconfirmation enabled: [1](https://github.com/bisq-network/bisq/pull/4578), [2](https://github.com/bisq-network/bisq/pull/4625)
- [XMR autoconfirmation should get amount from trade not offer](https://github.com/bisq-network/bisq/pull/4560)
- [Reactivate confirm button again in specific cases](https://github.com/bisq-network/bisq/pull/4602)
- [Display the calculated security deposit at each order entry](https://github.com/bisq-network/bisq/pull/4555)

### Wallet
- [Fund/Withdraw BTC from/to SegWit addresses](https://github.com/bisq-network/bisq/pull/4509)
- [Set memo to transaction after transaction creation and not on broadcast success](https://github.com/bisq-network/bisq/pull/4619)
- [Fix bug with wallet seed restore and open offers](https://github.com/bisq-network/bisq/pull/4507)

### Reliability
- [New trade statistics](https://github.com/bisq-network/bisq/pull/4611)
- [Remove address prefix for mailbox messages](https://github.com/bisq-network/bisq/pull/4610)
- Trade protocol improvements: [1](https://github.com/bisq-network/bisq/pull/4566), [2](https://github.com/bisq-network/bisq/pull/4533)
- [Upgrade to bitcoinj 0.15.8](https://github.com/bisq-network/bisq/pull/4504)
- [Fix bug with missing remove of old filter when new filter is added](https://github.com/bisq-network/bisq/pull/4576)

### Privacy
- [Use binaries from tor browser v10.0](https://github.com/bisq-network/bisq/pull/4604)

### Mediation/Arbitration
- [Add signature to dispute result and various other improvements](https://github.com/bisq-network/bisq/pull/4543)

### Network
- [Adding two torv3 seednodes, removing torv2 nodes](https://github.com/bisq-network/bisq/pull/4645)
- [Replace emzy's v2 seednodes with new v3 seednodes](https://github.com/bisq-network/bisq/pull/4644)

### API
- [Add core support for registration of regtest dispute agents via API](https://github.com/bisq-network/bisq/pull/4524)

### Development
- [Do not log full filter object in case of an invalid Filter](https://github.com/bisq-network/bisq/pull/4607)
- [Setting jvm option `-Djdk.module.illegalAccess=deny`](https://github.com/bisq-network/bisq/pull/4600)
- [Add flags to header to signal which dev setup is used](https://github.com/bisq-network/bisq/pull/4471)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.4.1.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.4.1.jar`
The output need to match the value from the Bisq-1.4.1.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.4.1.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.4.1 or later. You can verify the binary the same way as you do with the Bisq application.</summary>
    <title>bisq-network/bisq: v1.4.1</title>
    <updated>2020-10-19T07:28:14Z</updated>
    <dc:date>2020-10-19T07:28:14Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/mempool/mempool/releases/tag/v1.0.1</id>
    <link href="https://github.com/mempool/mempool/releases/tag/v1.0.1"/>
    <summary>Minor bugfixes:

* Fixed median calculation bug due to float sort.
* Change hard-coded references from blockstream.info to mempool.space</summary>
    <title>mempool/mempool: v1.0.1</title>
    <updated>2020-10-19T04:35:13Z</updated>
    <dc:date>2020-10-19T04:35:13Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.5.8</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.5.8"/>
    <summary>### Bug fixes:

* Fix payjoin client implementation (was sending hex instead of base64) @Kukks
* Fix: The send wallet, by default, should not include the previous transaction (timeouts issue with some hardware wallets) @NicolasDorier
* Do not log the database connection string @Kukks
* If a password fail to be reset by mail, show proper error @NicolasDorier
* When you map a specific domain to an app, when there's no app created there's a blank page @Kukks</summary>
    <title>btcpayserver/btcpayserver: v1.0.5.8</title>
    <updated>2020-10-16T12:09:40Z</updated>
    <dc:date>2020-10-16T12:09:40Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.4.0</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.4.0"/>
    <summary>**A newer pre-release version based on v1.4.0 fixing an issue with the trade statistics([1](https://github.com/bisq-network/bisq/pull/4662), [2](https://github.com/bisq-network/bisq/pull/4659)) is available! Please don’t use this version anymore.**

## Release notes
This release is packed with new features and improvements:
- Use SegWit addresses to fund and withdraw from your Bisq wallet
- Startup time reduced further, especially on slow connections
- Improvements in the trade protocol to make trading more reliable
- Bug fixes, bug fixes, bug fixes...

### UI
- Improve wording: [1](https://github.com/bisq-network/bisq/pull/4603), [2](https://github.com/bisq-network/bisq/pull/4515)
- [Show info popup if Bisq started under Qubes OS](https://github.com/bisq-network/bisq/pull/4520)
- [Remove short cut info for removed key handlers](https://github.com/bisq-network/bisq/pull/4472)

### Trading
- Show if seller has XMR autoconfirmation enabled: [1](https://github.com/bisq-network/bisq/pull/4578), [2](https://github.com/bisq-network/bisq/pull/4625)
- [XMR autoconfirmation should get amount from trade not offer](https://github.com/bisq-network/bisq/pull/4560)
- [Reactivate confirm button again in specific cases](https://github.com/bisq-network/bisq/pull/4602)
- [Display the calculated security deposit at each order entry](https://github.com/bisq-network/bisq/pull/4555)

### Wallet
- [Fund/Withdraw BTC from/to SegWit addresses](https://github.com/bisq-network/bisq/pull/4509)
- [Set memo to transaction after transaction creation and not on broadcast success](https://github.com/bisq-network/bisq/pull/4619)
- [Fix bug with wallet seed restore and open offers](https://github.com/bisq-network/bisq/pull/4507)

### Reliability
- [New trade statistics](https://github.com/bisq-network/bisq/pull/4611)
- [Remove address prefix for mailbox messages](https://github.com/bisq-network/bisq/pull/4610)
- Trade protocol improvements: [1](https://github.com/bisq-network/bisq/pull/4566), [2](https://github.com/bisq-network/bisq/pull/4533)
- [Upgrade to bitcoinj 0.15.8](https://github.com/bisq-network/bisq/pull/4504)
- [Fix bug with missing remove of old filter when new filter is added](https://github.com/bisq-network/bisq/pull/4576)

### Privacy
- [Use binaries from tor browser v10.0](https://github.com/bisq-network/bisq/pull/4604)

### Mediation/Arbitration
- [Add signature to dispute result and various other improvements](https://github.com/bisq-network/bisq/pull/4543)

### Network
- [Adding two torv3 seednodes, removing torv2 nodes](https://github.com/bisq-network/bisq/pull/4645)
- [Replace emzy's v2 seednodes with new v3 seednodes](https://github.com/bisq-network/bisq/pull/4644)

### API
- [Add core support for registration of regtest dispute agents via API](https://github.com/bisq-network/bisq/pull/4524)

### Development
- [Do not log full filter object in case of an invalid Filter](https://github.com/bisq-network/bisq/pull/4607)
- [Setting jvm option `-Djdk.module.illegalAccess=deny`](https://github.com/bisq-network/bisq/pull/4600)
- [Add flags to header to signal which dev setup is used](https://github.com/bisq-network/bisq/pull/4471)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.4.0.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.4.0.jar`
The output need to match the value from the Bisq-1.4.0.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.4.0.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.4.0 or later. You can verify the binary the same way as you do with the Bisq application.</summary>
    <title>bisq-network/bisq: v1.4.0</title>
    <updated>2020-10-16T07:24:51Z</updated>
    <dc:date>2020-10-16T07:24:51Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ElementsProject/elements/releases/tag/elements-0.18.1.9</id>
    <link href="https://github.com/ElementsProject/elements/releases/tag/elements-0.18.1.9"/>
    <summary>Release notes:

- Fix logic issues with randomization of outputs in [re]issueasset
- Fix parsing of amount commitments from prevtxs in signrawtransactionwith... commands
- Fix mainchain RPC warmup message that showed repeatedly
- Check blinded values when decoding or signing a PSBT
- Specify BIP9 deployment for DynaFed</summary>
    <title>ElementsProject/elements: elements-0.18.1.9</title>
    <updated>2020-10-12T21:03:40Z</updated>
    <dc:date>2020-10-12T21:03:40Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.8.2-pre1</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.8.2-pre1"/>
    <summary>THIS IS A PRERELEASE

Don't use it if you don't know what you're doing!

Platforms:
- [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.2-pre1/SpecterDesktop-v0.8.2-pre1.dmg)
- [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.2-pre1/Specter.Setup.v0.8.2-pre1.exe)
- [Linux](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.2-pre1/specter-desktop-v0.8.2-pre1-x86_64-linux-gnu.tar.gz)</summary>
    <title>cryptoadvance/specter-desktop: v0.8.2-pre1</title>
    <updated>2020-10-12T16:44:17Z</updated>
    <dc:date>2020-10-12T16:44:17Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin-core/HWI/releases/tag/1.2.0</id>
    <link href="https://github.com/bitcoin-core/HWI/releases/tag/1.2.0"/>
    <summary>Also available on [PyPi](https://pypi.org/project/hwi/) and can be installed with `pip install -U hwi`

## Added

* BitBox02 Support
* Multisig address display on Trezor with descriptors
* Additional library type checking

## Fixed

* Fixed script type assignment for an input with a witness script but no witness utxo
* Fixed signing multiple segwit input signing for Ledger Bitcoin App 1.4.0+
* Fixed parsing of descriptors with origin but no fingerprint
</summary>
    <title>bitcoin-core/HWI: 1.2.0</title>
    <updated>2020-10-09T20:01:22Z</updated>
    <dc:date>2020-10-09T20:01:22Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.5.7</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.5.7"/>
    <summary>### Bug fixes:

* Mark Shopify orders paid on invoice payment confirmed @rockstardev
* Fix: notification of new BTCPay Server version not showing properly @rockstardev
* Fix: When collapsed, the sync window blocks the version text in the footer #1941 @Kukks
* Fix: Not possible to delete a user if U2F is enabled. @Kukks
* Fix onion location not always working #1947 @Kukks
* Fix invoice exception status not displaying in list #1963 @Kukks
* Fix: Is administrator checkbox does not work on create user page @NicolasDorier

### Improvements:

* Add specter desktop to the list of Bitcoin RPC compatible wallet @NicolasDorier
* If some operation using BTCPay Server Vault fails, add a retry button so the user does not have to refresh the page. #1937 @NicolasDorier
* Do not show password in clear text in email configuration (Fix #1790) @NicolasDorier
* Showing CheckForNewVersions checkbox only if BTCPAY_UPDATEURL is set @rockstardev
* Add Created date to user, add verified column in list and make user list use same model as modern lists @Kukks
* Do not overlap the footer. Also removed the underline for the toggle button in chrome. Fixes #1946 @dennisreimann
* Improve notifications dropdown #1961 @dennisreimann

### Altcoins

* Fix: DOGE could be trapped, due to our sanity check of absurdly high fee of &quot;1 DOGE&quot;. @NicolasDorier
</summary>
    <title>btcpayserver/btcpayserver: v1.0.5.7</title>
    <updated>2020-10-08T09:27:38Z</updated>
    <dc:date>2020-10-08T09:27:38Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.2.13</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.2.13"/>
    <summary>This update fixes an important bug with the background processes. If you're unable to start this update or it gets stuck at \&quot;Starting Update...\&quot; please follow the instructions here: https://gist.github.com/lukechilds/8dc223885f47579a77407ba7f5beaaec

Changes: 

- Don't skip creation of logs directory on OTA update (#281) 7ee64e1
- Echo 'umbrel.local' instead of 'umbrel.local.local' (#277) eaaa2eb (Thanks, @louneskmt!)

Diff: https://github.com/getumbrel/umbrel/compare/v0.2.12...v0.2.13</summary>
    <title>getumbrel/umbrel: v0.2.13</title>
    <updated>2020-10-08T06:47:54Z</updated>
    <dc:date>2020-10-08T06:47:54Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v5.6.1</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v5.6.1"/>
    <summary>ADD: payjoin support (bip78)
FIX: rare crash on startup (electrum server)
FIX: rare freezes on send screen
FIX: bitcoin price widget content overlap
FIX: biometrics listener release for some devices
FIX: locales pt_BR, pt_PT, ru, sl_SI, ja_JP
FIX: add margin for RTL languages
FIX: Missing (NT) before $ sign</summary>
    <title>BlueWallet/BlueWallet: v5.6.1</title>
    <updated>2020-10-07T13:10:44Z</updated>
    <dc:date>2020-10-07T13:10:44Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.2.12</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.2.12"/>
    <summary>This update brings support for wallets that support Bitcoin Core RPC, along with first class support for Fully Noded, Specter Desktop and BitBoxApp.

You can also now specify custom fee amounts for on-chain transactions and Bitcoin price lookups are now done through Tor.

IMPORTANT: If you’re not running Umbrel on a Raspberry Pi, please read the update instructions here to fix a known bug with OTA updates: https://gist.github.com/lukechilds/031e06f29b5a1bd7135da9c3fe30a21e

Changes:

- Drop Raspberry Pi 3 from docs (#259) 406b0c6
- Add a note on RAM and free space (#260) 40a4536
- Git-ignore event signal files (#261) becbf1a
- Add 200MB offset to RAM check (#257) 06981a3
- Expose Bitcoin Core RPC (#255) 771affe
- ~600GB =&gt; 600GB+ free space (#268) 324da6e
- Proxy BTC price lookups via Tor (#265) 60a93ba (Thanks @louneskmt!)
- Prevent unresolved update status on a failed OTA update (#263) 60371fd
- Fix missing file descriptors when starting Umbrel from the CLI (#269) a345144
- Update to getumbrel/dashboard:v0.3.11 (#270) d43b7fd
- Update to getumbrel/middleware:v0.1.6 (#271) 6b7ff8e

Diff: https://github.com/getumbrel/umbrel/compare/v0.2.11...v0.2.12</summary>
    <title>getumbrel/umbrel: v0.2.12</title>
    <updated>2020-10-06T13:14:53Z</updated>
    <dc:date>2020-10-06T13:14:53Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bwt-dev/bwt/releases/tag/v0.1.5</id>
    <link href="https://github.com/bwt-dev/bwt/releases/tag/v0.1.5"/>
    <summary>### Changelog

- Reproducible builds using Docker (#51)

- Pre-built binary releases for macOS (#24) and ARMv7/v8 (#19)

- Electrum plugin: Compatibility with Electrum v4 — *except for lightning* which is [tricky with personal servers](https://github.com/chris-belcher/electrum-personal-server/issues/174#issuecomment-577619460) (#53)

- Electrum: New welcome banner (#44)

- Scriptable transaction broadcast command via `--tx-broadcast-cmd &lt;cmd&gt;` (#7)

  The command will be used in place of broadcasting transactions using the full node, which may provide better privacy in some circumstances. The string `{tx_hex}` will be replaced with the hex-encoded transaction.

  For example, to broadcast transactions over Tor using the blockstream.info onion service, you can use:

  ```
  --tx-broadcast-cmd '[ $(curl -s -x socks5h://localhost:9050 http://explorerzydxu5ecjrkwceayqybizmpjjznk5izmitf2modhcusuqlid.onion/api/tx -d {tx_hex} -o /dev/stderr -w &quot;%{http_code}&quot; -H &quot;User-Agent: curl/7.$(shuf -n1 -e 47 58 64 68).0&quot;) -eq 200 ]'
  ```

  (Replace port `9050` with `9150` if you're using the Tor browser bundle.)

  h/t @chris-belcher's EPS for inspiring this feature! 🎩

- Load bitcoind wallet automatically (#54)

- Electrum plugin: Fix hot wallet test (#47)

- Electrum: Fix docker image libssl dependency with the `http` feature (#48)

- Improve block download check on regtest (#45, #35)

- HTTP API: Fix `GET /block/tip` (#46)

- HTTP API: Add `GET /banner.txt` (#44)

- Tests: Upgrade to Electrum v4

------------

### Downloads

|         | Full Server &lt;sup&gt;1&lt;/sup&gt; | Electrum Server &lt;sup&gt;2&lt;/sup&gt; | Electrum Plugin &lt;sup&gt;3&lt;/sup&gt;
|---------|--|--|--
| **Linux**   | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-x86_64-linux.tar.gz) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-electrum_only-x86_64-linux.tar.gz) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-electrum_plugin-x86_64-linux.tar.gz) |
| **macOS**   | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-x86_64-osx.zip) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-electrum_only-x86_64-osx.zip) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-electrum_plugin-x86_64-osx.zip) |
| **Windows** | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-x86_64-win.zip) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-electrum_only-x86_64-win.zip) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-electrum_plugin-x86_64-win.zip) |
| **ARMv7**   | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-arm32v7.tar.gz) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-electrum_only-arm32v7.tar.gz) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-electrum_plugin-arm32v7.tar.gz) |
| **ARMv8**   | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-arm64v8.tar.gz) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-electrum_only-arm64v8.tar.gz) | [📥 Download](https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-electrum_plugin-arm64v8.tar.gz)&lt;/tr&gt;&lt;tr&gt;&lt;td colspan=4&gt;&lt;sub&gt;&lt;sup&gt;1&lt;/sup&gt; Includes Electrum RPC, HTTP API and WebHooks support ([learn more](https://github.com/shesek/bwt#installation))&lt;br&gt;&lt;sup&gt;2&lt;/sup&gt; Includes Electrum RPC support only ([learn more](https://github.com/shesek/bwt#electrum-only-server))&lt;br&gt;&lt;sup&gt;3&lt;/sup&gt; Plugin with an embedded RPC server - *hot wallets are unsupported* ([learn more](https://github.com/shesek/bwt#electrum-plugin))&lt;/sub&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; |

### Installation

Installation instructions are [available on the README](https://github.com/shesek/bwt#installation).

### Verifying signatures

The releases are signed by Nadav Ivgi (@shesek). The public key can be verified on [keybase](https://keybase.io/nadav), [github](https://api.github.com/users/shesek/gpg_keys), [twitter](https://twitter.com/shesek) and [HN](https://news.ycombinator.com/user?id=nadaviv). The signature can be verified as follows (replace `x86_64-linux` with your download):

```bash
# Download package
$ wget https://github.com/shesek/bwt/releases/download/v0.1.5/bwt-0.1.5-x86_64-linux.tar.gz
# Fetch signing key
$ gpg --keyserver keyserver.ubuntu.com --recv-keys FCF19B67866562F08A43AAD681F6104CD0F150FC
# Verify signature
$ wget -qO - https://github.com/shesek/bwt/releases/download/v0.1.5/SHA256SUMS.asc \
  | gpg --decrypt - | grep ' bwt-0.1.5-x86_64-linux.tar.gz$' | sha256sum -c -
```

You should see `Good signature from &quot;Nadav Ivgi &lt;nadav@shesek.info&gt;&quot; ... Primary key fingerprint: FCF1 9B67 ...` and `bwt-0.1.5-x86_64-linux.tar.gz: OK`.

### Reproducible builds

The builds are fully reproducible.

You can verify the checksums against the v0.1.5 builds on Travis CI: https://travis-ci.org/github/shesek/bwt/builds/732966695

See [more details here](https://github.com/shesek/bwt#reproducible-builds).</summary>
    <title>bwt-dev/bwt: v0.1.5</title>
    <updated>2020-10-05T14:00:58Z</updated>
    <dc:date>2020-10-05T14:00:58Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin-core/HWI/releases/tag/1.2.0-rc.1</id>
    <link href="https://github.com/bitcoin-core/HWI/releases/tag/1.2.0-rc.1"/>
    <summary>Release Candidate 1 for HWI 1.2.0</summary>
    <title>bitcoin-core/HWI: 1.2.0-rc.1</title>
    <updated>2020-10-02T20:05:09Z</updated>
    <dc:date>2020-10-02T20:05:09Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.5.6</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.5.6"/>
    <summary>### New features:

* Shopify support @rockstardev @Kukks
* Can enable/disable any payment method based on the amount of the invoice #1871 @xpayserver
* New Invoice API in Greenfield (Still incomplete, more for next release) @Kukks @NicolasDorier
* A new light view more adapted for Point of Sale @mariodian
* Allows administrator to invite new users via link and email @Kukks
* New labels in the wallet for payment requests, apps, and improvement of the payout label @Kukks
* Allows entry in wallet send via fiat #1891 @Kukks
* Allows partial invoice refund #1882 @Kukks
* In the Request API key flow, let the user be redirected to the original website #1800 @Kukks @dennisreimann ([more info](https://docs.btcpayserver.org/API/Greenfield/v1/#tag/Authorization))
* Invoice logs now show their severity #1681 @Kukks (see https://i.imgur.com/eyMO9M3.png)
* Add store sort (#1861) @bolatovumar

### Improvements:
* Update PSBT and PSBT sent to Hardware wallet will include `non_witness_utxo` by default, when possible, to match Bitcoin Core 0.20.1 behavior. @NicolasDorier
* Adjust invoice badge styling (#1906) @bolatovumar
* Invoice notification email improvements (#1875) @dennisreimann
* Improvement of the UX flow for requesting an API Key of a BTCPay Server user (#1898) @dennisreimann
* Don't send notification email for expired invoices @dennisreimann
* Greenfield API: Add `Roles` property to the user data. @dennisreimann
* Remove Changelly integration @Kukks
* Better wording in transaction list page #1887 @maltokyo
* Fix alerts text break. #1865 @bolatovumar
* Remove Tor link from navbar @NicolasDorier
* Improve invoices list view #1815 @dennisreimann
* Improve sync progress dialog #1929 @Kukks
* Show index of payment address for onchain payments @Kukks

### Bug fixes:
* When an invoice is partially paid on-chain and allow off-chain, a new lightning network invoice should be created for the remainder of the payment. @Kukks
* Changing the inventory of a PoS item was not working properly (@mariodian)
* Greenfield API: The internal lightning API was returning error 403, even when used as an administrator (@Kukks)
* Using lightning charge as lightning network invoice provider over HTTP was not working properly @bolatovumar
* Fix: If the hot wallet failed to sign a PSBT, should not show a blank page crash (@NicolasDorier)
* Fix bug: The wallet was sending only round amount of sat per byte (@NicolasDorier)
* &quot;Attempt MySql Fix&quot; #1856 @Kukks
* Fix HitBTC rate provider again @NicolasDorier

### Altcoin build
* MonetaryUnit support (MUE) @sotblad
* ETH/ERC20 support @xpayserver
* Fix monero crash #1883 @Kukks</summary>
    <title>btcpayserver/btcpayserver: v1.0.5.6</title>
    <updated>2020-10-01T14:11:08Z</updated>
    <dc:date>2020-10-01T14:11:08Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.8.1</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.8.1"/>
    <summary># Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.1/specter_desktop_setup.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.1/SpecterDesktop-v0.8.1.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.1/specter_desktop-v0.8.1-x86_64-linux-gnu.tar.gz)

**Note:**  In the remote mode Specter-Desktop will open a new window in the browser if you are using self-signed certificates or Tor. GUI app doesn't support it yet.

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

**Note on MacOS:** if Specter server doesn't start for a long time at the first launch, quit Specter, go to Applications, right click on Specter and click &quot;open&quot;. After that Specter will launch normally, and from now on you can start it as usual.

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.1/specterd-v0.8.1-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.1/specterd-v0.8.1-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.1/specterd-v0.8.1-x86_64-linux-gnu.tar.gz)

# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.1/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @stepansnigirev's GPG key.
You can get public key from here: [https://stepansnigirev.com/ss-specter-release.asc](https://stepansnigirev.com/ss-specter-release.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x36ED357AB24B915F) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/6F16E354F83393D6E52EC25F36ED357AB24B915F).
Fingerprint of the key is `6F16 E354 F833 93D6 E52E  C25F 36ED 357A B24B 915F`, short id: `36ed357ab24b915f`

# Release notes
 - Bugfix: Fix displaying address on BitBox02 (#416) (@stepansnigirev)
 - Bugfix: Fix Specter not starting up if Ledger is connected and asleep (#416) (@stepansnigirev)
 - Bugfix: Fix wallet-create wizard ignoring passphrase on Trezor One and KeepKey (#420) (@ben-kaufman)
 - Bugfix: Fix handling of corrupted wallet file (#422) (@stepansnigirev)
 - Bugfix: Fix wrong version number shown on Windows installer (#431) (@k9ert)
 - Bugfix: Fix default address labeling issue when importing an old wallet (#435) (@ben-kaufman)
 - Bugfix: Fix message signing with Specter-DIY (#440) (@stepansnigirev)
 - Bugfix: Fix handling of Bitcoin Core's `disablewallet` mode (#461) (@ben-kaufman)
 - Bugfix: Use port 8332 if port was not specified with disabled auto-detect (#462) (@stepansnigirev)
 - Bugfix: Fix ColdCard multisig wallet export (#467) (@stepansnigirev)
 - Bugfix: Fix Ledger failing to sign transactions with multiple inputs (#468) (@ben-kaufman)
 - Bugfix: Fix wallet importing issues (#463) (@k9ert)
 - Performance: Improve RPC calls speed (#419) (@stepansnigirev)
 - Performance: Move version-checker to a separate thread (#421) (@stepansnigirev)
 - Performance: Improve speed of the wallet UTXO tab (#457) (@ben-kaufman)
 - Feature: Add addresses labels to wallet backup file (#430) (@ben-kaufman)
 - Feature: Notify on desktop app when new Specter version is available (#421, #438) (@stepansnigirev)
 - UI: Correct typos in main menus (#424) (@Bayernatoor)
 - UI: Fix RPC connection test checkboxes CSS (#427) (@ben-kaufman)
 - UI: Show total balances as percentage of the total Bitcoin supply when running the numbers (#429) (@ben-kaufman)
 - UI: Show live updates of wallet rescan progress (#432) (@ben-kaufman)
 - UI: Add QR code (base64) and file upload (binary, base64) support for PSBT import and export (#469) (@stepansnigirev)
 - Refactoring: Add automated PEP8 checks with Black (#286) (@mflaxman)
 - Refactoring: Cleaner input weight calculation for estimating transaction fees (#426) (@stepansnigirev)
 - Refactoring: Blackify the codebase (#464) (@stepansnigirev)
 - Docs: Update the FAQ (#437) (@calkob)
 - Docs: Add a note to the README about setting `server=1` for Bitcoin Core GUI (#459) (@Maple44)</summary>
    <title>cryptoadvance/specter-desktop: v0.8.1</title>
    <updated>2020-10-01T08:45:58Z</updated>
    <dc:date>2020-10-01T08:45:58Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.11.1-beta</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.11.1-beta"/>
    <summary>This marks the first minor release in the `v0.11.x` series! This release contains no breaking changes, and no database migrations. Instead this release bundles a number of reliability improvements, some macaroon upgrades, and a change to make our version our anchor commitments spec compliant amongst several other changes. 

# Database Migrations
This release contains no database migrations. 

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/bitconner/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.11.1-beta.txt` and `manifest-v0.11.1-beta.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.11.1-beta.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.11.1-beta.txt'
gpg: Signature made Thu Oct  1 16:38:32 2020 PDT
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.


For this release roasbeef's signature is the secondary signature which can be verified with the following command: 
```
gpg --verify roasbeef-manifest-v0.11.1-beta.txt.sig manifest-v0.11.1-beta.txt
gpg: Signature made Wed Sep 30 17:35:20 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

## Verifying the Release Timestamp 

From this new version onwards, in addition time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: ` manifest-v0.11.1-beta.txt.sig.ots` and `manifest-v0.11.1-beta.txt.ots`. 

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-v0.11.1-beta.txt.ots
ots verify manifest-v0.11.1-beta.txt.sig.ots -f roasbeef-manifest-v0.11.1-beta.txt.sig
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved. The release binaries are compiled with `go1.14.9`, which is required by verifiers to arrive at the same ones. They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.11.1-beta
gpg: Signature made Tue Sep 15 18:55:00 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming that `vendor.tar.gz` and `lnd-source-v0.11.1-beta.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.11.1-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.11.1-beta&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.11.1-beta&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes 

## Wumbo Soft Limit 

[`lnd` now has a soft-limit of 10 BTC for wumbo channels](https://github.com/lightningnetwork/lnd/pull/4567), when they're enabled. This limit can be reduced by specifying the new `--maxchansize` command line flag. This new flag allows node operators to better control their exposure to very large channels, while still allowing channels above the prior pre-wumbo limit. 

## Healthchecks
This release contains a new health checks subsystem which periodically runs a set of health checks and requests that lnd gracefully shutdown if the check fails. The following health checks are implemented:
* Chain backend: lnd requires access to a bitcoin backend, and may be at risk of losing funds if it loses its connection to the chain. A health check which periodically queries the chain backend for the best block is added, and enabled by default.
* Disk space: lnd needs disk space to update its database with operational data. A disk space health check which will request shutdown if available disk space falls below a threshold percentage has been added, but is disabled by default to ensure that this check does affect any existing deployments (particularly mobile). 

Both of these checks are configurable, and the following options can be set in the `healthcheck.chainbackend` and `healthcheck.diskspace` config groups:
* Interval: how often the check should be run
* Attempts: the number of attempts we allow the check to fail before we request shutdown; this value can be set to 0 to disable a check. 
* Timeout: the amount of time we allow a check to take before failing it due to timeout
* Backoff: the amount of time we backoff between failed checks

**Note that these new checks are off by default.** To turn them on, users should set `healthcheck.chainbackend.attempts` and `healthcheck.diskspace.attempts` to a non-zero value. 

## Anchor channels
The experimental `anchor channel` type introduced in [lnd v0.10.0](https://github.com/lightningnetwork/lnd/releases/tag/v0.10.0-beta) has now been finalized in the [BOLT spec](https://github.com/lightningnetwork/lightning-rfc/pull/688), and this release makes the lnd implementation compatible with these changes. If you already have channels of the previous type you can still update. The only thing you must be aware is that cooperative close will fail until your channel party also update to a spec compliant implementation. 

Note that this channel type still remains experimental.

## Channel Configuration 

[A new flag has been added to allow node operators to limit the total number of HTLCs they'll allow to exist on &quot;their side&quot;](https://github.com/lightningnetwork/lnd/pull/4527) of the commitment. In the future, we may lower this default in order to mitigate certain &quot;fee siphoning&quot; attacks that exist with high fee rates and a large number of HTLCs. Users can set this new value to control the value used for all _newly created channels_ 
using the following flag: `--default-remote-max-htlcs`. 

## RPC Server

[The `WalletUnlocker` proxy now exposes CORS options like the rest of the REST proxy](https://github.com/lightningnetwork/lnd/pull/4551). 

[A new flag has been added to `lnd` which allows TLS certs to be generated without leaking sensitive data](https://github.com/lightningnetwork/lnd/pull/4421) such as certain IP address information. 

[The existing PSBT funding flow has been modified to accept a raw transaction during the `Finalize` step](https://github.com/lightningnetwork/lnd/issues/4330). This makes our workflow more compatible with certain wallets like Electrum. Additionally, our flow is now compatible with wallets that have implemented mandatory measures to mitigate certain signing fault attacks. 

## Macaroons 

### Granular Method Macaroons 

[A series of new calls to enable _granular_ macaroon access has landed in this new version](https://github.com/lightningnetwork/lnd/pull/4463). These new calls allow users to bake a macaroon with a specific _method call URI_. In other words, macaroons can now be created that only allow access to a specific set of RPC calls. As an example, it's now possible to create a macaroon that only lets a user obtain the current snapshot of the graph _and nothing more_. 

A new local CLI command: `lncli listpermissions`, allows one to view all the current permissions available when baking a macaroon. 

If we wanted to make a macaroon that _only_ allowed access to `GetInfo` and `GetVersion, then we'd execute the following command: 
```
lncli bakemacaroon uri:/lnrpc.Lightning/GetInfo uri:/verrpc.Versioner/GetVersion
```

A new CLI command `lncli printmacaroon` has also been added that shows what permissions an already baked macaroon contains.

For more information on this new feature, [check out the updated set of docs on macaroons](https://github.com/guggero/lnd/blob/4996b28dabd71854b15f235ee1314c0b2242634a/macaroons/README.md). 

### Custom Macaroon Validators 

[When initializing `lnd`, it's now possible to register a custom macaroon validator for a sub-server](https://github.com/lightningnetwork/lnd/pull/4464). This allows certain components to be unbundled, yet still retain lnd's primary RPC server interface for macaroon validation. 

## Bug Fixes

[A bug has been fixed that would at times cause `lnd` to crash](https://github.com/lightningnetwork/lnd/pull/4620) due to an edge case in the logic within the `ChainNotifier` sub-server. 

[A bug has been fixed in the routerrpc server](https://github.com/lightningnetwork/lnd/pull/4596) that would previously cause it to crash when given bad input. 

The full list of changes since `v0.11.0-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.11.0-beta...v0.11.1-beta

# Contributors (Alphabetical Order)
Carla Kirk-Cohen
Calvin Zachman 
Conner Fromknecht 
Graham Krizek 
Johan T. Halseth 
Olaoluwa Osuntokun 
Oliver Gugger 
Wilmer Paulino 
</summary>
    <title>lightningnetwork/lnd: v0.11.1-beta</title>
    <updated>2020-10-01T02:43:01Z</updated>
    <dc:date>2020-10-01T02:43:01Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.2.11</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.2.11"/>
    <summary>This release of Umbrel adds an Electrum server along with lndconnect to expand wallet compatibility. You can now connect Electrum, Blockstream Green, BlueWallet, Phoenix, Sparrow, Wasabi, Zap, and Zeus directly to your Umbrel.

Due to the performance constraints of running an Electrum server, this update isn’t compatible with devices with less than 2GB RAM, such as the Raspberry Pi 3. We strongly recommend upgrading to a device with more RAM, such as the Raspberry Pi 4 with 4GB or 8GB RAM.

Changes:

- Bump manager to v0.2.5 (#252)
- Bump dashboard to v0.3.8 (#251)
- Integrate electrs (#242)
- Expose LND RPC/REST for lndconnect (#237)
- Update outdated readme information (#238) (Thanks, @AaronDewes!)
- Update license (#235)
- Remove confusing log message on no file (#233)
- Add link to dev chat (#232)

Diff: https://github.com/getumbrel/umbrel/compare/v0.2.10...v0.2.11</summary>
    <title>getumbrel/umbrel: v0.2.11</title>
    <updated>2020-09-28T15:29:10Z</updated>
    <dc:date>2020-09-28T15:29:10Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin-s/bitcoin-s/releases/tag/v0.4.0</id>
    <link href="https://github.com/bitcoin-s/bitcoin-s/releases/tag/v0.4.0"/>
    <summary># v0.4.0 - Wallet Extravaganza

## Running Bitcoin-S

If you want to run the standalone server binary, after verifying gpg signatures, you can `unzip bitcoin-s-server-0.4.0.zip` and then run it with `./bin/bitcoin-s-server` to start the node. You will need to configure the node properly first, you can find example configurations [here](https://bitcoin-s.org/docs/config/configuration#example-configuration-file).

You can also unzip the `bitcoin-s-cli-0.4.0.zip` folder and start using the `bitcoin-s-cli` like this:

```bashrc
./bin/bitcoin-s-cli --help
Usage: bitcoin-s-cli [options] [&lt;cmd&gt;]

  -n, --network &lt;value&gt;    Select the active network.
  --debug                  Print debugging information
  --rpcport &lt;value&gt;        The port to send our rpc request to on the server
  -h, --help               Display this help message and exit

```

For more information on what commands `bitcoin-s-cli` supports check the documentation, here is where to start: https://bitcoin-s.org/docs/next/applications/server#server-endpoints

## Verifying signatures

This release is signed with [Chris's signing key](https://bitcoin-s.org/docs/next/security#disclosure) with fingerprint `339A49229576050819083EB3F99724872F822910`

To do the verification, first hash the executable using `sha256sum`.
You should check that the result is listed in the `SHA256SUMS.asc` file next to it's file name.
After doing that you can use `gpg --verify` to authenticate the signature.

Example:
```
$ sha256sum bitcoin-s-server-0.4.0.tgz
aa1084edb5fcd3d1dbcafe0d0fba787abf4cd455bbe38809bd9a65a49c0cd0eb bitcoin-s-server-0.4.0.tgz
$ gpg --verify SHA256SUMS.asc 
gpg: Signature made Thu 24 Sep 2020 12:49:39 PM CDT
gpg:                using RSA key 339A49229576050819083EB3F99724872F822910
gpg:                issuer &quot;stewart.chris1234@gmail.com&quot;
gpg: Good signature from &quot;Chris Stewart &lt;stewart.chris1234@gmail.com&gt;&quot;
```

### Website

https://bitcoin-s.org/

### Releases

https://repo1.maven.org/maven2/org/bitcoin-s/

#### Snapshot releases

https://oss.sonatype.org/content/repositories/snapshots/org/bitcoin-s/

## PostgreSQL Support

Bitcoin-S now supports PostgreSQL as a database backend! By default Bitcoin-S still uses SQLite, but you can follow the [instructions here](https://bitcoin-s.org/docs/next/config/configuration#database-configuration) to use PostgreSQL instead. This can be used for every database's backend: Node, Chain, Wallet.

## BIP 340 Schnorr Support

Initial support for BIP 340 style Schnorr signatures has been added.
This support gives new data types as well as the ability to create and verify Schnorr Signatures.
The signing and verification is done in Java, it is planned to give the option to use bindings to secp256k1 in the future.

## Dropped Support for scala 2.11

Bitcoin-S no longer supports scala 2.11 due to akka no longer supporting scala 2.11

## Module level changes

### Bitcoind RPC client

A `BitcoindRpcClient` can now be used as a `NodeApi` and a `ChainQueryApi`, this allows test cases to be simpler as well as allows a wallet to be paired to a bitcoind. Other minor bug fixes and test optimizations are included as well.

#### Commits

dccc2b469c4 Fixed getblockchaininfo for v19 (#1711)
54c02e570c0 Fixed getAddressInfo for versions 18 and 19 (#1679)
088d9cb3d08 Add signrawtxwithwallet bitcoind function (#1665)
6556c536b93 BitcoindV17RpcClientTest get system time closer to getNewAddress call (#1612)
fac75a8adab Bump spread for address info tests in BitcoindV17RpcClientTest (#1591)
003bda2fe49 Attempt to fix BitcoindV19RpcClientTest from losing connection (#1515)
b621412f32f Optimize and Clean up WalletRpcTest (#1511)
35141012ec8 Implement Bitcoind as ChainQueryApi &amp; NodeApi (#1481)
af02cb739ae Implement BitcoindRpcClient as a FeeProvider (#1486)
87af3795ea7 Attempt to add a bit of delay on expecting rescan to fail so we dont' have as much of a async issue (#1381)
5dddd82af8e Add JsonParseException catch clause in the isStartedF method (#1334)

### Commons

This is a new project that holds common items used throughout Bitcoin-S. Currently, it primarily contains JSON models and serializers.

#### Commits

e504d8dfb7d Added DLC json data structures (#1575)
06db27af592 Added appCommons to project aggregate so that it can get published (#1347)
e5ef17f0207 Move Json Reader, Writers, and Serializers to App Commons (#1328)

### Core

`UTXOSpendingInfo` has been replaced by `InputInfo` and `InputSigningInfo`, this is allows for better distinction between inputs with the ability to sign.

`TxBuilder` has been completely refactored to be more modular and interactive, [checkout the new docs](https://bitcoin-s.org/docs/next/core/txbuilder) for more information.

Signing now requires having the full funding transaction for due to the [BIP 143 vulnerability](https://blog.trezor.io/details-of-firmware-updates-for-trezor-one-version-1-9-1-and-trezor-model-t-version-2-3-1-1eba8f60f2dd).

Various bug fixes, optimizations, and improvements.

#### Commits

7c4822f67aa Have RawTxSigner use low R signing (#1722)
98cb6f78c7f 2020 09 18 btchrp stringfactory (#2031)
d7983538138 Updated Bouncy Castle Schnorr implementation to most recent BIP 340 (#2025)
24dfa7200af Create FeeUnitFactory and functions to calculate tx fee rates (#1990)
739288fef53 Cache DoubleSha256Digest.hex (#1932)
a9ad927a9c9 Apply string factory to a bunch of easy things (#1891)
ef9bd4165d8 Add new hash preimage PSBTInput types (#1893)
2a1c3998385 Implement basic TLV functionality (#1847)
d65f68ea217 2020 08 14 issue 1829 (#1833)
fa388c74484 Create more of a project structure in org.bitcoins.core.api, move DbR… (#1799)
d31806f76f7 Add synchronous version of StartStop (#1771)
e4e81d85461 Allow NonWitness and Witness UTXOs in same InputPSBTMap (#1761)
82ab96c54dc Make ECDigitalSignature extend NetworkElement (#1750)
8f86c180760 Improved block parsing time by approx. 33% (#1728)
5b2ad821ad2 Add low R signing (#1342)
5a75b326f47 Shuffle Finalizer Tests + bug fix (#1680)
7abca65ac45 Create ShuffleFinalizer (#1660)
18c931e210d Create BIP 69 finalizer (#1661)
8830eddda11 Segwit Signing Bug Fix (#1670)
a7c51e71790 Move BIP 143 invariant for PSBTs to allow signed transactions (#1631)
7f4a984a04f Override correct equals functions (#1621)
a309694f11f Only fail CallbackTest if promise is not completed (#1607)
a2ce5e5a8c7 Rework signing logic to take full funding transaction (#1560)
24f60c0833b ScriptSignature from P2WSH Witness (#1605)
1eadf098c94 Made P2SHScriptSignature.isP2SHScriptSig less forgiving (#1594)
de048e448c1 Refactored to allow support and disabling of RBF (#1588)
38a73de48f3 Lots of misc. improvements from dlc branch (#1583)
fb993078678 Added BlockTimeStamp abstraction for BlockStamps that aren't hashes (#1573)
041f805730f Callback rework (#1542)
9dea4254be3 2020 06 09 addr invoice string factory (#1538)
ad6d4a33ca9 Add StringFactory trait (#1537)
54c8a3feba5 Make Golomb Filter Test run in parallel (#1512)
7fd36e93117 Reduce number of hashes used in GolombFilterTest to keep CI from timing out (#1494)
afbce5bc4ae Cache numbers between 0 and 256 to make serialization/deserialization faster (#1482)
13884f54700 Rework Standard Finalizer (into pieces) (#1473)
1f4227c75cd Add more optimizations, MultSignatureScriptPubKey.isMultiSignatureScr… (#1475)
8b62272cb9b Fixed sequence computation for P2PKWithTimeout and RawTxFinalizer composition discovered during DLC rebase (#1461)
aa885688fd2 Implement FeeUnit SatoshisPerKW (#1455)
7df84519920 Fix fee rate calculation bugs, add tests (#1454)
01c2759e180 Attempt to optimize block tests more to avoid timeouts (#1459)
fec601c8f52 TxBuilder Refactor (#1426)
7dd1084321c Small optimization for ScriptOperationFactory.operations (#1450)
5c7585c6297 Fix allowing BytesToPushOntoStack(0) (#1448)
29579b52a3c Reduce number of property based tests from 200 -&gt; 100 so we don't time out on CI (#1447)
5ff71181794 2020 05 17 optimizations (#1435)
f3469f8e288 Remove the clause in Transction.fromHex() where we throw in the case … (#1431)
aee88684f2e InputInfo Refactor (#1400)
1cf7e2191de 2020 05 11 bech32 addr tostring (#1413)
8514d361b19 Fix isMinimalPush to not look for OP_1Negate when pushing 0x4f(79) (#1367)
f6c799c9cfb TransactionSignatureChecker bug fix and tests (#1341)
19afc6be2c4 Removed SingleSigner abstraction and replaced with a simple signSingle method in SignerUtils (#1308)
4827d2dbe46 Remove flaky gcs test that times out (#1301)
14535fcd772 P2WSH Signer fix + tests (#1300)
8c953c3ad75 2020 03 28 uint32 cache (#1279)
752685fa4b7 Replace all usages of List inside of ScriptParser with Vector (#1280)
8ec143d0d41 Give `ScriptInterpreter` functions to verify a transaction or single input (#1223)

### Chain

The `ChainHandler` now picks the best chain based off of the one with the most work, instead of the longest.

The `ChainHandler` also now batches the processing of filters to make an IBD and syncing much faster.

Various other bug fixes have been done as well.

#### Commits

5df27a4395e Increase chain test code coverage even more (#2028)
314afbd538e Increase chain code coverage (#2023)
d0abc19ef5d Handle the case where our block headers are synced already (#2021)
2f6ff1d9557 Make ChainApi.getHeadersBetween() be inclusive on the 'from' parameter (#2009)
449e205b8b3 Introduce 'FilterSyncMarker' to ChainApi, make it clearier what exact… (#2003)
72cfd4bd4c3 Make BlockHeader, BlockHeaderDb have better toStrings (#2007)
7b4b4a290f6 Resolve issues with reorgs and syncing filters (#1969)
8d1d0fcba82 Update callbacks for LN support (#1938)
19bbe25197a Segregate mainnet chainhandler tests and regtest chainhandler tests (#1988)
f14eeb3a6c2 Optimize findClosestToTime (#1959)
a7c06a11cba Add chainHash to ChainParams (#1972)
1b788d05be4 Move getBestFilterHeader() use the best chain by chainwork for determining the fitler header (#1964)
b36ad557dda Change maxBy and minBys to use maxByOption and minByOption (#1961)
893d036ab6b Rename ChainApi.nextHeaderBatchRange -&gt; ChainApi.nextBlockHeaderBatchrnage (#1957)
45c11f25eca Fix max by for getBlockCount (#1951)
4d6d96c9e79 Fix getBestFilterHeader for headers 2016 or more blocks away from tip (#1943)
5909a57f093 Make sure both filter ehaders and filters are empty before sending fi… (#1936)
5785f0c1a84 Fix maxBy() exception in the case of empty Blockchain in ChainHandler… (#1934)
453e02b58b0 Implement getBestFilterHeader based on a number of block headers that… (#1926)
267cf06fa7a Fix log to output correct function (#1913)
4cdbeafb586 Move ChainApi to core (#1888)
b1b5f0ad8d7 Use database to calculate number of confirmations (#1789)
ff8f9226840 Batch and execute headers for chain work calculation test case, this … (#1837)
11e08718ffd Attempt to batch checking of headers in chainTest to avoid reject exe… (#1826)
4323cd7048f Drop older headers on chain update (#1763)
576d4559240 Add back chain index after creating a temp table (#1753)
f4d4f8e8b9f Batch add filters to database (#1725)
5e80795c77b 2020 07 25 optimize recalc chainwork (#1697)
c3b7629e517 Fix Postgres types (#1723)
930f184dca6 Optimize getBestFilter functions (#1715)
17e9c87cbcf Fix getBlockchainsBetweenHeights (#1710)
383aaa76392 Remove need to parse every header in a blockchain on instantiation (#1704)
4b710dd0cab Create getBlockchainsBetweenHeights for BlockHeaderDAO (#1703)
8f3bcbb949a Add extra logs, fix best filter bug (#1624)
94568aba22e Change ChainApi.getBestFilterHeader() return type to Future[Option[Co… (#1550)
7d970eaf138 Attempt to fix memory leak in recalc chain work (#1535)
43a5c6c05f5 Fix Chaindb chainwork Migration (#1518)
31807c9cbd3 Implement best block hash correctly (#1452)

### CLI

The CLI commands now have proper help messages with the addition of a bunch of new commands. Checkout [the list of all the commands](https://bitcoin-s.org/docs/next/applications/server#server-endpoints) for more information.

#### Commits

667d2bc0e56 Fix case of cli command sendwithalgo (#1835)
1f6e2249ea4 Address Tagging/Labeling Support from CLI (#1790)
1c2bc7081cb CLI: Handle non-json responses (#1749)
a84543cff5a Pulled down dlc CLI code (#1589)
be37fda2e3d Add sendrawtransaction CLI and Api commands (#1351)
c7a350d8f31 Add CLI commands for current wallet apis (#1291)
380ef24d9e3 Fix CLI commands (#1271)
a7af3cd81da CLI command to stop node (#1268)
bbe7b78c4ca CLI help message include commands and their arguments (#1254)

### Crypto

This is a new module that used to be contained in the `Core` project. The `Crypto` project is meant to handle using cryptographic primitives (keys, signatures, and hashes).

Schnorr Support has been added! Schnorr keys, nonces, and signatures can be now be used inside of Bitcoin-S through libsecp256k1 or our own BouncyCastle implementation. This is in its very early stages as an alpha release without thorough review and is subject to change (as the schnorr BIP is subject to change). Please use with caution.

#### Commits

bed34f453e3 Use safeRewind for signWithEntropy (#1774)
2c78d9ff0da Create safeRewind() helper method in secp256k1jni (#1546)
665b5850021 Schnorr Data Structures (#1564)
2199cfbb287 CryptoContext Refactor (#1469)
a37a7d16291 Implemented (lax) signature parsing in Bitcoin-S (#1446)
4d9692f61e5 Crypto Project Refactor (#1380)

### Db Commons

[PostgreSQL support](#postgresql-support)!

Logging has been completely redone to only use grizzled slf4j.
Changing settings in your `bitcoin-s.conf` file will no longer effect logging, only a `logback.xml` file will.

Various bug fixes, optimizations, and improvements for other modules.

#### Commits

8361ff6e086 Refactor logging to only use grizzled slf4j (#2019)
f4711198804 Create DatabaseDriver ADT instead of booleans (#1902)
9a1dfdfdbd5 Remove AppConfig.initialize() in favor of AppConfig.start() (#1907)
1c84dc330f1 Add an ability to one Postgres database for all sub-projects (#1897)
f702410be51 Db conf on pr 1877 (#1879)
350928beca6 Correcly use reference.conf file (#1869)
1d7793cc456 Only use appenders with no Logback conf (#1867)
9dc7b2c0dd3 Remove default false for useLogbackConf (#1816)
26a2529f50e CRUD Test suite + updateAll improvements (#1618)
7b8f17ade1d Added locks on start calls for loggers (#1713)
436396773d2 Fix All Loggers! (#1695)
6a1e4aea016 Add .transactionally to CRUD.updateAll(), CRUD.upsertAll(), CRUDAutoInc.createAll() (#1698)
03da22b3915 Fix length of BigIntMapper (#1651)
102e5775f70 AppConfig Start Interface (#1598)
586075e9f83 Temporary fix for update all on CRUDAutoInc Tables (#1596)
8c0e64e1016 Move slickDbConfig out of JdbcProfileComponent trait into AppConfig (#1510)
a9430c2d5a1 PostgreSQL support (#1315)
0a35cdb6ef4 Implement AppConfigFactory (#1462)
c811ccc62a7 Add option to correctly use logback config (#1398)
64b13846d9a 2020 04 08 multi db dao (#1355)
02d926bb256 Reduce default num threads used for slick being a thread pool of 20 to 5 (#1281)

### Eclair RPC

Eclair has been upgraded to `v0.4.1` and `EclairInstance` now recognizes more config options.

#### Commits

5426c01c9e7 Fix CI failure in eclair test (#1735)
15870a775b9 Eclair RPC 0.4.1 (#1627)
8350a47bdbf Upgrade Eclair to v0.4 (#1421)
848c4cd36a4 Add bitcoind and zmq config options to EclairInstance (#1428)

### Fee Provider

A new project for Bitcoin-S, used for retrieving fee rates. An initial implementation for getting fee rates from [bitcoiner.live](https://bitcoiner.live/), [BitGO](https://www.bitgo.com), and [mempool.space](https://www.mempool.space) are included. For more information checkout the [docs](https://bitcoin-s.org/docs/next/fee-provider/fee-provider)

#### Commits

f8ca35b1c04 Add mempool.space as a fee provider (#1751)
38c80d78906 Implemenet BitGo fee provider (#1662)
6ecb3cdbd31 Attempt to re-enable fee provider publishing (#1503)
89ec91f3f31 Skip publishing of fee-provider-test (#1495)
217a8b650a8 Skip publishing fee provider for now (#1492)
3e323ce18e0 Fee Rate Api Support (#1470)

### GUI

A new GUI has been added for the wallet. It has minimal functionality but allows for basic sending and receiving.
There is a tab for executing DLCs however it will not work without compiling from the `adaptor-dlc` branch, more information can be found [here](https://bitcoin-s.org/docs/next/wallet/dlc).

#### Commits

56937f77285 Give gui command line arguments (#1931)
bbb43c2687d Fix gui theme to correctly color the button bar (#1626)
4683d41568c Added DLC GUI stuff to a new package in the existing GUI and made a new tab for DLCs (#1590)
b0229090d1d Introduced bundle project and created main class that runs server and then gui (#1531)
ab9b0bd88af Remove GUI unused imports (#1440)
91b2602c70c Add bitcoin-s icon, add dark theme to dialogs (#1425)
afd67b62922 Modify gui background color to be same as our website (#1404)
55e3d2d6cef Dark mode GUI (#1316)
920199cf9e8 Constructed simple Bitcoin-S wallet GUI (#1285)

### Key Manager

A Key Manager now has a creation time, this should allow for more optimal rescans if used.

#### Commits

293eb242c1c Increase test coverage in WalletStorage (#2030)
efc8e7213a5 Increase code coverage in key manager (#2024)
9c17e001391 Implement KeyManagerLogger (#1386)
eb37e551e05 Increase Key Manager test coverage (#1465)
556f7135897 Add wallet creation time for rescans (#1353)

### Node

Some notable bug fixes in the `node` project:

- Safely handles reorgs that happen when the node is offline

- Can now safely rebroadcast transactions

- Does not need to wait for a new block to begin syncing filters

- Send correct the time in a `VersionMessage`

- Uses a more descriptive user agent

`NodeCallbacks` now return `Future[Unit]` to add the ability for the node to wait for the callbacks to complete, learn more reading the [callback docs](https://bitcoin-s.org/docs/next/node/node#callbacks)

#### Commits

e8c28de421c Warn if peer does not support services we need (#1921)
be891596b68 Improve logging in DataMessageHandler (#1922)
0f5929d65e8 Clean up calls in Node and Chain (#1896)
79f757311e0 Send get filters message if we haven't cached any yet (#1900)
c9c18fabc5e Create ADT for NodeType instead of booleans (#1901)
485874d2158 Simplify Transaction Broadcast (#1872)
098c0ee2f52 Update user agent to 0.4.0 (#1887)
9a36d791dc9 Fix safely broadcast a transaction twice test (#1851)
e2294414bfa Send correct version message on node start up (#1793)
97ddf62b9fe Send GetHeadersMessage using all of our cached headers to prevent reorgs from stalling node (#1758)
29c5bffb3cd Stop requesting merkle block messages while in neutrino mode (#1730)
7db465f2226 Callbacks to appconfig (#1740)
5776eaede4d Start syncing filters on node startup (#1729)
728a4a841f3 Fix Node Startup Issue (#1683)
c64a590d1a8 Skip downloadBlocks if given an empty Vector (#1690)
c65338feb6c Remove need for wallet from BroadcastTransactionTest (#1666)
2b919ff3571 Node broadcast tx twice test (#1611)
65c7c847621 Drop AutoInc col for Broadcastable Transaction Table (#1630)
f7efc25a425 Add tests that NodeCallbacks are executed (#1582)
b7504edf482 Have BroadcastTransactionTest rebroadcast on failure (#1561)
0928fcae463 Optimize UpdateBloomFilterTest (#1548)
4ee234d9997 2020 06 12 mv to appconfig (#1553)
aa53ee5f57f Fix and Optimize Broadcast Transaction Test (#1545)
e6af044e3cf Add more descriptive log message in P2PClient when we get disconnectd (#1514)
d0ad497232a Try and improve reliability of UpdateBloomFilterTest, also add getMem… (#1434)
38fe580c061 Neutrino Logging (#1382)
2194196e760 Re-enable NeutrinoNodeWithWalletTest for Linux (#1366)
831e89c72b0 Use FutureUtil.foldLeftAsync() to process messages we parsed on the p2p network. This moves the blocking with Await.result() from inside of each message we process, to after the entire batch of messages is processed (#1326)
064d8bd05e1 Fix MerkleBuffers test to be async (#1329)
efaf457d6a6 Make 'maxHeightQuery' vals inside of BlockHeaderDAO, CompactFilterHeaderDAO, CompactFilterDAO (#1325)
27dbefd2af8 Call getFilterHeaderCount async inside of nextFilterHeaderBatchRange while we are fetching our start height for fetching filters (#1327)
aa2d88f396d Network specific filterHeaderBatchSize (#1286)
717434dcaa5 Change NodeCallbacks to `Future[Unit]` s (#1206)
afd8d937213 Terminate not reliant on node.stop

### Server

Logging has been improved in the server, as well as some configuration options have been added, visit [the server config docs](https://bitcoin-s.org/docs/next/applications/server#configuration) to see them all.

The server should now properly handle errors on start up and shutdown.

#### Commits

e353d2181f2 Throw errors that occurr in startup (#1950)
6e2c8117893 Rolling log file location (#1846)
26f47d269c9 Fix server parsing for send to address (#1819)
a3a2248aa1c Add missing route for getaddressinfo (#1834)
60e82894d7f Don't wait for rescan completion to send message (#1836)
cad3c64cdab Output logger configuration on startup now (#1814)
47e305e1aae Config CLI option, datadir correctly read from config (#1807)
e247289c346 Make Akka log to file correctly (#1801)
d72316722d8 Bump stop timeout (#1797)
26aee5eb6ba Better return message for bitcoin-s-cli stop (#1777)
6f95c27aea9 Replace localhost with 127.0.0.1 automatically (#1772)
eb09319c273 Have AppConfig use BitcoinNetwork.fromString (#1748)
674c376dd74 Move where we call wallet.start() and node.start() to the same place to avoid initializaiton issue 1687 (#1689)
0ee735424c4 Start server before sync (#1682)
8b85751b461 Give more descriptive error when there are no peers set (#1652)
7784087bd56 Break things up in server/Main.scala, allow things to be done asynchr… (#1522)
c54ee108090 2020 06 05 mv chainwork calc (#1519)
29e439d202f Add rpcport configuration options in both bitcoin-s.conf and as a command line parameter (#1387)
4284f3e2a2e Log correct type of node sync (#1384)
ee2d74b272b Change sendrawtransaction return to be just txId (#1354)

### Testkit

Wallets created by `fundWalletWithBitcoind` will now have the same utxos as a wallet created by `FundedWallet`. This should make them interchangable and ease some pain from switching between the two kinds of test fixtures.

Wallet Fixtures now have a `bip39PasswordOpt` parameter to allow for testing some of the wallet's key manager.

Fixed a bug that led to performance issues due to a wallet's threads not being properly closed.

#### Commits

3e864383270 Rename parameter names from 'duration' -&gt; 'interval' just like our ActorSystem.schedule() names the parameter (#2005)
b43d5d28f86 2020 08 22 chaintest cleanup (#1877)
e4460bb07f0 2020 08 21 clean broadcast dao (#1875)
50a43d0502b Remove uncessary extension of Async 'FixtureAsyncFlatSpec' in WalletDaoFixture, it's inherited from BitcoinSWalletTest already (#1881)
403d70eb0b0 Fix async bug with destruction of fixtures (#1878)
199661df7b5 Start calling appConfig.stop() in destruction fixture code (#1868)
c5f7c3d0e17 Disable logging for tests (#1839)
ac21e0418db Cap the amount of threads an actor system can spin up to 2 in tests (#1578)
a66ead6cbbf Make it so wallet fixtures take a bip39PasswordOpt as a paramter (#1555)
6b1973264e5 Fixed all walletTest threads not being closed (#1552)
977a696819c Testkit wallet with bitcoind uses bitcoind as api (#1499)
92ac40c97dc Fixed buggy type inference on Gen.frequency by explicitly passing in type parameter (#1439)
ce3e37d9c9b Create KeyManagerTestUtil.bip39PasswordNonEmpty for test case that requires non empty password (#1373)
260f52fe273 Make fundWalletWithBitcoind have the same utxo amounts as FundedWallet (#1364)

### Wallet

Many new APIs available for different types of sending and funding of transactions.

Wallet now has the ability to add callbacks for certain functions, check [the docs](https://bitcoin-s.org/docs/next/wallet/wallet-callbacks) for more information.

Wallets now use its `KeyManager`'s creation time for faster rescans.

Remove Unlocked vs Locked Wallet distinction, this was removed because it was not used, the `KeyManager` still has a locked and unlocked state however.

The wallet now has the ability to watch any `ScriptPubKey`, this will be useful for off-chain protocols.

Various bug fixes, optimizations, and improvements.

#### Commits

36b45790cfb Add ImmatureCoinbase TxoState (#2029)
ff878c532bd Use randomized fee rates for wallet tests (#1977)
bf1799d5734 Fix Two KeyManagers in scope for fundRawTransactionInternal (#1986)
2da714999db Don't spend immature coinbases, fix tests (#1981)
a4dc8053a2a Validate key manager matches account db on wallet startup (#1948)
bd94ff15f97 Only mark utxos as reserved on successful coin selection (#1944)
f734e002bec Calculate correct TxoState when processing a transaction (#1929)
4104e0c9732 Fix rescans that are larger than the batch size (#1916)
66ec89bcab0 Move WalletApi to Core (#1890)
28ff3186e44 Move WalletApi necessities to core (#1886)
acbdbfac418 Move all remaining wallet db representations (#1885)
f1b228a8ce1 Move TransactionDb to Core (#1849)
f7571206817 Move AddressTagDb to Core (#1850)
02f02fb22b3 Create KeyManager Api &amp; move SpendingInfoDb to core (#1848)
d6975340e06 Fix selecting Utxos twice in fundRawTransactionInternal (#1866)
773dbb702ee Watch arbitrary SPKs (#1860)
0904ba4e4e3 Fix V8 Migration (#1862)
7c62bb285f3 Remove unnecessary parallelization in Wallet (#1823)
874a96eb1e0 Refactor wallet DB (#1798)
0ca5b692dc0 Fix get missing utxos (#1832)
c9fba8ad825 Create primary key of (address, tag_type) for AddressTag table (#1828)
86f68b3b622 Fix address tag issue where we weren't adding tags to an address, we were replacing existing tags (#1824)
c5617f6fbed Require utxos aren't spent when sending from outpoints (#1817)
cb962f4d957 Optimize unmarkUTXOsAsReserved (#1804)
1a8013242bc Fix for Wallet confirmed states (#1782)
d9024b17523 Have wallet shuffle inputs and outputs (#1721)
b044b6400d8 Implement Wallet.listTransactions() (#1744)
7db465f2226 Callbacks to appconfig (#1740)
d6ce8dee0b8 Move Node type of out Wallet API (#1708)
96ebf2b6a44 Wallet API remove app config (#1706)
d5a0bcd51e9 Wallet API, widen key manager definition, remove unlock functions (#1705)
68608199ceb Wallet API move execution context (#1707)
4ef425d3cb9 Add ProcessBlockTest (#1674)
24f83d28029 Create HDWalletApi (#1693)
8102fde681c Move function defs from wallet api to wallet (#1694)
3a1f3d3497d Unreserve spent utxos (#1676)
c6f1dcf6feb Fix CoinSelector for KiloX fee rates (#1664)
407c19bf019 Enforce unique outpoints for SpendingInfoDb (#1673)
9ed795718f1 Let Wallet find utxos by state (#1668)
15ddc74c258 Random Coin Selection (#1663)
c2fa7d7cc85 Address Tagging Attempt 2 (#1320)
021e21d61b3 Rescan when UTXOs don't have associated transactions (#1562)
fdb40263569 Formatting Fix (#1606)
ea62374fc60 Fix WalletAppConfig.hasWallet for Postgres (#1576)
e63061e9b9a Wallet callbacks (#1543)
1305e53f1a3 2020 06 14 wallet root accounts (#1556)
5d276d220f7 Attempt to fix database locking errors in process tx test (#1477)
5508af57a24 Create a simplified version of the WalletApi.unmarkUTXOsAsReserved() that just takes in a tx and scans outpoints if they are in our wallet, also move the mark/unmark methods out of Wallet.scala and into UtxoHandling.scala (#1463)
d6978e01bb7 Fix balance by account (#1457)
a1b220a4737 Add ability to unreserve utxos (#1458)
9172aa3206f Add ability to make OP_RETURN commitments (#1417)
c4382cddb62 Wallet Send with coin selection algorithim (#1409)
11fb182c10f Fix Warning in TransactionDb (#1427)
a9cd4450da5 Add list unused addresses call (#1408)
8f5c845a06f Add listFundedAddresses call (#1407)
bf6d90acfb7 Add listSpentAddresses call (#1406)
1454bf65522 Wallet send from outpoints (#1405)
4723dce744d Remove Unlocked vs Locked Wallet distinction (#1379)
20c6e43df24 Batch processing compact filters (#1363)
6cfe7b438b8 Ignore immature coinbase outputs when funding a transaction  (#1365)
5881aff1869 Rescan from account (#1348)
ee852bd3101 Remove redundant logic that computes an HDAccount. We don't need this because we are explicitly passing in the account we want to create (#1359)
8d4cbeb9c6c Require that addresses are the correct network when sending (#1332)
0a4ca6de986 Bump number of addresses generated in negative test case for AddressHandling where  we expect a illegal state exception to be thrown (#1333)
934b7319a88 2020 04 02 get new address queue (#1299)
c347fb5beba Fix Block Header Callback (#1331)
abd28f99622 GetAddress Wallet API call (#1287)
73b41460da4 Add wallet pay to many (#1317)
f620fb23197 getNewAddressHelper Refactor (#1322)
d6b4ac07a37 Update TxoState for transactions after they've been confirmed (#1178)
80882bf649e Wallet Transaction Tracking (#1197)
3ba5cae49b5 Fix hardcoded network for the default wallet account (#1277)
d8586ef85e6 Fetch addresses and utxos async in LockedWalletApi.processCompactFilter() (#1283)
0f899920f17 Wallet integration for nested segwit v0 spending (#1272)
90e4ca1cf35 Custom fee rate for wallet sends

### Website &amp; Documentation

94c19035019 Update sbt-mdoc to 2.2.9 (#2033)
603e3db93f5 Update Website Deps (#2011)
09556a072d9 docs: Fix broken links in Docs + minor touchups (#1908)
b9095035ba7 docs: dlc branch -&gt; adaptor-dlc branch (#1903)
e3452275619 docs: Remove e2e dlc info from documentation, add some notes about using gui bundled with node (#1905)
3805fc6286d docs: Updated setup and dlc docs (#1895)
9e5e2634f8b Fixed Transaction Signing doc (#1800)
f26d9e63d8c Docs: Remove WalletApi disclaimer (#1785)
83906d738ed Docs: Address Queue (#1776)
9cd2c41e3da Docs: Command line options (#1734)
4b03dcc4fab Fix nightly build docs section (#1639)
8ba3a797878 Use One click install in docs (#1640)
e3938544edd Fee Provider Docs (#1641)
15870a775b9 Eclair RPC 0.4.1 (#1627)
d9079678eb3 Update broken slack link (#1580)
9507315cd4d Document LN Data types (#1504)
95fb2b7e24b Add docs for server endpoints (#1505)
62ebf640d8b Add database configuration as a heading that can be hyper linked too (#1501)
c64c1ddfa6b Update docs pertaining to logging (#1471)
b3050c03adc Update stable version in doc.sbt, add getting started link to README.md (#1453)
9d59acbd9cd Fix spacing in README.md (#1444)
9a7b90c1328 Add DLC GUI Docs (#1438)
171a6c15ef7 Fix Oracle info in DLC doc (#1401)
c2c1c205181 DLC code snippet clarification (#1393)
14dfc92e34d Remove compile for dlc.md as we don't have schnorr in master (#1378)
e49bb86e473 Add fixed dlc doc instructions (#1376)
7b6c6c75e6c Add information on how to build libsecp256k1 to the secp README (#1318)
81b8ac7027e Added Tables of Content to the bigger docs using doctoc, updated signing-transactions.md (#1319)
445077338f4 Add google analytics key for bitcoin-s site (#1292)
7c30ecc3914 Add new GPG key (#1263)
4559edde07d Actually add all files for 0.3.0 on the website so they show up (#1256)

### Other

89fe847dbbd Update sbt-bloop to 1.4.4 (#1954)
23a8b1fbbd7 OSX native libsecp256k1 (#2014)
d819dd03223 trivial: add trivial phase to travis (#2008)
79ca91029c3 Update sbt-mdoc to 2.2.8 (#2001)
47fb9e0530d Update slick, slick-hikaricp to 3.3.3 (#1987)
4343a4b4deb Update scodec-bits to 1.1.20 (#1960)
e560159b54f Update play-json to 2.9.1 (#1994)
1b0113f1c49 Update sbt-mdoc to 2.2.7 (#1995)
149e5190f7a Fix RoutesSpec to assert results (#1979)
9daa7e73afa Bump scalatestplus version (#1894)
88ae8958954 Update scalatest to 3.2.2 (#1876)
f96bb97a9e7 Remove 2.11 specfic files (#1892)
8529eb7939e Cache Travis Builds (#1859)
68ec48c3873 Bring back strict compiler opts (#1854)
4186be51e00 Update scalafmt-core to 2.6.4 (#1686)
1660f560d44 Update postgresql to 42.2.16 (#1873)
b13d9ce7dc0 Update sbt-native-packager to 1.7.5 (#1838)
86647d3a324 Update postgresql to 42.2.15 (#1831)
90138a956de Update sbt-mdoc to 2.2.5 (#1812)
0bd60fd6d91 Revert scalaTestPlus 3.2.1.0 -&gt; 3.2.0.0 (#1810)
1e41bf02e8d Update sbt-mdoc to 2.2.4 (#1786)
84dfb33c37e Update sbt-buildinfo to 0.10.0 (#1792)
0a16a79c75c Bump prismjs from 1.20.0 to 1.21.0 in /website (#1788)
931ad6b247d Revert scalaTest to 3.2.0 (#1791)
bb7786d433c Update akka-actor, akka-stream, ... to 2.6.8 (#1677)
5b385fdd175 Bump scala 2.12 compiler to 2.12.12 (#1669)
e9ec643daae Update akka-actor, akka-stream, ... to 2.6.7 (#1656)
cfdee8492ec Run only docs CI for PRs that start with Docs: (#1643)
1970f756fc7 Update sbt-native-packager to 1.7.4 (#1644)
34e9be12990 Update website deps (#1622)
d3641c3fff8 scalafmt On Compile (#940)
105052d877d Have travis only run tests if it compiles (#1577)
2b91c396162 Added compile scope scalafmtCheck to travis runs (#1563)
8d21cd13782 Bump akka to 2.6.4, fix deprecated things (#1374)
8241e129a9c Filter -Xfatal-warnings when using scala console so we don't get error messages when you are trying out code (#1485)
9040e2ccaf8 Filter warnings on doc for publishing (#1484)
11a635f3be7 Add -Xfatal-warnings on Scala 2.13 (#1483)
df13a0b3135 Drop 2.11 from inThisBuild.sbt and Deps.scala (#1479)
606d2fe29ab Add hardcoded jvmopts file that starts with a 2g heap (#1436)
920f0c3a201 2020 05 19 improve test performance (#1449)
a38b77d56ab upgrade Scala to 2.13.2 in places in travis.yml (#1432)
ddf060bcdd4 Bump .travis.yml scala version (#1368)
ce33c57ed90 Bump scala version to 2.13.2 (#1360)
28aea46e336 Increased test coverage by 0.97% (#1343)
abec5acccda Update Secp256k1 (#1310)
134075380bd Fix Travis caching (#1295)
9995e220ebb Bump sbt-native-packager to 1.7.0 (#1265)
b913a423553 Bump scalac 2.12.x series to 2.12.11 (#1257)
0c67805cee6 Update sbt-mdoc to 2.1.4 (#1244)
</summary>
    <title>bitcoin-s/bitcoin-s: v0.4.0</title>
    <updated>2020-09-24T18:02:06Z</updated>
    <dc:date>2020-09-24T18:02:06Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.8.1-pre2</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.8.1-pre2"/>
    <summary>THIS IS A PRERELEASE! Don't use until you know why!</summary>
    <title>cryptoadvance/specter-desktop: v0.8.1-pre2</title>
    <updated>2020-09-23T14:26:39Z</updated>
    <dc:date>2020-09-23T14:26:39Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.11.1-beta.rc4</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.11.1-beta.rc4"/>
    <summary></summary>
    <title>lightningnetwork/lnd: v0.11.1-beta.rc4</title>
    <updated>2020-09-22T03:31:26Z</updated>
    <dc:date>2020-09-22T03:31:26Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.8.0</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.8.0"/>
    <summary># Binaries

Binaries for this release will appear soon. Building in progress...

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.0/specter_desktop_setup.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.0/SpecterDesktop-v0.8.0.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.0/specter_desktop-v0.8.0-x86_64-linux-gnu.tar.gz)

**Note:**  In the remote mode Specter-Desktop will open a new window in the browser if you are using self-signed certificates or Tor. GUI app doesn't support it yet.

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

**Note on MacOS:** if Specter server doesn't start for a long time at the first launch, quit Specter, go to Applications, right click on Specter and click &quot;open&quot;. After that Specter will launch normally, and from now on you can start it as usual.

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.0/specterd-v0.8.0-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.0/specterd-v0.8.0-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v0.8.0/specterd-v0.8.0-x86_64-linux-gnu.tar.gz)

# Release notes
- Build: Refactor the desktop app to run Specter in a separate thread instead of from binaries (#370) (@stepansnigirev)
- Devices: [BitBox02](https://shiftcrypto.ch/bitbox02/) single-sig support (#393, #402) (@ben-kaufman, @stepansnigirev)
- Bugfix: Fix file uploading (#327) (@ben-kaufman)
- Bugfix: Properly handle errors with listwalletdir command (#331) (@stepansnigirev)
- Bugfix: Fix logging ignoring the config (#348) (@k9ert)
- Bugfix: On send screen, make the amount input steps match the unit selected (#350) (@ben-kaufman)
- Bugfix: Fix Bitcoin Core fee calculation (#350, #367, #400) (@ben-kaufman, @stepansnigirev)
- Bugfix: Remove loggings of unrelated logs (#362) (@k9ert)
- Bugfix: Fix fee unit issues by using only sat/vbyte as Specter's fee unit (#372) (@ben-kaufman)
- Bugfix: Fix wallets not showing up and inability to create wallets if a JSON file is damaged (#375)
- Feature: Add option to verify merkle root and block headers (#334) (@mflaxman)
- Feature: Allow pruned nodes to fetch from a block explorer the missing data needed for importing wallet funds when scanning for UTXO (#344) (@stepansnigirev)
- Feature: Add HWI message signing (#345) (@ben-kaufman)
- Feature: Support ColdCard Generic file export format (#349) (@stepansnigirev)
- Feature: Allow configuring the Bitcoin Core RPC connection via environment variables (#351) (@k9ert)
- Feature: Allow specifying BIP44 account number when importing device keys from USB (#360) (@ben-kaufman)
- Feature: Allow arbitrary fee rate (#379) (@stepansnigirev)
- Feature: Allow connecting to a remote Bitcoin Core node over Tor (#383) (@ben-kaufman)
- UI: Make UI mobile-friendly (watch-only mode) (#326) (@ben-kaufman)
- UI: Show current Specter version on the sidebar (#333) (@mflaxman)
- UI: Add wallet keys list to wallet settings (#335) (@ben-kaufman)
- UI: Improve scan for existing funds option when creating a wallet (#337) (@ben-kaufman)
- UI: Allow toggling SLIP-132 format in wallet settings keys list (#343) (@ben-kaufman)
- UI: Add send max amount button (#350) (@ben-kaufman)
- UI: Add free-text transaction creation editor (#350) (@ben-kaufman)
- UI: Add total transaction fee preview when composing a transaction (#350) (@ben-kaufman)
- UI: Add tooltip to the Tor button (#364) (@ben-kaufman)
- UI: Allow resizing QR codes used for communications with airgapped wallets (#380) (@ben-kaufman)
- UI: New single-sig wallet and device setup wizard (#392) (@ben-kaufman)
- UI: Align sidebar contents properly (#394) (@dennisreimann)
- UI: Add about page to the sidebar (#401) (@moritzwietersheim, @ben-kaufman)
- Refactoring: Small cleanup of the JSON-RPC server code (#322) (@PulpCattel)
- Refactoring: Rearrange the utils and helpers files and functions (#352) (@stepansnigirev)
- Devops: Automate Linux binary releases (#324) (@k9ert)
- Devops: Add gen-certificate tool for self-signed certificates (#354) (@stepansnigirev)
- Devops: Automate Windows binary releases (#361) (@k9ert)
- Devops: Make pre-releases possible supporting semver (#371) (@k9ert)
- Docs: Update the FAQ (#328, #378, #387, #395) (@kkdao, @k9ert)
- Docs: Update Tor docs for Linux (#340) (@stepansnigirev)
- Docs: Add Tor document link to the README (#357) (@k9ert)
- Docs: Add FAQ link to the README (#355) (@Siimone)
- Docs: Update FAQ with a question about devices vs. wallets (#357) (@k9ert)
- Docs: Add Help Wanted section to the README (#357) (@moritzwietersheim)

# Known Issues
* The windows-binary is showing the the wrong version v0.7.2 even though it is indeed v0.8.0 (#407)</summary>
    <title>cryptoadvance/specter-desktop: v0.8.0</title>
    <updated>2020-09-19T11:08:54Z</updated>
    <dc:date>2020-09-19T11:08:54Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v5.5.92</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v5.5.92"/>
    <summary>v5.5.9
=======

* ADD: Real time fees
* FIX: broken LN -&gt; manage funds -&gt; refill
* FIX: camera wont scan QR with airgapped HW wallet flow
* FIX: Refresh from notification
* FIX: transaction not updating on refresh
* FIX: textAlign: right for custom fee in CPFP/RBF form
* FIX: set default fee in CPFP/RBF fee-selection component
* FIX: update recalculate fee on send screen with custom sat/byte fee rate
* FIX: broken sendMAX if units are changed several times
* FIX: validation allows user to create transaction even without valid address &amp; amount
* FIX: Only send wallets to watch app if installed
* FIX: Send Max not working
* FIX: Reorder screen is broken


v5.5.8
======

* ADD: Split for large devices
* ADD: Export file option
* ADD: Arabic, Slovenian &amp; Hebrew language
* ADD: KES, NGN, TWD Fiat
* FIX: After broadcast, value of sent transaction is incorrect
* FIX: transaction time when using ElectrumPersonalServer
* FIX: some ElectrumPersonalServer txs stay unconfirmed
* FIX: Fixed dark/light theme switch
* FIX: updated languages pt_BR, pt_PT, es_ES, sl_SI, de_DE, fr_FR, cs_CZ, ja_JP, it, ru, he
* FIX: create-ln-invoice - button is not blocked, which can lead to multiple invoices created
* FIX: If user has approved notifications, send hash from watch
* FIX: If Camera not authorized, show Alert.
* FIX: Only show direct export
* FIX: better handling of errors from HodlHodl
* FIX: Safello buy-bitcoin flow
* FIX: Request location authorization for HodlHodl
* FIX: Settings|Network|Lightning Settings fails input for leading or trailing blank
* FIX: show Import file option
* FIX: Background had wrong color during loading phase
* REF: speeded up large wallets (&gt;3k txs)
* REF: speedup onchain wallet creation


v5.5.7
======

* ADD: Split for large devices
* ADD: Export file option
* ADD: Slovenian &amp; Hebrew language
* ADD: KES, NGN, TWD Fiat
* FIX: After broadcast, value of sent transaction is incorrect
* FIX: transaction time when using ElectrumPersonalServer
* FIX: some ElectrumPersonalServer txs stay unconfirmed
* FIX: Fixed dark/light theme switch
* FIX: updated languages pt_BR, pt_PT, es_ES, sl_SI, de_DE, fr_FR, cs_CZ, ja_JP, it, ru, he
* FIX: create-ln-invoice - button is not blocked, which can lead to multiple invoices created
* FIX: If user has approved notifications, send hash from watch
* FIX: If Camera not authorized, show Alert.
* FIX: Only show direct export
* FIX: better handling of errors from HodlHodl
* FIX: Safello buy-bitcoin flow
* FIX: Request location authorization for HodlHodl
* FIX: Settings|Network|Lightning Settings fails input for leading or trailing blank
* FIX: show Import file option
* FIX: Background had wrong color during loading phase
* REF: speeded up large wallets (&gt;3k txs)
* REF: speedup onchain wallet creation</summary>
    <title>BlueWallet/BlueWallet: v5.5.92</title>
    <updated>2020-09-18T10:29:18Z</updated>
    <dc:date>2020-09-18T10:29:18Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.7.3-pre3</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v0.7.3-pre3"/>
    <summary>THIS IS A PRE-RELEASE. Don't use it if you don't have a reason to.</summary>
    <title>cryptoadvance/specter-desktop: v0.7.3-pre3</title>
    <updated>2020-09-18T09:47:19Z</updated>
    <dc:date>2020-09-18T09:47:19Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.11.1-beta.rc3</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.11.1-beta.rc3"/>
    <summary>This marks the first minor release in the `v0.11.x` series! This release contains no breaking changes, and no database migrations. Instead this release bundles a number of reliability improvements, some macaroon upgrades, and a change to make our version our anchor commitments spec compliant amongst several other chagnes. 

# Database Migrations
This release contains no database migrations. 

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.11.1-beta.rc3.txt` and `manifest-v0.11.1-beta.rc3.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.11.1-beta.rc3.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.11.1-beta.rc3.txt'
gpg: Signature made Tue Sep 15 19:13:32 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Timestamp 

From this new version onwards, in addition time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: ` manifest-v0.11.1-beta.txt.sig.ots` and `manifest-v0.11.1-beta.txt.ots`. 

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-v0.11.1-beta.txt.ots
ots verify manifest-v0.11.1-beta.txt.sig.ots
```

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved. The release binaries are compiled with `go1.14.7`, which is required by verifiers to arrive at the same ones. They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.11.1-beta.rc3
gpg: Signature made Tue Sep 15 18:55:00 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming that `vendor.tar.gz` and `lnd-source-v0.11.1-beta.rc3.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.11.1-beta.rc3.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.11.1-beta&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.11.1-beta&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes (WIP)

## Wumbo Soft Limit 

[`lnd` now has a soft-limit of 10 BTC for wumbo channels](https://github.com/lightningnetwork/lnd/pull/4567), when they're enabled. This limit can be reduced by specifying the new `--maxchansize` command line flag. This new flag allows node operators to better control their exposure to very large channels, while still allowing channels above the prior pre-wumbo limit. 

## Healthchecks
This release contains a new health checks subsystem which periodically runs a set of health checks and requests that lnd gracefully shutdown if the check fails. The following health checks are implemented:
* Chain backend: lnd requires access to a bitcoin backend, and may be at risk of losing funds if it loses its connection to the chain. A health check which periodically queries the chain backend for the best block is added, and enabled by default.
* Disk space: lnd needs disk space to update its database with operational data. A disk space health check which will request shutdown if available disk space falls below a threshold percentage has been added, but is disabled by default to ensure that this check does affect any existing deployments (particularly mobile). 

Both of these checks are configurable, and the following options can be set in the `healtcheck.chainbackend` and `healthcheck.diskspace` config groups:
* Interval: how often the check should be run
* Attempts: the number of attempts we allow the check to fail before we request shutdown; this value can be set to 0 to disable a check. 
* Timeout: the amount of time we allow a check to take before failing it due to timeout
* Backoff: the amount of time we backoff between failed checks

## Anchor channels
The experimental `anchor channel` type introduced in [lnd v0.10.0](https://github.com/lightningnetwork/lnd/releases/tag/v0.10.0-beta) has now been finalized in the [BOLT spec](https://github.com/lightningnetwork/lightning-rfc/pull/688), and this release makes the lnd implementation compatible with these changes. If you already have channels of the previous type you can still update. The only thing you must be aware is that cooperative close will fail until your channel party also update to a spec compliant implementation. 

Note that this channel type still remains experimental.

## Channel Configuration 

[A new flag has been added to allow node operators to limit the total number of HTLCs they'll allow to exist on &quot;their side&quot;](https://github.com/lightningnetwork/lnd/pull/4527) of the commitment. In the future, we may lower this default in order to mitigate certain &quot;fee siphoning&quot; attacks that exist with high fee rates and a large number of HTLCs. Users can set this new value to control the value used for all _newly created channels_ 
using the following flag: `--default-remote-max-htlcs`. 

## RPC Server

[The `WalletUnlocker` proxy now exposes CORS options like the rest of the REST proxy](https://github.com/lightningnetwork/lnd/pull/4551). 

[A new flag has been added to `lnd` which allows TLS certs to be generated without leaking sensitive data](https://github.com/lightningnetwork/lnd/pull/4421) such as certain IP address information. 

[The existing PSBT funding flow has been modified to accept a raw transaction during the `Finalize` step](https://github.com/lightningnetwork/lnd/issues/4330). This makes our workflow more compatible with certain wallets like Electrum. Additionally, our flow is now compatible with wallet's that have implemented mandatory measures to mitigate certain signing fault attacks. 

## Macaroons 

### Granular Method Macaroons 

[A series of new calls to enable _granular_ macaroon access has landed in this new version](https://github.com/lightningnetwork/lnd/pull/4463). These new calls allow users to bake a macaroon with a specific _method call URI_. In other words, macaroons can now be created that only allow access to a specific set of RPC calls. As an example, it's now possible to create a macaroon that only lets a user obtain the current snapshot of the graph _and nothing more_. 

A new local CLI command: `lncli listpermissions`, allows one to view all the current permissions available when baking a macaroon. 

If we wanted to make a macaroon that _only_ allowed access to `GetInfo` and `GetVersion, then we'd execute the following command: 
```
lncli bakemacaroon uri:/lnrpc.Lightning/GetInfo uri:/verrpc.Versioner/GetVersion
```

A new CLI command `lncli printmacaroon` has also been added that shows what permissions an already baked macaroon contains.

For more information on this new feature, [check out the updated set of docs on macaroons](https://github.com/guggero/lnd/blob/4996b28dabd71854b15f235ee1314c0b2242634a/macaroons/README.md). 

### Custom Macaroon Validators 

[When initializing `lnd`, it's now possible to register a custom macaroon validator for a sub-server](https://github.com/lightningnetwork/lnd/pull/4464). This allows certain components to be unbundled, yet still retain lnd's primary RPC server interface for macaroon validation. 

## Bug Fixes

[A bug has been fixed that would at times cause `lnd` to crash](https://github.com/lightningnetwork/lnd/pull/4620) due to an edge case in the logic within the `ChainNotifier` sub-server. 

[A bug has been fixed in the routerrpc server](https://github.com/lightningnetwork/lnd/pull/4596) that would previously cause it to crash when given bad input. 

The full list of changes since `v0.11.0-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.11.0-beta...v0.11.1-beta.rc3

# Contributors (Alphabetical Order)
Carla Kirk-Cohen
Calvin Zachman 
Conner Fromknecht 
Graham Krizek 
Johan T. Halseth 
Olaoluwa Osuntokun 
Oliver Gugger 
Wilmer Paulino 
</summary>
    <title>lightningnetwork/lnd: v0.11.1-beta.rc3</title>
    <updated>2020-09-18T03:03:04Z</updated>
    <dc:date>2020-09-18T03:03:04Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.3.9</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.3.9"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This release brings auto-confirmation for Monero trades, makes usernames required for Revolut payments (to reduce disputes, based on mediator feedback), and improves connectivity within the network. It also improves reliability, please update to this version to avoid network issues!

### DAO
- [Move merit and stake column to the right](https://github.com/bisq-network/bisq/pull/4402)
- [Tweak a few DAO bonded role names in strings file](https://github.com/bisq-network/bisq/pull/4483)

### UI
- [Fix intermittent blank price cells in offer book view](https://github.com/bisq-network/bisq/pull/4420)
- [Improve warning message regarding insufficient BSQ](https://github.com/bisq-network/bisq/pull/4440)
- [Add more detailed network statistics](https://github.com/bisq-network/bisq/pull/4435)
- [Only show signing state if signing for payment method is required](https://github.com/bisq-network/bisq/pull/4396)

### Trading
- [Add auto-confirm feature for Monero](https://github.com/bisq-network/bisq/pull/4458)
- [Add support for user name for Revolut accounts](https://github.com/bisq-network/bisq/pull/4453)
- [Add check for option trade for dispute cases](https://github.com/bisq-network/bisq/pull/4451)
- [Fix null pointer in case if selectedMarketPrice is null](https://github.com/bisq-network/bisq/pull/4450)
- [Reload dispute layout on reopen](https://github.com/bisq-network/bisq/pull/4438)
- [Improve dispute views](https://github.com/bisq-network/bisq/pull/4446)
- [Update GUI labels to reflect multiple rate providers](https://github.com/bisq-network/bisq/pull/4406)
- [Fix bug with all mobile notifications for disputes are sent at startup.](https://github.com/bisq-network/bisq/pull/4475)
- [Remove offer from takers offerbook after take offer is completed](https://github.com/bisq-network/bisq/pull/4487)
- [Remove 'monero:' prefix when adding a XMR account](https://github.com/bisq-network/bisq/pull/4480)

### Reliability
- [Optimize application shutdown](https://github.com/bisq-network/bisq/pull/4410)
- Increase timeouts: [1](https://github.com/bisq-network/bisq/pull/4424), [2](https://github.com/bisq-network/bisq/pull/4521)
- [Revert usage of caffeinate on OSX](https://github.com/bisq-network/bisq/pull/4407)
- [Make moving average code more safe](https://github.com/bisq-network/bisq/pull/4529)

### Network
- [Filter improvements](https://github.com/bisq-network/bisq/pull/4460)
- [Bundle messages at broadcast](https://github.com/bisq-network/bisq/pull/4436)
- [Tweak seednode bitcoin.conf, remove timeout, separate testnet block](https://github.com/bisq-network/bisq/pull/4447)
- [Improve restarting of seednodes](https://github.com/bisq-network/bisq/pull/4445)
- [Reduce seednode maxconnections setting from 50 to 40 in bisq.env](https://github.com/bisq-network/bisq/pull/4425)
- [Add mempool.bisq.services explorer and mempool fee estimation provider](https://github.com/bisq-network/bisq/pull/4437)
- [Add mempool.ninja to pricenodes as 3rd mempool fee estimation backend](https://github.com/bisq-network/bisq/pull/4413)
- [Update all Pricenodes with new Tor V3 onions](https://github.com/bisq-network/bisq/pull/4403)
- [Add new Monero Explorer node77.monero.wiz.biz with onion](https://github.com/bisq-network/bisq/pull/4488)
- [Update old Bisq Explorer URLs with new Mempool Explorer URLs, tweak strings](https://github.com/bisq-network/bisq/pull/4501)

### Development
- [Add option to use different css for dev mode](https://github.com/bisq-network/bisq/pull/4415)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.3.9.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.3.9.jar`
The output need to match the value from the Bisq-1.3.9.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.3.9.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Cleanup tool for saved trades that failed market price check

With this release we are also shipping a cleanup tool (Bisq-cleanup-trades*). It will remove corrupt trade entries added due to bug https://github.com/bisq-network/bisq/issues/2924. Install and run once, it will shut down automatically, then install version 1.3.9 or later. You can verify the binary the same way as you do with the Bisq application.</summary>
    <title>bisq-network/bisq: v1.3.9</title>
    <updated>2020-09-16T14:36:28Z</updated>
    <dc:date>2020-09-16T14:36:28Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.11.1-beta.rc2</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.11.1-beta.rc2"/>
    <summary>This marks the first minor release in the `v0.11.x` series! This release contains no breaking changes, and no database migrations. Instead this release bundles a number of reliability improvements, some macaroon upgrades, and a change to make our version our anchor commitments spec compliant amongst several other chagnes. 

# Database Migrations
This release contains no database migrations. 

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-v0.11.1-beta.rc2.txt` and `manifest-v0.11.1-beta.rc2.txt.sig` are in the current directory) with:

```
gpg --verify manifest-v0.11.1-beta.rc2.txt.sig
```

You should see the following if the verification was successful:

```
gpg: assuming signed data in 'manifest-v0.11.1-beta.rc2.txt'
gpg: Signature made Tue Sep 15 19:13:32 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Timestamp 

From this new version onwards, in addition time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: ` manifest-v0.11.1-beta.txt.sig.ots` and `manifest-v0.11.1-beta.txt.ots`. 

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-v0.11.1-beta.txt.ots
ots verify manifest-v0.11.1-beta.txt.sig.ots
```

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved. The release binaries are compiled with `go1.14.7`, which is required by verifiers to arrive at the same ones. They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.11.1-beta.rc2
gpg: Signature made Tue Sep 15 18:55:00 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming that `vendor.tar.gz` and `lnd-source-v0.11.1-beta.rc2.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.11.1-beta.rc2.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.11.1-beta&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.11.1-beta&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes (WIP)

## Wumbo Soft Limit 

[`lnd` now has a soft-limit of 10 BTC for wumbo channels](https://github.com/lightningnetwork/lnd/pull/4567), when they're enabled. This limit can be reduced by specifying the new `--maxchansize` command line flag. This new flag allows node operators to better control their exposure to very large channels, while still allowing channels above the prior pre-wumbo limit. 

## Healthchecks
This release contains a new health checks subsystem which periodically runs a set of health checks and requests that lnd gracefully shutdown if the check fails. The following health checks are implemented:
* Chain backend: lnd requires access to a bitcoin backend, and may be at risk of losing funds if it loses its connection to the chain. A health check which periodically queries the chain backend for the best block is added, and enabled by default.
* Disk space: lnd needs disk space to update its database with operational data. A disk space health check which will request shutdown if available disk space falls below a threshold percentage has been added, but is disabled by default to ensure that this check does affect any existing deployments (particularly mobile). 

Both of these checks are configurable, and the following options can be set in the `healtcheck.chainbackend` and `healthcheck.diskspace` config groups:
* Interval: how often the check should be run
* Attempts: the number of attempts we allow the check to fail before we request shutdown; this value can be set to 0 to disable a check. 
* Timeout: the amount of time we allow a check to take before failing it due to timeout
* Backoff: the amount of time we backoff between failed checks

## Anchor channels
The experimental `anchor channel` type introduced in [lnd v0.10.0](https://github.com/lightningnetwork/lnd/releases/tag/v0.10.0-beta) has now been finalized in the [BOLT spec](https://github.com/lightningnetwork/lightning-rfc/pull/688), and this release makes the lnd implementation compatible with these changes. If you already have channels of the previous type you can still update. The only thing you must be aware is that cooperative close will fail until your channel party also update to a spec compliant implementation. 

Note that this channel type still remains experimental.

## Channel Configuration 

[A new flag has been added to allow node operators to limit the total number of HTLCs they'll allow to exist on &quot;their side&quot;](https://github.com/lightningnetwork/lnd/pull/4527) of the commitment. In the future, we may lower this default in order to mitigate certain &quot;fee siphoning&quot; attacks that exist with high fee rates and a large number of HTLCs. Users can set this new value to control the value used for all _newly created channels_ 
using the following flag: `--default-remote-max-htlcs`. 

## RPC Server

[The `WalletUnlocker` proxy now exposes CORs options like the rest of the REST proxy](https://github.com/lightningnetwork/lnd/pull/4551). 

## Macaroons 

### Granular Method Macaroons 

[A series of new calls to enable _granular_ macaroon access has landed in this new version](https://github.com/lightningnetwork/lnd/pull/4463). These new calls allow users to bake a macaroon with a specific _method call URI_. In other words, macaroons can now be created that only allow access to a specific set of RPC calls. As an example, it's now possible to create a macaroon that only lets a user obtain the current snapshot of the graph _and nothing more_. 

A new local CLI command: `lncli listpermissions`, allows one to view all the current permissions available when baking a macaroon. 

If we wanted to make a macaroon that _only_ allowed access to `GetInfo` and `GetVersion, then we'd execute the following command: 
```
lncli bakemacaroon uri:/lnrpc.Lightning/GetInfo uri:/verrpc.Versioner/GetVersion
```

For more information on this new feature, [check out the updated set of docs on macaroons](https://github.com/guggero/lnd/blob/4996b28dabd71854b15f235ee1314c0b2242634a/macaroons/README.md). 

### Custom Macaroon Validators 

[When initializing `lnd`, it's now possible to register a custom macaroon validator for a sub-server](https://github.com/lightningnetwork/lnd/pull/4464). This allows certain components to be unbundled, yet still retain lnd's primary RPC server interface for macaroon validation. 

## Bug Fixes

[A bug has been fixed that would at times cause `lnd` to crash](https://github.com/lightningnetwork/lnd/pull/4620) due to an edge case in the logic within the `ChainNotifier` sub-server. 

[A bug has been fixed in the routerrpc server](https://github.com/lightningnetwork/lnd/pull/4596) that would previously cause it to crash when given bad input. 

The full list of changes since `v0.11.0-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.11.0-beta...v0.11.1-beta.rc2

# Contributors (Alphabetical Order)
Carla Kirk-Cohen
Calvin Zachman 
Conner Fromknecht 
Graham Krizek 
Johan T. Halseth 
Olaoluwa Osuntokun 
Oliver Gugger 
Wilmer Paulino 
</summary>
    <title>lightningnetwork/lnd: v0.11.1-beta.rc2</title>
    <updated>2020-09-16T02:42:26Z</updated>
    <dc:date>2020-09-16T02:42:26Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ElementsProject/lightning/releases/tag/v0.9.1</id>
    <link href="https://github.com/ElementsProject/lightning/releases/tag/v0.9.1"/>
    <summary>We're pleased to announce the 0.9.1 release of c-lightning, named by Jon Griffiths.

This is a significant release with major bugfixes to multi-part payments and various notable speedups and improvements across the board.

**Did you know**: c-lightning deprecates features with 6 months warning, and you can set `allow-deprecated-apis=false` to test?

## Highlights for Users

* The sending of multi-part payments has seen a lot of work, covering more corner cases and generally becoming much more robust.
* New official plugins create commands `multiwithdraw` and `multifundchannel` to easily produce a single transaction which does more than  one thing; these use the PSBT plumbing created for v0.9.0.
* We produce far less log spam when log-level is set to `debug`, so if you've avoided setting that before, I recommend trying now.
* Startup checks that bitcoind is the correct version, and relays transactions
* Builtin plugins are now nominated as *important*, and you can nominate others as important too.  The daemon will stop if these fail.
* You can now build a postgres-only installation, without sqlite3.

## Highlights for the Network

* Our invoices now supply more than one routehint if we think you'll need to use multi-part-payments.
* We prune channels which are not updated in both directions every 2 weeks.
* Our default CTLV expiry has increased to 34 blocks, or 18 if we're the final node, as per updated specification recommendations (https://github.com/lightningnetwork/lightning-rfc/pull/785)

## Highlights for Developers

 * PSBT APIs fleshed out with `utxopsbt` and locktime arguments.
 * Plugins can easily mark commands and options deprecated.
 * The new `channel_state_changed` notification lets plugins easily track channel behavior.

More details can be found at https://github.com/ElementsProject/lightning/blob/v0.9.1/CHANGELOG.md

Thanks to everyone for their contributions and bug reports; please keep them coming.

Since 0.9.0, we've had 391 commits commits from 15 different authors.
A special thanks goes to the 3 first time contributors:

 * Matt Whitlock @whitslack 
 * Sergi Delgado Segura @sr-gi 
 * Moller40 @Moller40 

Cheers,
Christian, Rusty, ZmnSCPxj, and Lisa
</summary>
    <title>ElementsProject/lightning: v0.9.1</title>
    <updated>2020-09-15T20:20:19Z</updated>
    <dc:date>2020-09-15T20:20:19Z</dc:date>
  </entry>
  <dc:date>2021-01-16T07:01:24+00:00</dc:date>
</feed>