<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"
  xmlns:dc="http://purl.org/dc/elements/1.1/">
  <author>
    <name>flip_btc</name>
  </author>
  <id>https://release-tracker.b.tc/</id>
  <title>Bitcoin Projects Release Tracker</title>
  <updated>2021-05-08T15:44:28+00:00</updated>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.6.4</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.6.4"/>
    <summary>This is a follow-up release that updates a [mempool explorer address](https://github.com/bisq-network/bisq/pull/5453) and [filters out banned seednode address with a wrong format](https://github.com/bisq-network/bisq/pull/5469).

For more details please see https://github.com/bisq-network/bisq/milestone/58

Here are the release notes from v1.6.3:

## Release notes
This release ships the remaining functionality to create BSQ SegWit transactions to save on mining fees. You can also now easily create copies of existing (and past) offers. This release also leverages a new build system using an up-to-date Java runtime (Java 15) and UI library (JavaFX 15) that produces binaries that should be more reliable. And as always...there are many bug fixes and refinements. ​

### Improvements
- [Wallet changes for SegWit BSQ implementation](https://github.com/bisq-network/bisq/pull/5109)
- [Upgrade Java, JavaFX and binary packaging](https://github.com/bisq-network/bisq/pull/5431)
  - Get rid of macOS security warnings and unnecessary key logging permission request
  - Getting LTS support (security fixes,...) for upgrading to Java 11 for compilation and Java 15 for runtime
  - Fix various UI issues on certain OSes due JavaFX upgrade to v15
- [Functionality to duplicate an offer](https://github.com/bisq-network/bisq/pull/5423)
- [Add custom withdrawal transaction fee options on Send funds (BTC)](https://github.com/bisq-network/bisq/pull/5312)
- [Message sign verify functionality compatible with Bitcoin core &amp; electrum](https://github.com/bisq-network/bisq/pull/5375)
- [Show a SPV resync suggestion if trade remains unconfirmed for 3 hours or more](https://github.com/bisq-network/bisq/pull/5427)
- [Allow Revolut username to be minimum 3 characters](https://github.com/bisq-network/bisq/pull/5425)
- [Disputes UI improvements](https://github.com/bisq-network/bisq/pull/5370)
- [Hide unnecessary bank id in offer details](https://github.com/bisq-network/bisq/pull/5234)
- [Tweak wording for takeOffer.fundsBox.isOfferAvailable](https://github.com/bisq-network/bisq/pull/5402)
- [CashByMail show terms and conditions upon taking an offer](https://github.com/bisq-network/bisq/pull/5399)
- [Add BTC node wubwzaadboxwiffa.onion](https://github.com/bisq-network/bisq/pull/5397)

### Bug fixes
- [Wait for AckMessage before completing BuyerSendCounterCurrencyTransferStartedMessage task](https://github.com/bisq-network/bisq/pull/5401)
- [Fix shutdown persistence issue in Seednode](https://github.com/bisq-network/bisq/pull/5388)
- [Handle rounding of infinite Doubles](https://github.com/bisq-network/bisq/pull/5374)

### API
- [Update apitest docs for bitcoin-core v0.21 compatibility](https://github.com/bisq-network/bisq/pull/5421)
- [Adjust to changing minimum tx fee rates](https://github.com/bisq-network/bisq/pull/5420)
- [Complete API support for BSQ/BTC trade pair](https://github.com/bisq-network/bisq/pull/5412)
- [Add api method createcryptopaymentacct](https://github.com/bisq-network/bisq/pull/5356)
- [Provide more offer &amp; contract detail to CLI](https://github.com/bisq-network/bisq/pull/5357)

### Development &amp; Documentation
- [Generate more than 1 block(regtest)](https://github.com/bisq-network/bisq/pull/5355)
- [docs/build.md: Emphasize JDK requirements + formatting](https://github.com/bisq-network/bisq/pull/5403)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.6.4.dmg)

## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/bisq/bin/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.6.4.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Credits

Thanks to everyone who directly contributed to this release:

- @BtcContributor 
- @cd2357 
- @devinbileck 
- @ghubstan
- @huey735 
- @jmacxx 
- @maxim-belkin 
- @ripcurlx 
- @sqrrm 
- @wallclockbuilder
- @wiz 

A special thanks to our first time contributor:

- @maxim-belkin :
   - [Tweak wording for takeOffer.fundsBox.isOfferAvailable](https://github.com/bisq-network/bisq/pull/5402)
   - [docs/build.md: Emphasize JDK requirements + formatting](https://github.com/bisq-network/bisq/pull/5403)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.6.4</title>
    <updated>2021-05-06T18:14:27Z</updated>
    <dc:date>2021-05-06T18:14:27Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/rust-bitcoin/rust-lightning/releases/tag/v0.0.14</id>
    <link href="https://github.com/rust-bitcoin/rust-lightning/releases/tag/v0.0.14"/>
    <summary></summary>
    <title>rust-bitcoin/rust-lightning: v0.0.14</title>
    <updated>2021-05-04T02:15:42Z</updated>
    <dc:date>2021-05-04T02:15:42Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin-s/bitcoin-s/releases/tag/v0.6.0</id>
    <link href="https://github.com/bitcoin-s/bitcoin-s/releases/tag/v0.6.0"/>
    <summary># v0.6.0 - Javascript!

## Executive Summary

This release support [scalajs](https://www.scala-js.org/) for both the `crypto` and `core` module. You can now use these modules from javascript.

We now support docker for our oracleServer and appServer projects.
Follow these links for docker builds for [`appServer`](https://bitcoin-s.org/docs/next/applications/server#docker-configuration) and [`oracleServer`](https://bitcoin-s.org/docs/next/oracle/build-oracle-server#docker-configuration)

We support the latest bitcoind rpc client (`0.21.1`) that has the taproot activation code baked into it.

Our libsecp256k1 pre-compiled binaries now support `osx_arm64` which makes them compatible with the new M1 chip from Apple.

Finally, we had to re-write the git history for this release due to #2830 . This means previous commits have been re-written.


##  Contributors

   101  Chris Stewart
    49  benthecarman
    44  Scala Steward
     6  Nadav Kohen
     6  rorp
     2  Aris
     1  saguywalker

## Running Bitcoin-S

If you want to run the standalone server binary, after verifying gpg signatures, you
can `unzip bitcoin-s-server-0.6.0.zip` and then run it with `./bin/bitcoin-s-server` to start the node. You will need to
configure the node properly first, you can find example
configurations [here](https://bitcoin-s.org/docs/config/configuration#example-configuration-file).

You can then unzip the `bitcoin-s-cli-0.6.0.zip` folder and start using the `bitcoin-s-cli` like this:

```bashrc
./bin/bitcoin-s-cli --help
Usage: bitcoin-s-cli [options] [&lt;cmd&gt;]

  -n, --network &lt;value&gt;    Select the active network.
  --debug                  Print debugging information
  --rpcport &lt;value&gt;        The port to send our rpc request to on the server
  -h, --help               Display this help message and exit
```

For more information on what commands `bitcoin-s-cli` supports check the documentation, here is where to
start: https://bitcoin-s.org/docs/next/applications/server#server-endpoints

## Verifying signatures

This release is signed with [Chris's signing key](https://bitcoin-s.org/docs/next/security#disclosure) with
fingerprint `339A49229576050819083EB3F99724872F822910`

To do the verification, first hash the executable using `sha256sum`. You should check that the result is listed in
the `SHA256SUMS.asc` file next to its file name. After doing that you can use `gpg --verify` to authenticate the
signature.

Example:

```
$ sha256sum bitcoin-s-server-0.6.0.zip
48585b6cb0e4ec29773bde619486cadd5fef6c0d480df54520bb52bea2f678b6  bitcoin-s-server-0.6.0.zip
$  gpg --verify SHA256SUMS.asc
gpg: Signature made Thu 04 Feb 2021 12:49:59 PM CST
gpg:                using RSA key 339A49229576050819083EB3F99724872F822910
gpg: Good signature from &quot;Chris Stewart &lt;stewart.chris1234@gmail.com&gt;&quot; [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 339A 4922 9576 0508 1908  3EB3 F997 2487 2F82 2910
```

Or you can verify all binaries at once with the following commands:

```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
bitcoin-s-bundle-0.6.0.zip: OK
bitcoin-s-cli-0.6.0.zip: OK
bitcoin-s-cli-x86_64-apple-darwin: OK
bitcoin-s-cli-x86_64-pc-linux: OK
bitcoin-s-cli-x86_64-pc-win32.exe: OK
bitcoin-s-gui-0.6.0.zip: OK
bitcoin-s-oracle-server-0.6.0.zip: OK
bitcoin-s-server-0.6.0.zip: OK
```

### Website

https://bitcoin-s.org/

### Releases

https://repo1.maven.org/maven2/org/bitcoin-s/

#### Snapshot releases

https://oss.sonatype.org/content/repositories/snapshots/org/bitcoin-s/

### New modules

We added a few new modules in the 0.6. We will provide brief descriptions for
the new modules below.

#### CoreJS &amp; CryptoJS

This are scalajs compatible modules for our `crypto` and `core` projects.
This means that you can now use the `crypto` and `core` modules in both
the browser and nodejs runtimes.

#### TestkitCore

We split `testkit` into two modules this release. Now `testkitcore` is scalajs
compatible, while `testkit` still takes in heavier weight JVM dependencies. `testkitcore` is
used to test the scalajs projects like `cryptoJS` and `coreJS`.

c6c4e83e9eb Remove logging from testkit core (#2813)

1959495cec2 Add testkit-core module (#2726)

#### Lnd rpc client

This is a new lnd rpc client for the bitcoin-s project. You can now interact with a lnd daemon
using bitcoin-s.

Not all lnd rpc functions are implemented as of this release.

8ec93c66322 Add protoc exception for apples new chip arch. This requires protoc to be built manually as they do not natively ship m1 support yet (#3013)

b874c1c54db Add Lnd macaroon to GRPC client settings (#2996)

07e0b19ec63 Add GetTransactions funciton to lnd (#2959)

be14de459ed Fix lnd build warning (#2899)

5310efc5aa0 Fix parsing comments in LndConfig (#2864)

825024fa1a0 Add sendouputs function to lnd rpc (#2858)

4055de7690f Inital LND rpc with some tests (#2836)

#### AsyncUtil

This is basic async functionality that is compatible with scalajs. This is used by `testkitcore`
to test async code.

65cb0d16155 Move tests out of bitcoindRpcTest that belong in async-utils (#2796)

e06c9e44cc2 2021 03 09 async utils tests (#2781)

7a068ac036b 2021 02 25 async utils (#2725)

#### Suredbits Oracle Explorer Client

This is an implementation of our API for the oracle server. You can now use this to
post announcements, and attestations to the oracle explorer. For more information
on the API please see the [docs](https://gist.github.com/Christewart/a9e55d9ba582ac9a5ceffa96db9d7e1f).

eab5e51f34f Fix ExplorerEnv from string (#2968)

7b600bb5baf Add get oracle name to explorer client (#2969)

3916a0b58e5 2021 04 07 issue 2875 (#2879)

ac495647d9e Add website url to ExplorerEnv (#2868)

7968b234b77 Rework oracle explorer client to use new api paths (#2866)

a4454e83a18 Add helper functions for hashing annoucements for SbExplorerClient (#2861)

49b6d39ab46 Implement Oracle Explorer Client (#2838)

#### Scripts

This is a new module that provides useful scripts to run with bitcoin-s. We have two as of the
time of this writing

1. `ScanBitcoind` - scans against bitcoind with a height range. You need bitcoind connection configured in your `bitcoin-s.conf`
2. `ZipDatadir` - compresses the bitcoin-s datadir into a `.zip` file  

9ecea9f7103 2021 04 24 bitcoin s scripts (#2961)

136d6f50f9c 2021 04 19 Zip Bitcoin-s datadir (#2927)

### Existing modules 

#### App server

The primary changes in `appServer` are  api bug fixes, adding new endpoints (`estimateee`)
and using akka streams to improve efficiency when processing blocks from bitcoind.

84661bd122a Refactor BitcoinSRunner to use StartStop[Async] (#2986)

bf831ae32ec Fix lockunspent RPC (#2984)

6fbaf9f9ceb Add estimate fee cli command (#2983)

105942efa29 Use filters for bitcoind backend syncing if available (#2926)

0aa32916ab5 Implement workaround for spendinginfodb by rescanning to find missing spendingTxId (#2918)

4e1ace27069 2021 04 18 Use akka streams in BitcoindRpcBackendUtil.syncWalletToBitcoind (#2916)

b1be3347c99 Fix ZMQ Config with bitcoind backend (#2897)

#### Crypto

The primary changes in the crypto module are adding support for [ecdsa adaptor signatures](https://github.com/discreetlogcontracts/dlcspecs/pull/114)
which are a fundamental primitive discreet log contracts. 

The other major change in the crypto module is adding support for scalajs. To implement
this we decided to use [`bcrypto`](https://github.com/bcoin-org/bcrypto/) as the javascript implementation of crypto.

To do this, we now have a `CryptoRuntime` trait that gives an interface to be implemented against
for generic crypto runtimes support in bitcoin-s.

7fd9aca3047 Add Schnorr and Adaptor Secp Bindings and Update Adaptor (#2885)

c2409b46c4d Silence scalajs warnings for org.bitcoins.crypto package (#2822)

e6899b20b1f Made ECPrivateKey signing synchronous and got src compiling (#2652)

85f6ee889c1 Adaptor signatures for Scala.js (#2794)

911fca5825d Schnorr js (#2805)

78448b277c9 Revert &quot;Schnorr sigs for Scala.js (#2784)&quot; (#2802)

8e7bde0ed93 Schnorr sigs for Scala.js (#2784)

7e23eecb201 SipHash for Scala.js (#2797)

5a2f95c38e1 WIP: Implement bcrypto facades (#2743)

e59057483f0 Resturcutre cryptoTest &amp; coreTest to work with scalajs build (#2731)

5ba7b553b04 2021 02 27 dersignatureutil mv (#2730)

c90f318fd77 Refactor crypto module to be compatible with Scala.js part 1 (#2719)

b1fc575ff54 CryptoRuntime abstraction (#2658)

#### Core

This release begins incorporating discreet log contract data structures in our core module.

This module also now supports scalajs.

There are also performance improvements and bug fixes in this release for `core`

279b93f9e0d Rework P2SHScriptSignature.isStandardNonP2SH() (#2963)

a3954dbcaec 2021 04 17 spendinfodb invariant (#2912)

8b8d5dcc0ec Fix conversion from sats/vb to sats/kw (#2895)

85fb931cbac Implement BIP32Path.fromHardenedString(). (#2886)

68a82deac33 Initial DLC Templates (#2847)

fa80f36d2fb Get all of Core working with JS (#2826)

8cd481650dd Fix potential unordered nonces in announcement (#2831)

7aa3ccd9742 Attempt to find type name when parsing incorrect tlv type (#2820)

50d4e1f9698 Move hard coded test vectors from resource files into scala files (#2818)

07514e2348f Remove logging from core (#2810)

b0f7d6f26b7 Implement bech32m (#2572)

12bff309c2f Add Broadcast TxoState (#2735)

8b6c0652a23 Completely remove range event descriptors (#2764)

f322a74ab09 2021 02 21 cheap redeemscript check (#2707)

63e44974f77 2021 02 20 number byte representation (#2703)

a0476e979a2 Decrease false positive rate to avoid spurious CI failures (#2698)

b30fdf88ca1 Fix normalized string comparison (#2695)

74a30fe9b89 Optimized sigPoint computation to use non-custom secp functions (#2665)

bcd2df60518 Compute `sigPoint`s eagerly but asynchronously (#2642)

e68ffb49da7 Use specific functions for Oracle Signing version (#2659)

d1cc5e0ade5 Refactor HDCoinType to be ADT (#2657)

097fa24e586 Create ScriptFactory.isValidAsm() to standardize how check validity o… (#2629)

ea75d62571e Add number cache trait, use it in all number types (u8,u32,etc) and S… (#2627)

bbd1dbc15d2 Do cheap checks in predicates first before more expensive ones (#2628)

0d38721b3d6 Added utilities to created linear approximations of Long =&gt; Long functions (#2537)

#### Chain

Bug fixes and usage of caching of bitcoind for `chain` tests.

a27d4acd9f1 Get FilterSync test working with cached bitcoind in chainTest project (#2952)

85087b0f70d Refactoring `chain` (#2662)

#### Db commons

Unique naming of database connection pools and reduce the amount of logging.

db45ef9ca20 Name each database connection pool uniquely (#2973)

4f1f53e7ada Bump hikari logging interval to 10 minutes (#2888)

#### Fee Provider 

Small quality of live improvements. 

c7b717fa910 Allow HttpFeeRateProvider to have a specified return type (#2970)

#### Node

Some refactoring and improvements to get CI passing reliability. 

e3017fd17d7 Peer Message Receiver Refactor (#2938)

16538980e35 Fix missing super.stop() to shutdown DbAppConfig db connection pool (#2943)

7764828b3a7 Bump timeout on bind to avoid spurious ci failures hopefully (#2791)

#### Wallet

This wallet release moves all OS resources such as threads into `WalleAppConfig`. 
Now you need to call `WalletAppConfig.stop()` to free those resources.
Now you can treat the `Wallet` data structure as any old Scala/Java object rather
than having to worry about leaking resources.

There are also a variety of bug fixes and performance improvements in this release.

27afb662206 2021 04 23 issue Move rebroadcast scheduling into WalletAppConfig (#2957)

cbfbdd17bab Call .hex on all txIds and blockhashes in logs for TxProcessing (#2939)

c95c0f97069 Move wallet scheduler into WalletAppConfig (#2933)

13fc3c2b4e7 2021 04 18 Reset txo state when overwriting spendingTxId (#2919)

38fdbb33c4f Add test for tx that doesn't originate from wallet (#2932)

238c083aade 2021 04 18 wallet received txo state (#2914)

d0629486aba Wallet Rebroadcast Transactions thread (#2711)

c3c96a61c32 Reduce fee rate for spending coinbase utxos (#2815)

9494eec1b8e Move blockhash to tx table from spending info table (#2744)

bf4afd63d1a Begin re-introducing parallelism in the wallet to make everything faster (#2705)

1a2ddf6a0d6 Reduce usage of .findAll() (doesn't scale for large dbs). Now pass in… (#2706)

b63333327fb Allow implicit execution context to be passed in to RescanHandling.findMatches() &amp; RescanHandling.fetchFiltersInRange() (#2704)

a5252b20baa Bump the timeout for address queue exception test to make sure we get correct exception (#2697)

#### Secp256k1jni

libsecp256k1 natives for the new `osx_arm64` used by the m1 chip.

1339abe410e 2021 05 02 m1 secp256k1 natives (#3014)

#### Testkit

This release for testkit focuses on fixing resource leaks in the fixture code.
There were multiple places we were not shutting down threads and connection pools
through out the testkit project. 

This project also introduces the `CachedBitcoind` abstraction. Previously we would
spin up a new bitcoind for EVERY test that is ran. This is obviously inefficient.

Now we cache a bitcoind and re-use it for the entire test suite.
This improves CI reliability greatly, and reduces required resources to run our test suites.

a2911f31edf Fix race condition with BitcoindChainHandlerViaZmqTest (#2990)

38baea5e245 refactor BitcoindRpcTestUtil test methods to take ZmqConfig rather than zmqPort (#3002)

f792fb34801 Fix database pool name for postgres database connection pools (#2997)

77cd94ac41a 2021 04 27 wallet fixtures config (#2980)

85fed08c581 Reduce pg connections from 300 -&gt; 50 in test cases (#2974)

73939a15fc0 Call WalletAppConfig.stop() when destroying wallet in test fixtures (#2975)

3483a461f1b Don't wrap pg.close() in a Try and then do nothing with it, propogate the exception (#2972)

de5f7fc7f9d Reduce number of threads in postgres connection pool for tests  (#2931)

19319494cd7 2021 04 19 Cleanup after ourselves in postgres tests (#2921)

2287c6ced99 Implement caching of bitcoind in the walletTest,nodeTest, and partially bitcoindRpcTest project (#2792)

392eb316f66 Add guard for the case when listFiles returns null (#2696)

#### DLC oracle

This release makes the oracle have its own directory `$HOME/.bitcoin-s/oracle`

We also now provide the ability to delete and oracle's signatures.
This is useful for when you accidentally submit signatures for an attestment, but don't publish it anywhere.

** DELETING SIGNATURES AND RE-ATTESTING CAN BE DANGEROUS, YOU CAN LEAK YOUR PRIVATE KEY IF YOU BROADCAST THE PREVIOUS ATTESTATIONS **

3dbeac276ee Add ability to delete Oracle signatures (#2851)

2a6da6a4eae Fix DLCOracle to be Network Agnostic (#2749)

a0180884c51 Make sure DLCOracleAppConfig creates the oracle directory (#2720)

93ec7ed4cbc Change oracle db to have its own directory (#2667)

#### Oracle Server

The theme for the oracle server release is segregating 
the `oracleServer` configuration from the `appServer` configuration.

There is also simplifications and bug fixes included in this release for the oracle server.

4bf4f0a0276 Add signed outcome to `getevent` rpc, fix other small api bugs (#2757)

7aa68998f1e Correct log location and logs for oracle server (#2722)

d94a4ed87ec 2021 02 15 appserver docker (#2673)

a78de18815b Fix docs to use correct oracle server port (#2666)

931a528723a Give oracle server its own port (#2653)

86566c575d2 Simplify oracle server RPC api (#2656)

#### Bitcoind rpc

This release includes a rpc client compatible with the `0.21.1` release of bitcoin core
that includes taproot activation logic.

There are also various bug fixes included in this release.

52f609e235b Use bitcoind v0.21.1 (#3006)

e064cd77eaf Fix missing teardown code for MultiWalletRpcTest (#2946)

d726c498d07 Have BitcoindV21RpcClientTest wait for indexes to sync (#2855)

bfe7b3fb6f4 Create NativeProcessFactory, extend it in both Client.scala &amp; EclairRpcClient.scala (#2800)

5b4aac5178b Refactor starting second bitcoind in MempoolRpcTest, remove Thread.sleep (#2776)

355fc6eefc8 Wrap entire Client.getPayload() into try catch to avoid exceptions leaking (#2767)

be18b1baf27 Cache httpClient in bitcoind, rename Test.akkaHttp -&gt; Test.akkaHttpTestkit (#2702)

#### Documentation / Website

ff399457776 More release notes updates, mostly add boiler plate (#3018)

2e8790f3e5b Add descriptions for new projects (#3016)

7dc6acdce64 Add missing list resevedutxos docs (#3015)

d6f275b359d Redo release notes draft as we rewrote the git history (#3011)

93822c71ec2 Make sure call ci matrixs run on java11 (#2985)

acac751c5b1 Updated links in adaptor signature doc (#2950)

b80b039457e Lnd rpc docs (#2896)

5abf399e40a Use markdowns detail tags to collapse optional sections, remove the secp256k1 section on getting-setup.md (#2890)

bb379ecfcf4 Add docs for using CachedBitcoind (#2880)

17e088d8f0c 2021 04 07 first 0.6 release notes (#2872)

89c2e6c9a90 Add testkit-core.md (#2881)

c3e952a18b5 Add docs for getblockheader (#2811)

9b954c9c03d Make website publish work with teh latest stable version (#2766)

d03bb2d22d8 Make it clear on the getting-setup.md page that this is only for development, you can find binaries in getting-started.md (#2759)

e61e0cdb5b0 Update docs to use the latest docker image names (#2758)

b7030bb66ae 2021 02 19 dockerhub docs (#2693)

f4d0f369ec4 2021 02 10 Website fixes (#2643)

f8694eb097d Fix/typos (#2633)

593b1e2ce15 Update README to have correct latest version (#2631)

#### Build

991ce382085 Use release flag rather than target flag as that is what is intended (#2976)

4c859f1ad16 Add timeouts to our CI workflows (#2908)

c738f23e58b Fix build warnings that came with sbt 1.5.0 (#2857)

eb9b2de38b7 Enable scalajsbundler plugin on coreJS (#2853)

2554665e89e Enable publishing of scalajs artifacts (#2849)

60c1ad19196 Rework the website scaladoc aggregation and website (#2846)

a275668734c Update gitignore file with recommendations from unidoc (#2845)

00df875ec29 update Base docker image to a ubuntu buster (#2799)

49544fc7f3a Turn off parallelExecution and remove extra AsyncUtil test class (#2790)

7245eb0ec94 Update all deps that failed because of bad build (#2774)

aed21f02c7d Add fetch depth zero to everything to fix bug introduced in #2766 (#2773)

8a4739d5093 2021 03 04 fix publish pt2 (#2763)

6b4812848b8 Add new JS projects to list in build.sbt (#2761)

99c5d6e29bc Enable 'dockerUpdateLatest' option to give us the latest tag on publishing artifacts (#2752)

63e1320f527 Fix unidoc issue with scala-js modules, this now ignores them from un… (#2742)

2d25fe41abc Skip publishing of js projects (#2734)

94934e113dc Rework docker configuration to pass in a custom configuration file (#2718)

203b45c1409 Workaround for issue 2708 (#2709)

477597ea72f Set fetch-depth to 100 so we don't take forever to clone repo on ci (#2694)

56a14325e1c Get basic docker image working with oracle server (#2668)

2f85b67c3ff Add github workflow steps to publish to dockerhub (#2684)

d27f24e1908 Make sure dynver versions use '-' instead of '+' (#2681)

89745c201a8 Add --depth 100 restriction when cloning bitcoin-s repo to speed up clone time (#2674)


#### Dependencies

e7d34a9ba93 Update metrics-core to 4.1.21 (#3003)

56d177bb67a Update javafx-base, javafx-controls, ... to 17-ea+8 (#2978)

0f8903e67e1 Upgrade to scalac 2.12.13 (#2509)

e6d78c7c085 Update sbt-scoverage to 1.7.0 (#2982)

0bf6df77a59 Update scalatest + scodec deps (#2937)

7a73dc5cbb2 Update sourcecode to 0.2.6 (#2928)

0cad0edaaf5 Update metrics-core to 4.1.20 (#2958)

23d77b2f43b Update sbt to 1.5.1 (#2971)

a194adba988 Update scalafx to 16.0.0-R22 (#2942)

00efd8bccc3 Update scala-java-time to 2.2.2 (#2941)

27752062d44 Update postgresql to 42.2.20 (#2945)

27992ed37da Update sbt-mdoc to 2.2.20 (#2930)

0d546f3b65b Update javafx-base, javafx-controls, ... to 17-ea+7 (#2911)

b5b98492aae Update breeze-viz to 1.2 (#2907)

b6337b834db Bump website dependencies by running yarn update (#2884)

ce36112da22 Update akka-actor, akka-discovery, ... to 2.6.14 (#2878)

112067c905e Update metrics-core to 4.1.19 (#2877)

969dee78f6a Update javafx-base, javafx-controls, ... to 17-ea+6 (#2852)

a2628cacd13 Update scala-java-time to 2.2.1 (#2862)

89e84fff676 Update sbt to 1.5.0 (#2854)

4d2532538bb Update sourcecode to 0.2.5 (#2848)

832d9308b5c Update scalatest to 3.2.7 (#2843)

6e574931c6f Update sbt-scalajs, scalajs-compiler, ... to 1.5.1 (#2837)

703f9585efc Update scala-collection-compat to 2.4.3 (#2834)

a9ccf233661 Update sbt-mdoc to 2.2.19 (#2833)

c2e054d906b Update scodec-bits to 1.1.25 (#2835)

85ff255df3d Update akka to v10.2.4 (#2832)

2cc2da97616 Update javafx-base, javafx-controls, ... to 17-ea+5 (#2829)

c5a3b5ac3ff Update sbt-ci-release to 1.5.7 (#2819)

1daba85ddf0 Update javafx-base, javafx-controls, ... to 17-ea+3 (#2804)

fba880e5a92 Update sbt-native-packager to 1.8.1 (#2798)

77ee3f7e8da Update sbt-ci-release to 1.5.6 (#2789)

ecae07c8e1d Update javafx-base, javafx-controls, ... to 17-ea+2 (#2728)

06654f4e050 Update akka-http, akka-http-testkit to 10.1.14 (#2723)

54dc8243910 Update metrics-core to 4.1.18 (#2716)

eb24b183635 Upgrade scalac to 2.13.5 (#2713)

07488dd3f38 Update akka-actor, akka-slf4j, akka-stream, ... to 2.6.13 (#2714)

fca9e4b7d06 Update scalatest to 3.2.5 (#2687)

fe70391d0be Update sbt-bloop to 1.4.8 (#2683)

fb2e5d52e37 Update postgresql to 42.2.19 (#2686)

a19f35e6035 Update scalatest to 3.2.4 (#2677)

42f35232105 Update sbt-mdoc to 2.2.18 (#2676)

e4b0f1ff428 Update scala-collection-compat to 2.4.2 (#2670)

775aa67975c Update scodec-bits to 1.1.24 (#2671)

d929af4f9ac Update scalacheck to 1.15.3 (#2669)

0d5863b2f50 Update sbt-bloop to 1.4.7 (#2661)

a5d592ac404 Update javafx-base, javafx-controls, ... to 16-ea+7 (#2654)

19b47b8eb93 Update janino to 3.1.3 (#2559)

0c9bba8267c Update sbt-mdoc to 2.2.17 (#2632)
</summary>
    <title>bitcoin-s/bitcoin-s: v0.6.0</title>
    <updated>2021-05-03T18:51:48Z</updated>
    <dc:date>2021-05-03T18:51:48Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/phoenix/releases/tag/v1.4.11</id>
    <link href="https://github.com/ACINQ/phoenix/releases/tag/v1.4.11"/>
    <summary>## Main changes

### Display fees for pay-to-open in settings

The fees for on-the-fly channel creation is now visible at any time in settings &gt; payments options and fees

### Display swap-in fees in-view

The swap-in modal dialog has been removed and information about the swap-in feature and the fees are now displayed in-view.

## Complete list of changes

- **app**: https://github.com/ACINQ/phoenix/compare/v1.4.10...v1.4.11

## Verifying signatures

You will need `gpg` and our release signing key 7A73FE77DE2C4027. Note that you can get it:
- from our website: https://acinq.co/pgp/drouinf.asc
- from github user @sstone, a committer on eclair: https://api.github.com/users/sstone/gpg_keys

To import our signing key:
```
$ gpg --import drouinf.asc
```

To verify the release file checksums and signatures:
```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```</summary>
    <title>ACINQ/phoenix: v1.4.11</title>
    <updated>2021-05-03T13:59:24Z</updated>
    <dc:date>2021-05-03T13:59:24Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.3.10</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.3.10"/>
    <summary>Umbrel v0.3.10 is here with Taproot ready Bitcoin Core v0.21.1, the new BlueWallet Lightning app in the Umbrel App Store, and Tor connection support for BlueWallet on both iOS and Android.

If you face any difficulties while updating, please message us on Telegram: https://t.me/getumbrel

Diff: https://github.com/getumbrel/umbrel/compare/v0.3.9...v0.3.10</summary>
    <title>getumbrel/umbrel: v0.3.10</title>
    <updated>2021-05-03T11:42:46Z</updated>
    <dc:date>2021-05-03T11:42:46Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v6.1.0</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v6.1.0"/>
    <summary>**New**

- Tor support
- Hierarchy Navigator (List of addresses)
- Slip39 wallets (Shamir's Secret Sharing)
- PSBT for all HD watch-only wallets
- mempool.space as the main explorer

**Fixed**

- Complication was showing cents
- Dark mode makes text illegible
- Carousel padding and Scan button crash
- Remove leading zero when doing local currency
- QR code scanning from file doesn't work on Android
- Speeded up electrum (caching of some requests)
- Move general tools under wallet details to &quot;tools&quot; menu
- Move Privacy under General tab
- layout on invoice view
- Multsig layout fixes
- Refresh wallet if it never been done
- Easier pairing with HW wallets
- Derivation &amp; Fingerprint visible only in advanced mode

**Languages updates**

Finnish, German, Dutch, Portuguese Brazilian, Slovenian, Persian, Spanish, Polish, French, Welsh, Hebrew, Japanese, Romanian
Join us here → https://www.transifex.com/bluewallet/bluewallet

**Download**

[![Appstore](https://bluewallet.io/uploads/app-store-badge-blue.svg)](https://github.com/BlueWallet/BlueWallet/releases/download/v6.1.0/BlueWallet.6.1.1.dmg)

[![Playstore](https://bluewallet.io/uploads/play-store-badge-blue.svg)](https://github.com/BlueWallet/BlueWallet/releases/download/v6.1.0/BlueWallet-6.1.1.apk)
</summary>
    <title>BlueWallet/BlueWallet: v6.1.0</title>
    <updated>2021-05-03T07:50:27Z</updated>
    <dc:date>2021-05-03T07:50:27Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin/bitcoin/releases/tag/v0.21.1</id>
    <link href="https://github.com/bitcoin/bitcoin/releases/tag/v0.21.1"/>
    <summary>Bitcoin Core version 0.21.1 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.21.1/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.21.1.md

Preferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.
</summary>
    <title>bitcoin/bitcoin: v0.21.1</title>
    <updated>2021-05-03T01:33:04Z</updated>
    <dc:date>2021-05-03T01:33:04Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.6.3</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.6.3"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This release ships the remaining functionality to create BSQ SegWit transactions to save on mining fees. You can also now easily create copies of existing (and past) offers. This release also leverages a new build system using an up-to-date Java runtime (Java 15) and UI library (JavaFX 15) that produces binaries that should be more reliable. And as always...there are many bug fixes and refinements. ​

### Improvements
- [Wallet changes for SegWit BSQ implementation](https://github.com/bisq-network/bisq/pull/5109)
- [Upgrade Java, JavaFX and binary packaging](https://github.com/bisq-network/bisq/pull/5431)
  - Get rid of macOS security warnings and unnecessary key logging permission request
  - Getting LTS support (security fixes,...) for upgrading to Java 11 for compilation and Java 15 for runtime
  - Fix various UI issues on certain OSes due JavaFX upgrade to v15
- [Functionality to duplicate an offer](https://github.com/bisq-network/bisq/pull/5423)
- [Add custom withdrawal transaction fee options on Send funds (BTC)](https://github.com/bisq-network/bisq/pull/5312)
- [Message sign verify functionality compatible with Bitcoin core &amp; electrum](https://github.com/bisq-network/bisq/pull/5375)
- [Show a SPV resync suggestion if trade remains unconfirmed for 3 hours or more](https://github.com/bisq-network/bisq/pull/5427)
- [Allow Revolut username to be minimum 3 characters](https://github.com/bisq-network/bisq/pull/5425)
- [Disputes UI improvements](https://github.com/bisq-network/bisq/pull/5370)
- [Hide unnecessary bank id in offer details](https://github.com/bisq-network/bisq/pull/5234)
- [Tweak wording for takeOffer.fundsBox.isOfferAvailable](https://github.com/bisq-network/bisq/pull/5402)
- [CashByMail show terms and conditions upon taking an offer](https://github.com/bisq-network/bisq/pull/5399)
- [Add BTC node wubwzaadboxwiffa.onion](https://github.com/bisq-network/bisq/pull/5397)

### Bug fixes
- [Wait for AckMessage before completing BuyerSendCounterCurrencyTransferStartedMessage task](https://github.com/bisq-network/bisq/pull/5401)
- [Fix shutdown persistence issue in Seednode](https://github.com/bisq-network/bisq/pull/5388)
- [Handle rounding of infinite Doubles](https://github.com/bisq-network/bisq/pull/5374)

### API
- [Update apitest docs for bitcoin-core v0.21 compatibility](https://github.com/bisq-network/bisq/pull/5421)
- [Adjust to changing minimum tx fee rates](https://github.com/bisq-network/bisq/pull/5420)
- [Complete API support for BSQ/BTC trade pair](https://github.com/bisq-network/bisq/pull/5412)
- [Add api method createcryptopaymentacct](https://github.com/bisq-network/bisq/pull/5356)
- [Provide more offer &amp; contract detail to CLI](https://github.com/bisq-network/bisq/pull/5357)

### Development &amp; Documentation
- [Generate more than 1 block(regtest)](https://github.com/bisq-network/bisq/pull/5355)
- [docs/build.md: Emphasize JDK requirements + formatting](https://github.com/bisq-network/bisq/pull/5403)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.6.3.dmg)

## Known issues with installation 

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.6.3.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Credits

Thanks to everyone who directly contributed to this release:

- @BtcContributor 
- @cd2357 
- @devinbileck 
- @ghubstan
- @huey735 
- @jmacxx 
- @maxim-belkin 
- @ripcurlx 
- @sqrrm 
- @wallclockbuilder
- @wiz 

A special thanks to our first time contributor:

- @maxim-belkin :
   - [Tweak wording for takeOffer.fundsBox.isOfferAvailable](https://github.com/bisq-network/bisq/pull/5402)
   - [docs/build.md: Emphasize JDK requirements + formatting](https://github.com/bisq-network/bisq/pull/5403)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.6.3</title>
    <updated>2021-05-01T08:33:02Z</updated>
    <dc:date>2021-05-01T08:33:02Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/unchained-capital/caravan/releases/tag/v0.3.6</id>
    <link href="https://github.com/unchained-capital/caravan/releases/tag/v0.3.6"/>
    <summary>Maintenance release to update unchained libraries.</summary>
    <title>unchained-capital/caravan: v0.3.6</title>
    <updated>2021-05-01T01:40:34Z</updated>
    <dc:date>2021-05-01T01:40:34Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.1.0</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.1.0"/>
    <summary>See [our blog post](https://blog.btcpayserver.org/btcpay-server-1-1-0) for an overview of this new release.

### Improvements:

* Improving navigation between files and storage services and rewording info text (#2272) @rockstardev
* UI: Header and navigation improvements (#2412 #2378) @dennisreimann @dstrukt
* Plugins will be disabled in the case of an unrecoverable runtime error caused by a plugin @Kukks
* UI: Improve Lightning setup page (#2348 #2477) @dennisreimann @dstrukt
* Greenfield: Provides unconf/conf balance, keypath + address + timestamp + confirmation count of utxos @Kukks
* Add `BTCPAY_TOR_SERVICES` configuration to expose tor services via the server settings. Useful for integration with self-hosted node such as Umbrel (#2388) @Kukks @junderw
* Payment methods can be toggled directly from the update store page, rather than inside the page of each payment method (#2469) @dennisreimann
* Start separation of Coinswitch feature and Shopify integration as plugins (#2384 #2390) @Kukks 
* Greenfield: Ability to pass more query parameters to filter results of api/v1/invoices @SakerOmera
* Human friendly error if webhook or webhook delivery not found @NicolasDorier
* Add button to copy API key to clipboard (#2439) @ubolator

### New features:

* Support WebAuthN/FIDO2 as second factor @Kukks
* Can get a receive address in the wallet accepting Payjoin (without creating an invoice) @Kukks
* Can disable modification of SSH settings via the server settings to prevent escalation of privilege. (See #2468) @NicolasDorier
* Manual coin selection has a &quot;confirmed utxo&quot; filter @Kukks
* Greenfield: Can query fee rate @Kukks
* New setting for checkout: Ability to activate specific payment methods after the creation of the invoice @xpayserver @Kukks @rockstardev 

### Bug fixes:

* Fix: Clicking on &quot;Unreserve this address&quot; was not properly reflected in the UI @Kukks
* Fix: Block explorer links for signet @kristapsk
* Fix: Typo in PoS cart view (#2428) @MaxHillebrand
* Allow accessing &quot;misc/lang&quot; endpoint with Greenfield auth schemes (#2471) @bolatovumar
* Greenfield: Fix typo of webhook type OrignalDeliveryId =&gt; OriginalDeliveryId @NicolasDorier
* If the posData property of invoice metadata was not a JObject, the invoice would crash @Kukks
* If a store was created via the Greenfield API, warning signs of unconfigured stores would not appear. (Fix #2434) @bolatovumar
* Do not crash if plugin folder mismatches plugin identifier @Kukks 
* Fix notification count on mobile (#2483) @dennisreimann 
* Fix: Passing invalid query parameters or route value in the Greenfield API should returns HTTP 422 + validation details rather than empty 400. @NicolasDorier
* Greenfield: Deleting a store in the server, should delete only webhooks of this store @NicolasDorier

### Miscellaneous

* Add user id in logs when somebody logs in. @NicolasDorier
* Fix: Json type in doc API @g33kme</summary>
    <title>btcpayserver/btcpayserver: v1.1.0</title>
    <updated>2021-04-29T15:20:52Z</updated>
    <dc:date>2021-04-29T15:20:52Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.1</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.1"/>
    <summary># Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.1/Specter-Setup-v1.3.1.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.1/SpecterDesktop-v1.3.1.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.1/specter_desktop-v1.3.1-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

**Note on macOS**: The current build supports only macOS Catalina (10.15) or higher. If you'd like to run Specter on an older macOS version, you can [install Specter from Pip](https://github.com/cryptoadvance/specter-desktop#installing-specter-from-pip).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.1/specterd-v1.3.1-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.1/specterd-v1.3.1-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.1/specterd-v1.3.1-x86_64-linux-gnu.zip)

## Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.1/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @ben-kaufman's GPG key.
You can get the public key from here: [https://benkaufman.info/ben-kaufman.asc](https://benkaufman.info/ben-kaufman.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x5D27DE564153F2BD) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/5DF6A7601DB8B78EBDEC18DB5D27DE564153F2BD).
Fingerprint of the key is `5DF6 A760 1DB8 B78E BDEC  18DB 5D27 DE56 4153 F2BD`, short id: `5d27de564153f2bd`

# Release notes
- Feature: Add unconfirmed tx fees data  #1085 (benk10)
- Feature: Use RPCAuth instead of username + password #1093 (benk10)
- Feature: Return to/ cancel setup process #1091 (benk10)
- UIUX: Show user-friendly error messages when session expires #1087 (benk10)
- UIUX: Use Bitcoin icon set #1080 (benk10)
- Docs: Update faq.md #1123 (Kim Neunert)
- Docs: added build-instructions #1077 (Kim Neunert) 
- Bugfix: BitBox02 timeout issue #1090 (benk10)
- Bugfix: Fix crash if estimatesmartfee fails #1086 (benk10)
- Bugfix: typo/exception #1102 (djpnewton)
- Bugfix: #1073 #1094 (benk10)
- Bugfix: #987 #1088 (benk10)
- Bugfix: arrow down svg #1125 (benk10)
- Bugfix: del user with wallets #1126 (Stepan Snigirev)
- Bugfix: month names #1069 (Kim Neunert)
- Bugfix: truncated PDF #1095 (benk10)
- Bugfix: UI issues #1084 (benk10)
- Bugfix: using correct image for gitlab #1127 (Kim Neunert)
- Bugfix: Improve tx-table and addresses-table render performance #1122 (Will Cosgrove)
- Chore: Bump y18n from 5.0.4 to 5.0.8 in /pyinstaller/electron #1114 (dependabot[bot])
- Chore: Refactoring new device setup #1111 (benk10)
- Chore: allow python version 3.9.X after upgrade to HWI 2.0.1 #1104 (djpnewton)
- Chore: upgrade wait-on and axios #1124 (Kim Neunert)
- Chore: refactor check_methods out of specter #1106 (Kim Neunert)
- Chore: Refactor setup wizard #1120 (benk10)</summary>
    <title>cryptoadvance/specter-desktop: v1.3.1</title>
    <updated>2021-04-26T12:17:02Z</updated>
    <dc:date>2021-04-26T12:17:02Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/rootzoll/raspiblitz/releases/tag/v1.7.0</id>
    <link href="https://github.com/rootzoll/raspiblitz/releases/tag/v1.7.0"/>
    <summary>Tor by default, 64-bit base image, update apps, migration from other node projects</summary>
    <title>rootzoll/raspiblitz: v1.7.0</title>
    <updated>2021-04-25T16:07:47Z</updated>
    <dc:date>2021-04-25T16:07:47Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.3.9</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.3.9"/>
    <summary>Umbrel v0.3.9 brings up to 5x faster performance, a brand new way to troubleshoot, always online Lightning node, wider support for SSDs and enclosures, connection support for LilyWallet, bug fixes, and more.

Note: It may take up to 5 minutes for Lightning and Bitcoin Core data to appear after the update.

If you face any difficulties while updating, please message us on Telegram: https://t.me/getumbrel

Diff: https://github.com/getumbrel/umbrel/compare/v0.3.8...v0.3.9</summary>
    <title>getumbrel/umbrel: v0.3.9</title>
    <updated>2021-04-23T13:52:43Z</updated>
    <dc:date>2021-04-23T13:52:43Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/phoenix/releases/tag/v1.4.10</id>
    <link href="https://github.com/ACINQ/phoenix/releases/tag/v1.4.10"/>
    <summary>## Main changes

### Reject invoices that have already been paid

The app now checks if an invoice has already been paid before sending. This does not work if the app has been restored and the payment is not in the database anymore.

### Add information notice when the pay-to-open and swap-in features are disabled

Channel creation features involve on-chain operations and may be disabled when the mempool is congested. The app now degrades gracefully and properly informs the user, and also prevents using the swap-in feature.

Note that in that case the user is still able to receive using existing channels.

## Complete list of changes

- **app**: https://github.com/ACINQ/phoenix/compare/v1.4.9...v1.4.10

## Verifying signatures

You will need `gpg` and our release signing key 7A73FE77DE2C4027. Note that you can get it:
- from our website: https://acinq.co/pgp/drouinf.asc
- from github user @sstone, a committer on eclair: https://api.github.com/users/sstone/gpg_keys

To import our signing key:
```
$ gpg --import drouinf.asc
```

To verify the release file checksums and signatures:
```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```</summary>
    <title>ACINQ/phoenix: v1.4.10</title>
    <updated>2021-04-22T17:30:12Z</updated>
    <dc:date>2021-04-22T17:30:12Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.1-pre2</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.1-pre2"/>
    <summary>This is a Pre-release. It's mostly relevant for people who want to test the Fix for the Bitbox2 issue:
https://github.com/cryptoadvance/specter-desktop/pull/1090
</summary>
    <title>cryptoadvance/specter-desktop: v1.3.1-pre2</title>
    <updated>2021-04-20T10:29:50Z</updated>
    <dc:date>2021-04-20T10:29:50Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/phoenix/releases/tag/v1.4.9</id>
    <link href="https://github.com/ACINQ/phoenix/releases/tag/v1.4.9"/>
    <summary>## Main changes

This release fixes an issue with channels opening, where on-the-fly channel creation could timeout immediately if device's clock was off.

## Complete list of changes

- **app**: https://github.com/ACINQ/phoenix/compare/v1.4.8...v1.4.9
- **core**: https://github.com/ACINQ/eclair/compare/v0.4.9-android-phoenix...v0.4.10-android-phoenix

## Verifying signatures

You will need `gpg` and our release signing key 7A73FE77DE2C4027. Note that you can get it:
- from our website: https://acinq.co/pgp/drouinf.asc
- from github user @sstone, a committer on eclair: https://api.github.com/users/sstone/gpg_keys

To import our signing key:
```
$ gpg --import drouinf.asc
```

To verify the release file checksums and signatures:
```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```</summary>
    <title>ACINQ/phoenix: v1.4.9</title>
    <updated>2021-04-15T15:30:10Z</updated>
    <dc:date>2021-04-15T15:30:10Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.8</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.8"/>
    <summary>**New**

- RTL language support
- Allow send MAX and BATCH for all wallet types
- ANG and AWG currencies
- Show fingerprint and derivation path for HD wallets

**Fixed**

- Aezeed onchain correct zpub
- Address input QRcode denomination reset
- Currency rates loader, add LPB new rate source
- Import procedure improvements

**Languages updates**

French, Chinese (Simplified), Chinese (Traditional), Finnish, German, Dutch, Portuguese Brazilian, Greek, Indonesian, Italian, Japanese, Turkish, Polish, Persian, Romanian, Spanish and Czech .
Join us here → https://www.transifex.com/bluewallet/bluewallet

**Download**

[![Appstore](https://bluewallet.io/uploads/app-store-badge-blue.svg)](https://github.com/BlueWallet/BlueWallet/releases/download/v6.0.7/BlueWallet.6.0.7.dmg)

[![Playstore](https://bluewallet.io/uploads/play-store-badge-blue.svg)](https://github.com/BlueWallet/BlueWallet/releases/download/v6.0.7/BlueWallet-6.0.7.apk)
</summary>
    <title>BlueWallet/BlueWallet: v6.0.8</title>
    <updated>2021-04-06T08:28:57Z</updated>
    <dc:date>2021-04-06T08:28:57Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.8</id>
    <link href="https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.8"/>
    <summary># Summary

This is a trivial fix for letting our users be able to recover from 12, 15, 18, 21, 24 Recovery Words. 

# Newbie Guide

While setting up Wasabi is straightforward, even a Linux wizard with the longest beard can get stuck on the most basic tasks. Consider taking a look at the [Installation Instructions](https://docs.wasabiwallet.io/using-wasabi/InstallPackage.html) guide.

# Advanced Guide

If you want to build Wasabi from source code or update the source code check out [these instructions.](https://docs.wasabiwallet.io/using-wasabi/BuildSource.html)

From version 1.1.3 Wasabi also introduces [reproducible builds](https://reproducible-builds.org/): [Deterministic Build Guide](https://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi.Documentation/Guides/DeterministicBuildGuide.md)

Build with .NET Core 3.1.407-win-x64.

## FAQ

- **Frequently asked questions [here](https://github.com/zkSNACKs/WalletWasabi/discussions/categories/faq).**
- **Requirements?** x64, Linux, &gt;Win10, &gt;macOS 10.13.

# Release Notes

- **BugFix** https://github.com/zkSNACKs/WalletWasabi/pull/5510</summary>
    <title>zkSNACKs/WalletWasabi: v1.1.12.8</title>
    <updated>2021-04-02T08:10:11Z</updated>
    <dc:date>2021-04-02T08:10:11Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.6.2</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.6.2"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

This is a hotfix release that [fixes an issue with SPV resync introduced in v1.6.0](https://github.com/bisq-network/bisq/pull/5380) and fixes a [minor bug in the portfolio view](https://github.com/bisq-network/bisq/pull/5385) when price nodes aren't available.

For more details please see https://github.com/bisq-network/bisq/milestone/56?closed=1

Here are the release notes from v1.6.0:

## Release notes
This release ships the official beta release for the Bisq API! It has been tested on mainnet, but is still in beta, so please be careful.

Other highlights: absolute minimum deposits have now been lowered from 0.006 BTC to 0.001 BTC. Maker and taker fee transactions are now verified via mempool.space to reduce trade issues, and mediation and arbitration were improved as well. And as always, there are many bug fixes and refinements.

Also important: this release ships part of 1 of 2 for BSQ SegWit implementation. It prepares the network for handling SegWit BSQ transactions (activation block is 680300, around 2021/04/25 -- all full nodes should update to 1.6.0+ before that time). Shortly after this activation point, the wallet code (https://github.com/bisq-network/bisq/pull/5109) will be merged into master for testing so that the full BSQ SegWit update is shipped in the following release.

### DAO
- [Implement Segwit for BSQ - Step 1/2](https://github.com/bisq-network/bisq/pull/5000)

### UI
- [Update commands for mediator/refund agent registration](https://github.com/bisq-network/bisq/pull/5323)
- [Fix copy of BankName value + BranchId/BankId](https://github.com/bisq-network/bisq/pull/5231)
- [Changes &quot;Verify result&quot; to &quot;Check signature&quot;](https://github.com/bisq-network/bisq/pull/5209)
- [Fix dark mode readability of specific texts](https://github.com/bisq-network/bisq/pull/5232)
- [Fix Set Password text button](https://github.com/bisq-network/bisq/pull/5272)
- [Fix key shortcut documentation when using CMD+Y](https://github.com/bisq-network/bisq/pull/5222)
- [Replace Slack with Keybase](https://github.com/bisq-network/bisq/pull/5288)
- [Fix opening of proposal links in DAO on Windows](https://github.com/bisq-network/bisq/pull/5262)
- [Fix length check text on manual payout tool](https://github.com/bisq-network/bisq/pull/5223)
- [Fix ClassCastError in portfolio history summary popup](https://github.com/bisq-network/bisq/pull/5363)

### Trading
- [Lower min deposit to 0.001 BTC](https://github.com/bisq-network/bisq/pull/5326)
- [Add pop-up warning for trading with risky payment methods](https://github.com/bisq-network/bisq/pull/5344)
- [Verify maker &amp; taker fee transactions via Mempool lookup](https://github.com/bisq-network/bisq/pull/5160)
- [Allow default fee values in leniency checks](https://github.com/bisq-network/bisq/pull/5365)
- [Fee validation leniency using old DAO param values](https://github.com/bisq-network/bisq/pull/5347)
- [Improve portfolio history](https://github.com/bisq-network/bisq/pull/5315)
- [Add NGN as a default currency](https://github.com/bisq-network/bisq/pull/5293)
- [Add pay from BSQ wallet button](https://github.com/bisq-network/bisq/pull/5316)
- [Prevent trading when not connected to the Bitcoin network](https://github.com/bisq-network/bisq/pull/5325)
- [Fix Multiple Warnings on Enable All Offers](https://github.com/bisq-network/bisq/pull/5215)

### Wallet
- [Add coin input control](https://github.com/bisq-network/bisq/pull/5142)
- [Fix race condition in BTC sent confirmation popup](https://github.com/bisq-network/bisq/pull/5333)

### Reliability
- [Prevent persist at startup, flush at backup](https://github.com/bisq-network/bisq/pull/5280)
- [Fix mailbox bootstrap issue](https://github.com/bisq-network/bisq/pull/5267)

### Privacy
- [Upgrades Tor to v0.4.5.7](https://github.com/bisq-network/bisq/pull/5385)

### Mediation/Arbitration
- Improve chat functionality of mediation/arbitration: [1](https://github.com/bisq-network/bisq/pull/5207), [2](https://github.com/bisq-network/bisq/pull/5349)
- [Improve mediation tools / logging](https://github.com/bisq-network/bisq/pull/5206)

### API
- [Add long running api tests](https://github.com/bisq-network/bisq/pull/5303)
- [Improve takeoffer error handing](https://github.com/bisq-network/bisq/pull/5294)
- [Disambiguate payment acct json form's &quot;country&quot; field](https://github.com/bisq-network/bisq/pull/5330)
- [Improve apitest docs](https://github.com/bisq-network/bisq/pull/5328)
- [Document test harness dispute agent registration](https://github.com/bisq-network/bisq/pull/5273)
- [Avoid null pointer exception due to null fee while wrapping tx in TxInfo](https://github.com/bisq-network/bisq/pull/5302)
- [Prevent creation of new offers with incompatible payment accounts](https://github.com/bisq-network/bisq/pull/5284)
- [Fix CLI number opt validation, improve server-not-up msg](https://github.com/bisq-network/bisq/pull/5259)
- [Fix call rate metering interceptor bug](https://github.com/bisq-network/bisq/pull/5250)
- [Fix API startup's wallet.init failure when wallet is encrypted](https://github.com/bisq-network/bisq/pull/5337)
- [Improve gRPC server error logging](https://github.com/bisq-network/bisq/pull/5249)
- [Display buyer's cost in api's gettrade output](https://github.com/bisq-network/bisq/pull/5246)
- [Refactor apitest cases to use GrpcClient](https://github.com/bisq-network/bisq/pull/5244)
- [Refactor grpc stub boilerplate from CliMain to GrpcClient](https://github.com/bisq-network/bisq/pull/5240)
- [Adjust api to new minimum fee per vbyte](https://github.com/bisq-network/bisq/pull/5238)
- [Add CLI testing bot to :apitest](https://github.com/bisq-network/bisq/pull/5203)

### Development
- [Document tor upgrade steps](https://github.com/bisq-network/bisq/pull/5248)
- [Add step for signature creation for Arch Linux](https://github.com/bisq-network/bisq/pull/5239)
- [Fix typo in test](https://github.com/bisq-network/bisq/pull/5291)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.6.2.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.6.2.jar`
The output need to match the value from the Bisq-1.6.2.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.6.2.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Credits

Thanks to everyone who directly contributed to this release:

- @BtcContributor 
- @cd2357 
- @chimp1984
- @ripcurlx 
- @ghubstan
- @huey735 
- @JaredBoone
- @jmacxx 
- @wallclockbuilder 
- @sqrrm 
- @stejbac

A special thanks to our first time contributor:

- @BtcContributor:
   - [Fix Set Password text button](https://github.com/bisq-network/bisq/pull/5272)
   - [Fix opening of proposal links in DAO on Windows](https://github.com/bisq-network/bisq/pull/5262)
   - [Fix dark mode readibility of specific texts](https://github.com/bisq-network/bisq/pull/5232)
   - [Fix copy of BankName value + BranchId/BankId](https://github.com/bisq-network/bisq/pull/5231)
   - [Fix length check text on manual payout tool](https://github.com/bisq-network/bisq/pull/5223)
- @JaredBoone:
   - [Changes &quot;Verify result&quot; to &quot;Check signature&quot;](https://github.com/bisq-network/bisq/pull/5209)
- @wallclockbuilder:
   - [Update commands for mediator/refund agent](https://github.com/bisq-network/bisq/pull/5323)
   - [Fix typo](https://github.com/bisq-network/bisq/pull/5291)
   - [Replace Slack with Keybase](https://github.com/bisq-network/bisq/pull/5288)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.6.2</title>
    <updated>2021-04-01T08:33:36Z</updated>
    <dc:date>2021-04-01T08:33:36Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.7.2</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.7.2"/>
    <summary>Small release fixing bugs introduced in 1.0.7.1:

### Bug fixes:

* The date in invoice page were not showing anymore the browser date time, but the server date time. (@NicolasDorier)
* Apps on root where not working anymore, redirecting to login page rather than showing the app (see #2414) (@bolatovumar)</summary>
    <title>btcpayserver/btcpayserver: v1.0.7.2</title>
    <updated>2021-04-01T03:17:19Z</updated>
    <dc:date>2021-04-01T03:17:19Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ElementsProject/lightning/releases/tag/v0.10.0</id>
    <link href="https://github.com/ElementsProject/lightning/releases/tag/v0.10.0"/>
    <summary>We're pleased to announce the 0.10.0 release of c-lightning, named by  @jsarenik.

This is a major release, consolidating a number of features, fixes and experimental extensions.

## Highlights for Users
- `pay` has been refined and much improved across various less-common scenarios.
- `listpeers` shows the current feerate and unilateral close fee.
- `listforwards` can now filter by channel status, and in or out channel.
- `fundpsbt` and `utxopsbt` have a new `excess_as_change` parameter if you don't want to add it yourself.
- `connect` returns the address we actually connected to (and `direction` tells you if they actually connected to us instead).
- `fundchannel_complete` takes a PSBT, removing a common cause of tragic opening failures: `txprepare` and `withdraw` now provide a PSBT for convenience too.
- In regtest mode, we don't care that bitcoind doesn't give any fee estimates, but use the minimum.

## Highlights for the Network
- We now send `warning` messages if an error condition is possibly recoverable, rather than closing the channel and sending `error`.
- We now implement `sync_complete` for gossip_range queries as per latest spec, with backwards compatibility for older nodes.
- `experimental-dual-fund` config option enables the draft dual funding option for compatible nodes, which includes RBF upgrades for opening transactions.

## Highlights for Developers
- All hooks are now registerable by multiple plugins at once.
- `experimental-shutdown-wrong-funding` allows remote nodes to close incorrectly opened channels using the new `wrong_funding` option to `close`.

More details can be found in the [changelog](https://github.com/ElementsProject/lightning/blob/v0.10.0/CHANGELOG.md).

Thanks to everyone for their contributions and bug reports; please keep them coming.

Since 0.9.3, we've had 339 commits from 14 different authors over 69 days.

A special thanks goes to the 3 first time contributors:

- Matthias Debernardini
- Luke Childs
- Alexey Zagarin

Cheers,
Rusty, Lisa, Christian,  ZmnSCPxj
</summary>
    <title>ElementsProject/lightning: v0.10.0</title>
    <updated>2021-03-31T20:14:56Z</updated>
    <dc:date>2021-03-31T20:14:56Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.7</id>
    <link href="https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.7"/>
    <summary># Summary

Trezor T's firmware (v2.3.5) breaks the compatibility with Wasabi, this release fixes this. I also added some minor updates and fixes. 

- **Update HWI to v2.0.1**  
- **Update Tor to v0.4.5.7** 

# Newbie Guide

While setting up Wasabi is straightforward, even a Linux wizard with the longest beard can get stuck on the most basic tasks. Consider taking a look at the [Installation Instructions](https://docs.wasabiwallet.io/using-wasabi/InstallPackage.html) guide.

# Advanced Guide

If you want to build Wasabi from source code or update the source code check out [these instructions.](https://docs.wasabiwallet.io/using-wasabi/BuildSource.html)

From version 1.1.3 Wasabi also introduces [reproducible builds](https://reproducible-builds.org/): [Deterministic Build Guide](https://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi.Documentation/Guides/DeterministicBuildGuide.md)

Build with .NET Core 3.1.407-win-x64.

## FAQ

- **Frequently asked questions [here](https://github.com/zkSNACKs/WalletWasabi/discussions/categories/faq).**
- **Requirements?** x64, Linux, &gt;Win10, &gt;macOS 10.13.

# Release Notes

- **Update HWI** https://github.com/zkSNACKs/WalletWasabi/pull/5465
- **RPC** https://github.com/zkSNACKs/WalletWasabi/pull/5436
- **Fix for recovering wallet from more then 12 Recovery words** https://github.com/zkSNACKs/WalletWasabi/pull/5384
- **Tor** https://github.com/zkSNACKs/WalletWasabi/pull/5455</summary>
    <title>zkSNACKs/WalletWasabi: v1.1.12.7</title>
    <updated>2021-03-31T10:39:06Z</updated>
    <dc:date>2021-03-31T10:39:06Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.7.1</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.7.1"/>
    <summary>This is a security release that patches one critical and several low-impact vulnerabilities that affected BTCPay Server versions 1.0.7.0 and older.  

The critical vulnerability (CVE-2021-29251) impacts users who: 

- Use Docker Deployment, have a configured email server and enabled registration for users in Server Settings &gt; Policies   

We strongly recommend affected users to update their instances to mitigate the risk. We will release a full public disclosure of vulnerabilities with the next major version of the BTCPay Server. 

We want to thank @teslamotors for filing a responsible disclosure, helping us with remediation, and handling the situation professionally.  
We also want to thank Qaiser Abbas, an independent web-security researcher, for an additional responsible vulnerability disclosure that was handled in this release.   

Thank you for keeping our users safe. 

### Improvements:

* Add user email search/sort @bolatovumar
* Fix pay button link preview (see #2396) @bumbummen99 
* Change display date format on view pull payments (see #2339) @AlexGidge
* Update form required input styling (see #2373) @bolatovumar
* Order file uploaded list by descending timestamp (#2273) @bolatovumar
* Remove misleading title from hint icon @dennisreimann
* Make dates/timespan swagger docs more clear (#2399) @Kukks
* Add rate limiter for forgotpassword @NicolasDorier
* Upgrade Boostrap to v4.6 and jquery to 3.6.0 @dennisreimann
* Use better PRNG for payjoin input selection @NicolasDorier
* Decrease authentication cookie timeout after password change from 30min to 5min @NicolasDorier
* Use secure/http-only cookies for preferences @NicolasDorier

### Bug fixes:

* Ensure submitting empty currency does not break update PoS page (#2376) @bolatovumar
* Fix point of sale item newline break (#2366) @Kukks
* Validate filename in file upload endpoints @NicolasDorier
* Turn off autocomplete for BIP39 Seed or HD private key inputs @nosovk
* Fix payment request template body/page height and footer style @Patrick</summary>
    <title>btcpayserver/btcpayserver: v1.0.7.1</title>
    <updated>2021-03-30T15:16:32Z</updated>
    <dc:date>2021-03-30T15:16:32Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ElementsProject/elements/releases/tag/elements-0.18.1.11</id>
    <link href="https://github.com/ElementsProject/elements/releases/tag/elements-0.18.1.11"/>
    <summary>Changelog for v0.18.1.11:

- Specify the dynafed epoch length for liquidv1.

Changelog for v0.18.1.10

-    Add SIGHASH_RANGEPROOF support
-    Add two missing dynafed fields to getblockchaininfo
-    Support changing mainnet dynafed activation
-    Only verify proposed dynafed parameters if they differ from current

</summary>
    <title>ElementsProject/elements: elements-0.18.1.11</title>
    <updated>2021-03-29T18:37:42Z</updated>
    <dc:date>2021-03-29T18:37:42Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0"/>
    <summary># Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0/Specter-Setup-v1.3.0.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0/SpecterDesktop-v1.3.0.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0/specter_desktop-v1.3.0-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

**Note on macOS**: The current build supports only macOS Catalina (10.15) or higher. If you'd like to run Specter on an older macOS version, you can [install Specter from Pip](https://github.com/cryptoadvance/specter-desktop#installing-specter-from-pip).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0/specterd-v1.3.0-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0/specterd-v1.3.0-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0/specterd-v1.3.0-x86_64-linux-gnu.zip)

## Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @ben-kaufman's GPG key.
You can get the public key from here: [https://benkaufman.info/ben-kaufman.asc](https://benkaufman.info/ben-kaufman.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x5D27DE564153F2BD) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/5DF6A7601DB8B78EBDEC18DB5D27DE564153F2BD).
Fingerprint of the key is `5DF6 A760 1DB8 B78E BDEC  18DB 5D27 DE56 4153 F2BD`, short id: `5d27de564153f2bd`

# Release notes
Bugfix: bump embit version, add secp binary #1031 (Stepan Snigirev)
 - Bugfix: consolidations issue #1034 (benk10)
 - Bugfix: Default bitcoind timeout to 60s for all platforms #1044 (kdmukai)
 - Bugfix: Raspberry Pi check; fixing breaking changes when not using built-in Tor #1037 (kdmukai)
 - Bugfix: Remove potentially non-final txid #1011 (benk10)
 - Bugfix: auto-escaping of wallet.account_map json in pdf backup #976 (djpnewton)
 - Bugfix: typo #1008 (Jan Rothen)
 - Bugfix: HWI2 integration issues #1045 (benk10)
 - Bugfix: misc Fixes for pre-release, mainly proper tor shutdown (#1048) (benk10)
 - Bugfix: fix fill_psbt #1050 (Stepan Snigirev)
 - Bugfix: exit cleanup #1053 (benk10)
 - Bugfix: Fix Windows pyinstaller typo #1064 (benk10)
 - Bugfix: Pre release minor fixes #1055 (benk10)
 - Bugfix: Remove scientific notations #1067 (benk10)
 - Bugfix: Update Bitcoin Core data dir even when installed and update Cobo Vault instructions #1056 (benk10)
 - Bugfix: Remove download attribute from link #1061 (Taylor Helsper)
 - Chore: Bump jinja2 from 2.11.2 to 2.11.3 #1033 (dependabot[bot])
 - Chore: Some more Cypress tests #970 (benk10)
 - Chore: Re-applying config change to pass Black formatting #1003 (kdmukai)
 - Chore: Cypress travis #997 (Kim Neunert)
 - Chore: Bump HWI to 2.0.1 #1060 (benk10)
 - Chore: Refactor node setup state and timeout #1058 (benk10)
 - Docs: added signature-verification to FAQ #1042 (Kim Neunert)
 - Docs: Update DEVELOPMENT.md for Raspi #1032 (kdmukai)
 - Docs: update to specify correct docker tag #971 (kdmukai)
 - Docs: Fixed typos in faq.md #1004 (Dimitris Tsapakidis)
 - Docs: Add link to RaspiBlitz connection guide #1041 (d11n)
 - Feature: Add &quot;Abandon transaction&quot; option for low fee txs that have been purged from the mempool #991 (kdmukai)
 - Feature: Add full edit transaction for RBF #998 (benk10)
 - Feature: Add mempool.space as an option for fee estimation and block explorer #1020 (benk10)
 - Feature: many more currencies to the price provider #1021 (benk10)
 - Feature: Move wallets loading process to background #1017 (benk10)
 - Feature: Setup Bitcoin Core from Specter #1007 (benk10)
 - Feature: Show wallets overview for / , resolves #1018 #1019 (benk10)
 - Feature: improved the description of the CLI arguments/options #984 (8go)
 - Feature: Logging improvements #1043 (Kim Neunert)
 - Feature: Move to HWI v2 #1001 (benk10)
 - Feature: Specter-DIY: add sd card support #1047 (Stepan Snigirev)
 - Feature: Adding regular logs to core-settings-page #1065 (Kim Neunert)
 - Feature: Call the checker more often if IBD #1059 (benk10)
 - Feature: Pre download core and tor binaries #1062 (benk10)
 - UIUX: changing the background color of that input/output (using colors based on the send/receive svg icons) #989 (djpnewton)
 - UIUX: HWI Bridge design improvement #1015 (benk10)
 - UIUX: Timeout management and other improvements #1057 (Kim Neunert)
 - UIUX: Only tor quicksync warning #1054 (Kim Neunert)</summary>
    <title>cryptoadvance/specter-desktop: v1.3.0</title>
    <updated>2021-03-29T17:27:24Z</updated>
    <dc:date>2021-03-29T17:27:24Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.6.1</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.6.1"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

This is a follow-up release that [allows default fee values in leniency checks](https://github.com/bisq-network/bisq/pull/5365), [fixes an issue in the the new portfolio history popup](https://github.com/bisq-network/bisq/pull/5363) and upgrades to the [latest Tor version v0.4.5.7](https://github.com/bisq-network/bisq/pull/5364) that fixes two important denial-of-service bugs in earlier versions of Tor.

For more details please see https://github.com/bisq-network/bisq/milestone/54?closed=1

Here are the release notes from v1.6.0:

## Release notes
This release ships the official beta release for the Bisq API! It has been tested on mainnet, but is still in beta, so please be careful.

Other highlights: absolute minimum deposits have now been lowered from 0.006 BTC to 0.001 BTC. Maker and taker fee transactions are now verified via mempool.space to reduce trade issues, and mediation and arbitration were improved as well. And as always, there are many bug fixes and refinements.

Also important: this release ships part of 1 of 2 for BSQ SegWit implementation. It prepares the network for handling SegWit BSQ transactions (activation block is 680300, around 2021/04/25 -- all full nodes should update to 1.6.0+ before that time). Shortly after this activation point, the wallet code (https://github.com/bisq-network/bisq/pull/5109) will be merged into master for testing so that the full BSQ SegWit update is shipped in the following release.

### DAO
- [Implement Segwit for BSQ - Step 1/2](https://github.com/bisq-network/bisq/pull/5000)

### UI
- [Update commands for mediator/refund agent registration](https://github.com/bisq-network/bisq/pull/5323)
- [Fix copy of BankName value + BranchId/BankId](https://github.com/bisq-network/bisq/pull/5231)
- [Changes &quot;Verify result&quot; to &quot;Check signature&quot;](https://github.com/bisq-network/bisq/pull/5209)
- [Fix dark mode readability of specific texts](https://github.com/bisq-network/bisq/pull/5232)
- [Fix Set Password text button](https://github.com/bisq-network/bisq/pull/5272)
- [Fix key shortcut documentation when using CMD+Y](https://github.com/bisq-network/bisq/pull/5222)
- [Replace Slack with Keybase](https://github.com/bisq-network/bisq/pull/5288)
- [Fix opening of proposal links in DAO on Windows](https://github.com/bisq-network/bisq/pull/5262)
- [Fix length check text on manual payout tool](https://github.com/bisq-network/bisq/pull/5223)

### Trading
- [Lower min deposit to 0.001 BTC](https://github.com/bisq-network/bisq/pull/5326)
- [Add pop-up warning for trading with risky payment methods](https://github.com/bisq-network/bisq/pull/5344)
- [Verify maker &amp; taker fee transactions via Mempool lookup](https://github.com/bisq-network/bisq/pull/5160)
- [Fee validation leniency using old DAO param values](https://github.com/bisq-network/bisq/pull/5347)
- [Improve portfolio history](https://github.com/bisq-network/bisq/pull/5315)
- [Add NGN as a default currency](https://github.com/bisq-network/bisq/pull/5293)
- [Add pay from BSQ wallet button](https://github.com/bisq-network/bisq/pull/5316)
- [Prevent trading when not connected to the Bitcoin network](https://github.com/bisq-network/bisq/pull/5325)
- [Fix Multiple Warnings on Enable All Offers](https://github.com/bisq-network/bisq/pull/5215)

### Wallet
- [Add coin input control](https://github.com/bisq-network/bisq/pull/5142)
- [Fix race condition in BTC sent confirmation popup](https://github.com/bisq-network/bisq/pull/5333)

### Reliability
- [Prevent persist at startup, flush at backup](https://github.com/bisq-network/bisq/pull/5280)
- [Fix mailbox bootstrap issue](https://github.com/bisq-network/bisq/pull/5267)

### Mediation/Arbitration
- Improve chat functionality of mediation/arbitration: [1](https://github.com/bisq-network/bisq/pull/5207), [2](https://github.com/bisq-network/bisq/pull/5349)
- [Improve mediation tools / logging](https://github.com/bisq-network/bisq/pull/5206)

### API
- [Add long running api tests](https://github.com/bisq-network/bisq/pull/5303)
- [Improve takeoffer error handing](https://github.com/bisq-network/bisq/pull/5294)
- [Disambiguate payment acct json form's &quot;country&quot; field](https://github.com/bisq-network/bisq/pull/5330)
- [Improve apitest docs](https://github.com/bisq-network/bisq/pull/5328)
- [Document test harness dispute agent registration](https://github.com/bisq-network/bisq/pull/5273)
- [Avoid null pointer exception due to null fee while wrapping tx in TxInfo](https://github.com/bisq-network/bisq/pull/5302)
- [Prevent creation of new offers with incompatible payment accounts](https://github.com/bisq-network/bisq/pull/5284)
- [Fix CLI number opt validation, improve server-not-up msg](https://github.com/bisq-network/bisq/pull/5259)
- [Fix call rate metering interceptor bug](https://github.com/bisq-network/bisq/pull/5250)
- [Fix API startup's wallet.init failure when wallet is encrypted](https://github.com/bisq-network/bisq/pull/5337)
- [Improve gRPC server error logging](https://github.com/bisq-network/bisq/pull/5249)
- [Display buyer's cost in api's gettrade output](https://github.com/bisq-network/bisq/pull/5246)
- [Refactor apitest cases to use GrpcClient](https://github.com/bisq-network/bisq/pull/5244)
- [Refactor grpc stub boilerplate from CliMain to GrpcClient](https://github.com/bisq-network/bisq/pull/5240)
- [Adjust api to new minimum fee per vbyte](https://github.com/bisq-network/bisq/pull/5238)
- [Add CLI testing bot to :apitest](https://github.com/bisq-network/bisq/pull/5203)

### Development
- [Document tor upgrade steps](https://github.com/bisq-network/bisq/pull/5248)
- [Add step for signature creation for Arch Linux](https://github.com/bisq-network/bisq/pull/5239)
- [Fix typo in test](https://github.com/bisq-network/bisq/pull/5291)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.6.1.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.6.1.jar`
The output need to match the value from the Bisq-1.6.1.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.6.1.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Credits

Thanks to everyone who directly contributed to this release:

- @BtcContributor 
- @cd2357 
- @chimp1984
- @ripcurlx 
- @ghubstan
- @huey735 
- @JaredBoone
- @jmacxx 
- @wallclockbuilder 
- @sqrrm 
- @stejbac

A special thanks to our first time contributor:

- @BtcContributor:
   - [Fix Set Password text button](https://github.com/bisq-network/bisq/pull/5272)
   - [Fix opening of proposal links in DAO on Windows](https://github.com/bisq-network/bisq/pull/5262)
   - [Fix dark mode readibility of specific texts](https://github.com/bisq-network/bisq/pull/5232)
   - [Fix copy of BankName value + BranchId/BankId](https://github.com/bisq-network/bisq/pull/5231)
   - [Fix length check text on manual payout tool](https://github.com/bisq-network/bisq/pull/5223)
- @JaredBoone:
   - [Changes &quot;Verify result&quot; to &quot;Check signature&quot;](https://github.com/bisq-network/bisq/pull/5209)
- @wallclockbuilder:
   - [Update commands for mediator/refund agent](https://github.com/bisq-network/bisq/pull/5323)
   - [Fix typo](https://github.com/bisq-network/bisq/pull/5291)
   - [Replace Slack with Keybase](https://github.com/bisq-network/bisq/pull/5288)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.6.1</title>
    <updated>2021-03-29T14:04:50Z</updated>
    <dc:date>2021-03-29T14:04:50Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre9</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre9"/>
    <summary></summary>
    <title>cryptoadvance/specter-desktop: v1.3.0-pre9</title>
    <updated>2021-03-29T13:35:01Z</updated>
    <dc:date>2021-03-29T13:35:01Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre8</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre8"/>
    <summary></summary>
    <title>cryptoadvance/specter-desktop: v1.3.0-pre8</title>
    <updated>2021-03-29T07:53:20Z</updated>
    <dc:date>2021-03-29T07:53:20Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre7</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre7"/>
    <summary></summary>
    <title>cryptoadvance/specter-desktop: v1.3.0-pre7</title>
    <updated>2021-03-28T19:43:13Z</updated>
    <dc:date>2021-03-28T19:43:13Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin-core/HWI/releases/tag/2.0.1</id>
    <link href="https://github.com/bitcoin-core/HWI/releases/tag/2.0.1"/>
    <summary>Also available on [PyPi](https://pypi.org/project/hwi/) and can be installed with `pip install -U hwi`

## Fixed
* Fixed Trezor T on device passphrase entry
* Fixed `hwi-qt` Linux binary crashing when using keyboard shortcuts</summary>
    <title>bitcoin-core/HWI: 2.0.1</title>
    <updated>2021-03-27T17:55:57Z</updated>
    <dc:date>2021-03-27T17:55:57Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre6</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre6"/>
    <summary># v1.3.0-pre6 - This is a pre-release (i.e. beta software).

# Use this with caution!!!

## Main changes to test:
- **Bitcoin Core and Tor setup**: Specter now has a new setup wizard, accessible from the main screen, which allows setting up Bitcoin Core and Tor directly from Specter. You can also setup Tor separately from the Tor settings tab. The Tor and Bitcoin Core will automatically start and stop with Specter launch/ close. (Warning: If you're already using Bitcoin Core on the machine you're testing the setup on, Specter by default will use and override existing files in the default location of Bitcoin Core - since we assume users who need Bitcoin Core installation from Specter don't have a node there already. If that is a concern for you, make sure to specify a custom path to Bitcoin Core data folder so Specter will use that instead, this can be done from the advanced section of the wizard).
- **Full RBF editing option**: You can now fully edit an RBF transaction - i.e. change recipient address, add inputs, edit amounts etc.
- **HWI v2.0.0**: New version of HWI with major changes, meaning all USB-connected hardware wallets should be tested to ensure the new version did not break any integration.
- **BitBox02 Multisig support**: With HWI v2.0.0, Specter now supports using BitBox02 in multisig setups.
- **Async wallets loading**: The process of loading existing wallets into Specter on startup has been moved to the background. Specter should now start up much faster, and you may see loading indication at first for the wallets.
- **Abandon transaction**: If you sent a transaction that has been purged from the mempool, it is now possible to make your wallet forget it so that the funds are spendable again. 
- **Mempool.space fee estimation**: The default fee estimation source is now mempool.space. It's also possible to configure in the general settings to use either Bitcoin Core, or a self-hosted instance of mempool.space.
- **Block explorer default options**: We now have default options for block explorers instead of only free text. It's still possible to use as free text by choosing `custom`.
- **HWI Bridge Redesign**: The process and design of configuring Specter used on a remote machine to allow USB connections has been simplified and redesigned.
- **More currencies and precious metals in price bar**: More currencies are now available for automated price pulling, also precious metals, with multiple weight unit options, are now available too.
- **Fix escaping of JSON wallet backup**: Avoid escaping the JSON file downloaded on wallet backup.
- **Fix Bitcoin Core v0.21 UTXO consolidation issue**: Previous version had a bug where UTXO consolidation transactions were would always show up as unconfirmed if Bitcoin Core v0.21 is used.
- **Fix Signet Nested SegWit**: Nested SegWit addresses on Signet were previously generated incorrectly.

## Planned release-notes:
- Bugfix: bump embit version, add secp binary #1031 (Stepan Snigirev)
- Bugfix: consolidations issue #1034 (benk10)
- Bugfix: Default bitcoind timeout to 60s for all platforms #1044 (kdmukai)
- Bugfix: Raspberry Pi check; fixing breaking changes when not using built-in Tor #1037 (kdmukai)
- Bugfix: Remove potentially non-final txid #1011 (benk10)
- Bugfix: auto-escaping of wallet.account_map json in pdf backup #976 (djpnewton)
- Bugfix: typo #1008 (Jan Rothen)
- Bugfix: HWI2 integration issues #1045 (benk10)
- Chore: Bump jinja2 from 2.11.2 to 2.11.3 #1033 (dependabot[bot])
- Chore: Some more Cypress tests #970 (benk10)
- Chore: Re-applying config change to pass Black formatting #1003 (kdmukai)
- Chore: Cypress travis #997 (Kim Neunert)
- Docs: added signature-verification to FAQ #1042 (Kim Neunert)
- Docs: Update DEVELOPMENT.md for Raspi #1032 (kdmukai)
- Docs: update to specify correct docker tag #971 (kdmukai)
- Docs: Fixed typos in faq.md #1004 (Dimitris Tsapakidis)
- Docs: Add link to RaspiBlitz connection guide #1041 (d11n)
- Feature: Add &quot;Abandon transaction&quot; option for low fee txs that have been purged from the mempool #991 (kdmukai)
- Feature: Add full edit transaction for RBF #998 (benk10)
- Feature: Add mempool.space as an option for fee estimation and block explorer #1020 (benk10)
- Feature: many more currencies to the price provider #1021 (benk10)
- Feature: Move wallets loading process to background #1017 (benk10)
- Feature: Setup Bitcoin Core from Specter #1007 (benk10)
- Feature: Show wallets overview for / , resolves #1018 #1019 (benk10)
- Feature: improved the description of the CLI arguments/options #984 (8go)
- Feature: Logging improvements #1043 (Kim Neunert)
- Feature: Move to HWI v2 #1001 (benk10)
- Feature: Specter-DIY: add sd card support #1047 (Stepan Snigirev)
- UIUX: changing the background color of that input/output (using colors based on the send/receive svg icons) #989 (djpnewton)
- UIUX: HWI Bridge design improvement #1015 (benk10)

## Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0-pre6/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @ben-kaufman's GPG key.
You can get the public key from here: [https://benkaufman.info/ben-kaufman.asc](https://benkaufman.info/ben-kaufman.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x5D27DE564153F2BD) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/5DF6A7601DB8B78EBDEC18DB5D27DE564153F2BD).
Fingerprint of the key is `5DF6 A760 1DB8 B78E BDEC  18DB 5D27 DE56 4153 F2BD`, short id: `5d27de564153f2bd`</summary>
    <title>cryptoadvance/specter-desktop: v1.3.0-pre6</title>
    <updated>2021-03-26T18:46:17Z</updated>
    <dc:date>2021-03-26T18:46:17Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.6.0</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.6.0"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This release ships the official beta release for the Bisq API! It has been tested on mainnet, but is still in beta, so please be careful.

Other highlights: absolute minimum deposits have now been lowered from 0.006 BTC to 0.001 BTC. Maker and taker fee transactions are now verified via mempool.space to reduce trade issues, and mediation and arbitration were improved as well. And as always, there are many bug fixes and refinements.

Also important: this release ships part of 1 of 2 for BSQ SegWit implementation. It prepares the network for handling SegWit BSQ transactions (activation block is 680300, around 2021/04/25 -- all full nodes should update to 1.6.0 before that time). Shortly after this activation point, the wallet code (https://github.com/bisq-network/bisq/pull/5109) will be merged into master for testing so that the full BSQ SegWit update is shipped in the following release.

### DAO
- [Implement Segwit for BSQ - Step 1/2](https://github.com/bisq-network/bisq/pull/5000)

### UI
- [Update commands for mediator/refund agent registration](https://github.com/bisq-network/bisq/pull/5323)
- [Fix copy of BankName value + BranchId/BankId](https://github.com/bisq-network/bisq/pull/5231)
- [Changes &quot;Verify result&quot; to &quot;Check signature&quot;](https://github.com/bisq-network/bisq/pull/5209)
- [Fix dark mode readability of specific texts](https://github.com/bisq-network/bisq/pull/5232)
- [Fix Set Password text button](https://github.com/bisq-network/bisq/pull/5272)
- [Fix key shortcut documentation when using CMD+Y](https://github.com/bisq-network/bisq/pull/5222)
- [Replace Slack with Keybase](https://github.com/bisq-network/bisq/pull/5288)
- [Fix opening of proposal links in DAO on Windows](https://github.com/bisq-network/bisq/pull/5262)
- [Fix length check text on manual payout tool](https://github.com/bisq-network/bisq/pull/5223)

### Trading
- [Lower min deposit to 0.001 BTC](https://github.com/bisq-network/bisq/pull/5326)
- [Add pop-up warning for trading with risky payment methods](https://github.com/bisq-network/bisq/pull/5344)
- [Verify maker &amp; taker fee transactions via Mempool lookup](https://github.com/bisq-network/bisq/pull/5160)
- [Fee validation leniency using old DAO param values](https://github.com/bisq-network/bisq/pull/5347)
- [Improve portfolio history](https://github.com/bisq-network/bisq/pull/5315)
- [Add NGN as a default currency](https://github.com/bisq-network/bisq/pull/5293)
- [Add pay from BSQ wallet button](https://github.com/bisq-network/bisq/pull/5316)
- [Prevent trading when not connected to the Bitcoin network](https://github.com/bisq-network/bisq/pull/5325)
- [Fix Multiple Warnings on Enable All Offers](https://github.com/bisq-network/bisq/pull/5215)

### Wallet
- [Add coin input control](https://github.com/bisq-network/bisq/pull/5142)
- [Fix race condition in BTC sent confirmation popup](https://github.com/bisq-network/bisq/pull/5333)

### Reliability
- [Prevent persist at startup, flush at backup](https://github.com/bisq-network/bisq/pull/5280)
- [Fix mailbox bootstrap issue](https://github.com/bisq-network/bisq/pull/5267)

### Mediation/Arbitration
- Improve chat functionality of mediation/arbitration: [1](https://github.com/bisq-network/bisq/pull/5207), [2](https://github.com/bisq-network/bisq/pull/5349)
- [Improve mediation tools / logging](https://github.com/bisq-network/bisq/pull/5206)

### API
- [Add long running api tests](https://github.com/bisq-network/bisq/pull/5303)
- [Improve takeoffer error handing](https://github.com/bisq-network/bisq/pull/5294)
- [Disambiguate payment acct json form's &quot;country&quot; field](https://github.com/bisq-network/bisq/pull/5330)
- [Improve apitest docs](https://github.com/bisq-network/bisq/pull/5328)
- [Document test harness dispute agent registration](https://github.com/bisq-network/bisq/pull/5273)
- [Avoid null pointer exception due to null fee while wrapping tx in TxInfo](https://github.com/bisq-network/bisq/pull/5302)
- [Prevent creation of new offers with incompatible payment accounts](https://github.com/bisq-network/bisq/pull/5284)
- [Fix CLI number opt validation, improve server-not-up msg](https://github.com/bisq-network/bisq/pull/5259)
- [Fix call rate metering interceptor bug](https://github.com/bisq-network/bisq/pull/5250)
- [Fix API startup's wallet.init failure when wallet is encrypted](https://github.com/bisq-network/bisq/pull/5337)
- [Improve gRPC server error logging](https://github.com/bisq-network/bisq/pull/5249)
- [Display buyer's cost in api's gettrade output](https://github.com/bisq-network/bisq/pull/5246)
- [Refactor apitest cases to use GrpcClient](https://github.com/bisq-network/bisq/pull/5244)
- [Refactor grpc stub boilerplate from CliMain to GrpcClient](https://github.com/bisq-network/bisq/pull/5240)
- [Adjust api to new minimum fee per vbyte](https://github.com/bisq-network/bisq/pull/5238)
- [Add CLI testing bot to :apitest](https://github.com/bisq-network/bisq/pull/5203)

### Development
- [Document tor upgrade steps](https://github.com/bisq-network/bisq/pull/5248)
- [Add step for signature creation for Arch Linux](https://github.com/bisq-network/bisq/pull/5239)
- [Fix typo in test](https://github.com/bisq-network/bisq/pull/5291)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.6.0.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.6.0.jar`
The output need to match the value from the Bisq-1.6.0.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.6.0.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Credits

Thanks to everyone who directly contributed to this release:

- @BtcContributor 
- @cd2357 
- @chimp1984
- @ripcurlx 
- @ghubstan
- @huey735 
- @JaredBoone
- @jmacxx 
- @wallclockbuilder 
- @sqrrm 
- @stejbac

A special thanks to our first time contributor:

- @BtcContributor:
   - [Fix Set Password text button](https://github.com/bisq-network/bisq/pull/5272)
   - [Fix opening of proposal links in DAO on Windows](https://github.com/bisq-network/bisq/pull/5262)
   - [Fix dark mode readibility of specific texts](https://github.com/bisq-network/bisq/pull/5232)
   - [Fix copy of BankName value + BranchId/BankId](https://github.com/bisq-network/bisq/pull/5231)
   - [Fix length check text on manual payout tool](https://github.com/bisq-network/bisq/pull/5223)
- @JaredBoone:
   - [Changes &quot;Verify result&quot; to &quot;Check signature&quot;](https://github.com/bisq-network/bisq/pull/5209)
- @wallclockbuilder:
   - [Update commands for mediator/refund agent](https://github.com/bisq-network/bisq/pull/5323)
   - [Fix typo](https://github.com/bisq-network/bisq/pull/5291)
   - [Replace Slack with Keybase](https://github.com/bisq-network/bisq/pull/5288)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.6.0</title>
    <updated>2021-03-26T15:44:15Z</updated>
    <dc:date>2021-03-26T15:44:15Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.3.8</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.3.8"/>
    <summary>Umbrel v0.3.8 brings the following apps up to their latest versions:

- Thunderhub
- RTL
- BTCPay
- Lightning Terminal
- Specter Desktop
- Sphinx Relay
- Samourai Server
 
If you face any difficulties while updating, please message us on Telegram: https://t.me/getumbrel

Diff: https://github.com/getumbrel/umbrel/compare/v0.3.7...v0.3.8</summary>
    <title>getumbrel/umbrel: v0.3.8</title>
    <updated>2021-03-26T12:53:40Z</updated>
    <dc:date>2021-03-26T12:53:40Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre5</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre5"/>
    <summary></summary>
    <title>cryptoadvance/specter-desktop: v1.3.0-pre5</title>
    <updated>2021-03-25T11:06:04Z</updated>
    <dc:date>2021-03-25T11:06:04Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.7</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.7"/>
    <summary>**New**

- Encrypted Message sign/verify 
- Main SCAN button can import wallets
- Card colors 
- Romanian language
- TZS currency

**Fixed**

- Improved accessibility 
- Show XPUB for AEZEED wallets
- Wallet selection was not visible
- Coin Control handle 0 conf output correctly
- Decrease animated QR codes density
- Send MAX can be used with regular outputs

**Languages updates**

French, Chinese (Simplified), Chinese (Traditional), Finnish, German, Dutch, Portuguese Brazilian and Slovenian.
Join us here → https://www.transifex.com/bluewallet/bluewallet

**Download**

[![Appstore](https://bluewallet.io/uploads/app-store-badge-blue.svg)](https://github.com/BlueWallet/BlueWallet/releases/download/v6.0.7/BlueWallet.6.0.7.dmg)

[![Playstore](https://bluewallet.io/uploads/play-store-badge-blue.svg)](https://github.com/BlueWallet/BlueWallet/releases/download/v6.0.7/BlueWallet-6.0.7.apk)
</summary>
    <title>BlueWallet/BlueWallet: v6.0.7</title>
    <updated>2021-03-25T11:02:37Z</updated>
    <dc:date>2021-03-25T11:02:37Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bwt-dev/bwt/releases/tag/v0.2.4</id>
    <link href="https://github.com/bwt-dev/bwt/releases/tag/v0.2.4"/>
    <summary>### Changelog

- Allow specifying an explicit script type for xpubs using `-x &lt;xpub&gt;:wpkh`, `-x &lt;xpub&gt;:shwpkh` or `-x &lt;xpub&gt;:pkh`.

- Fix `blockchain.block.headers` sending wrong number of headers (#87, thanks @stevenroose!)

- Check testmempoolaccept prior to custom broadcast (#80)

- Dependency updates and various small enhancements


------------

Also see the v0.2.4 releases for [bwt-electrum-plugin](https://github.com/bwt-dev/bwt-electrum-plugin/releases/tag/v0.2.4), [libbwt](https://github.com/bwt-dev/libbwt/releases/tag/v0.2.4), [libbwt-nodejs](https://github.com/bwt-dev/libbwt-nodejs/releases/tag/v0.2.4) and [libbwt-jni](https://github.com/bwt-dev/libbwt-jni/releases/tag/v0.2.4).

### Installation

Installation instructions are [available on the README](https://github.com/bwt-dev/bwt#installation).

### Verifying signatures

The releases are signed by Nadav Ivgi (@shesek). The public key can be verified on the [PGP WoT](http://keys.gnupg.net/pks/lookup?op=vindex&amp;fingerprint=on&amp;search=0x81F6104CD0F150FC), [github](https://api.github.com/users/shesek/gpg_keys), [twitter](https://twitter.com/shesek), [keybase](https://keybase.io/nadav), [hacker news](https://news.ycombinator.com/user?id=nadaviv) and [this video presentation](https://youtu.be/SXJaN2T3M10?t=4).

```bash
# Download (change x86_64-linux to your platform)
$ wget https://github.com/bwt-dev/bwt/releases/download/v0.2.4/bwt-0.2.4-x86_64-linux.tar.gz

# Fetch public key
$ gpg --keyserver keyserver.ubuntu.com --recv-keys FCF19B67866562F08A43AAD681F6104CD0F150FC

# Verify signature
$ wget -qO - https://github.com/bwt-dev/bwt/releases/download/v0.2.4/SHA256SUMS.asc \
  | gpg --decrypt - | grep ' bwt-0.2.4-x86_64-linux.tar.gz$' | sha256sum -c -

$ tar zxvf bwt-0.2.4-x86_64-linux.tar.gz
$ ./bwt-0.1.5-x86_64-linux/bwt --xpub &lt;xpub&gt; ...
```

The signature verification should show `Good signature from &quot;Nadav Ivgi &lt;nadav@shesek.info&gt;&quot; ... Primary key fingerprint: FCF1 9B67 ...` and `bwt-0.2.4-x86_64-linux.tar.gz: OK`.

### Reproducible builds

The builds are fully reproducible.

You can verify the checksums against the v0.2.4 builds on Travis CI: https://travis-ci.org/github/bwt-dev/bwt/builds/764306060

See [more details here](https://github.com/bwt-dev/bwt#reproducible-builds).</summary>
    <title>bwt-dev/bwt: v0.2.4</title>
    <updated>2021-03-24T23:50:08Z</updated>
    <dc:date>2021-03-24T23:50:08Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre4</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre4"/>
    <summary># v1.3.0-pre4 - This is a pre-release (i.e. beta software).

# Use this with caution!!!

## Main changes to test:
- **Bitcoin Core and Tor setup**: Specter now has a new setup wizard, accessible from the main screen, which allows setting up Bitcoin Core and Tor directly from Specter. You can also setup Tor separately from the Tor settings tab. The Tor and Bitcoin Core will automatically start and stop with Specter launch/ close. (Warning: If you're already using Bitcoin Core on the machine you're testing the setup on, Specter by default will use and override existing files in the default location of Bitcoin Core - since we assume users who need Bitcoin Core installation from Specter don't have a node there already. If that is a concern for you, make sure to specify a custom path to Bitcoin Core data folder so Specter will use that instead, this can be done from the advanced section of the wizard).
- **Full RBF editing option**: You can now fully edit an RBF transaction - i.e. change recipient address, add inputs, edit amounts etc.
- **HWI v2.0.0**: New version of HWI with major changes, meaning all USB-connected hardware wallets should be tested to ensure the new version did not break any integration.
- **BitBox02 Multisig support**: With HWI v2.0.0, Specter now supports using BitBox02 in multisig setups.
- **Async wallets loading**: The process of loading existing wallets into Specter on startup has been moved to the background. Specter should now start up much faster, and you may see loading indication at first for the wallets.
- **Abandon transaction**: If you sent a transaction that has been purged from the mempool, it is now possible to make your wallet forget it so that the funds are spendable again. 
- **Mempool.space fee estimation**: The default fee estimation source is now mempool.space. It's also possible to configure in the general settings to use either Bitcoin Core, or a self-hosted instance of mempool.space.
- **Block explorer default options**: We now have default options for block explorers instead of only free text. It's still possible to use as free text by choosing `custom`.
- **HWI Bridge Redesign**: The process and design of configuring Specter used on a remote machine to allow USB connections has been simplified and redesigned.
- **More currencies and precious metals in price bar**: More currencies are now available for automated price pulling, also precious metals, with multiple weight unit options, are now available too.
- **Fix escaping of JSON wallet backup**: Avoid escaping the JSON file downloaded on wallet backup.
- **Fix Bitcoin Core v0.21 UTXO consolidation issue**: Previous version had a bug where UTXO consolidation transactions were would always show up as unconfirmed if Bitcoin Core v0.21 is used.
- **Fix Signet Nested SegWit**: Nested SegWit addresses on Signet were previously generated incorrectly.

## Planned release-notes:
- Bugfix: bump embit version, add secp binary #1031 (Stepan Snigirev)
- Bugfix: consolidations issue #1034 (benk10)
- Bugfix: Default bitcoind timeout to 60s for all platforms #1044 (kdmukai)
- Bugfix: Raspberry Pi check; fixing breaking changes when not using built-in Tor #1037 (kdmukai)
- Bugfix: Remove potentially non-final txid #1011 (benk10)
- Bugfix: auto-escaping of wallet.account_map json in pdf backup #976 (djpnewton)
- Bugfix: typo #1008 (Jan Rothen)
- Bugfix: HWI2 integration issues #1045 (benk10)
- Chore: Bump jinja2 from 2.11.2 to 2.11.3 #1033 (dependabot[bot])
- Chore: Some more Cypress tests #970 (benk10)
- Chore: Re-applying config change to pass Black formatting #1003 (kdmukai)
- Chore: Cypress travis #997 (Kim Neunert)
- Docs: added signature-verification to FAQ #1042 (Kim Neunert)
- Docs: Update DEVELOPMENT.md for Raspi #1032 (kdmukai)
- Docs: update to specify correct docker tag #971 (kdmukai)
- Docs: Fixed typos in faq.md #1004 (Dimitris Tsapakidis)
- Docs: Add link to RaspiBlitz connection guide #1041 (d11n)
- Feature: Add &quot;Abandon transaction&quot; option for low fee txs that have been purged from the mempool #991 (kdmukai)
- Feature: Add full edit transaction for RBF #998 (benk10)
- Feature: Add mempool.space as an option for fee estimation and block explorer #1020 (benk10)
- Feature: many more currencies to the price provider #1021 (benk10)
- Feature: Move wallets loading process to background #1017 (benk10)
- Feature: Setup Bitcoin Core from Specter #1007 (benk10)
- Feature: Show wallets overview for / , resolves #1018 #1019 (benk10)
- Feature: improved the description of the CLI arguments/options #984 (8go)
- Feature: Logging improvements #1043 (Kim Neunert)
- Feature: Move to HWI v2 #1001 (benk10)
- Feature: Specter-DIY: add sd card support #1047 (Stepan Snigirev)
- UIUX: changing the background color of that input/output (using colors based on the send/receive svg icons) #989 (djpnewton)
- UIUX: HWI Bridge design improvement #1015 (benk10)

## Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0-pre3/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @ben-kaufman's GPG key.
You can get the public key from here: [https://benkaufman.info/ben-kaufman.asc](https://benkaufman.info/ben-kaufman.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x5D27DE564153F2BD) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/5DF6A7601DB8B78EBDEC18DB5D27DE564153F2BD).
Fingerprint of the key is `5DF6 A760 1DB8 B78E BDEC  18DB 5D27 DE56 4153 F2BD`, short id: `5d27de564153f2bd`</summary>
    <title>cryptoadvance/specter-desktop: v1.3.0-pre4</title>
    <updated>2021-03-24T20:46:48Z</updated>
    <dc:date>2021-03-24T20:46:48Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre3</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre3"/>
    <summary># v1.3.0-pre3 - This is a pre-release (i.e. beta software).

# Use this with caution!!!

## Main changes to test:
- **Bitcoin Core and Tor setup**: Specter now has a new setup wizard, accessible from the main screen, which allows setting up Bitcoin Core and Tor directly from Specter. You can also setup Tor separately from the Tor settings tab. The Tor and Bitcoin Core will automatically start and stop with Specter launch/ close. (Warning: If you're already using Bitcoin Core on the machine you're testing the setup on, Specter by default will use and override existing files in the default location of Bitcoin Core - since we assume users who need Bitcoin Core installation from Specter don't have a node there already. If that is a concern for you, make sure to specify a custom path to Bitcoin Core data folder so Specter will use that instead, this can be done from the advanced section of the wizard).
- **Full RBF editing option**: You can now fully edit an RBF transaction - i.e. change recipient address, add inputs, edit amounts etc.
- **HWI v2.0.0**: New version of HWI with major changes, meaning all USB-connected hardware wallets should be tested to ensure the new version did not break any integration.
- **BitBox02 Multisig support**: With HWI v2.0.0, Specter now supports using BitBox02 in multisig setups.
- **Async wallets loading**: The process of loading existing wallets into Specter on startup has been moved to the background. Specter should now start up much faster, and you may see loading indication at first for the wallets.
- **Abandon transaction**: If you sent a transaction that has been purged from the mempool, it is now possible to make your wallet forget it so that the funds are spendable again. 
- **Mempool.space fee estimation**: The default fee estimation source is now mempool.space. It's also possible to configure in the general settings to use either Bitcoin Core, or a self-hosted instance of mempool.space.
- **Block explorer default options**: We now have default options for block explorers instead of only free text. It's still possible to use as free text by choosing `custom`.
- **HWI Bridge Redesign**: The process and design of configuring Specter used on a remote machine to allow USB connections has been simplified and redesigned.
- **More currencies and precious metals in price bar**: More currencies are now available for automated price pulling, also precious metals, with multiple weight unit options, are now available too.
- **Fix escaping of JSON wallet backup**: Avoid escaping the JSON file downloaded on wallet backup.
- **Fix Bitcoin Core v0.21 UTXO consolidation issue**: Previous version had a bug where UTXO consolidation transactions were would always show up as unconfirmed if Bitcoin Core v0.21 is used.
- **Fix Signet Nested SegWit**: Nested SegWit addresses on Signet were previously generated incorrectly.

## Planned release-notes:
- Bugfix: bump embit version, add secp binary #1031 (Stepan Snigirev)
- Bugfix: consolidations issue #1034 (benk10)
- Bugfix: Default bitcoind timeout to 60s for all platforms #1044 (kdmukai)
- Bugfix: Raspberry Pi check; fixing breaking changes when not using built-in Tor #1037 (kdmukai)
- Bugfix: Remove potentially non-final txid #1011 (benk10)
- Bugfix: auto-escaping of wallet.account_map json in pdf backup #976 (djpnewton)
- Bugfix: typo #1008 (Jan Rothen)
- Bugfix: HWI2 integration issues #1045 (benk10)
- Chore: Bump jinja2 from 2.11.2 to 2.11.3 #1033 (dependabot[bot])
- Chore: Some more Cypress tests #970 (benk10)
- Chore: Re-applying config change to pass Black formatting #1003 (kdmukai)
- Chore: Cypress travis #997 (Kim Neunert)
- Docs: added signature-verification to FAQ #1042 (Kim Neunert)
- Docs: Update DEVELOPMENT.md for Raspi #1032 (kdmukai)
- Docs: update to specify correct docker tag #971 (kdmukai)
- Docs: Fixed typos in faq.md #1004 (Dimitris Tsapakidis)
- Docs: Add link to RaspiBlitz connection guide #1041 (d11n)
- Feature: Add &quot;Abandon transaction&quot; option for low fee txs that have been purged from the mempool #991 (kdmukai)
- Feature: Add full edit transaction for RBF #998 (benk10)
- Feature: Add mempool.space as an option for fee estimation and block explorer #1020 (benk10)
- Feature: many more currencies to the price provider #1021 (benk10)
- Feature: Move wallets loading process to background #1017 (benk10)
- Feature: Setup Bitcoin Core from Specter #1007 (benk10)
- Feature: Show wallets overview for / , resolves #1018 #1019 (benk10)
- Feature: improved the description of the CLI arguments/options #984 (8go)
- Feature: Logging improvements #1043 (Kim Neunert)
- Feature: Move to HWI v2 #1001 (benk10)
- Feature: Specter-DIY: add sd card support #1047 (Stepan Snigirev)
- UIUX: changing the background color of that input/output (using colors based on the send/receive svg icons) #989 (djpnewton)
- UIUX: HWI Bridge design improvement #1015 (benk10)

## Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0-pre3/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @ben-kaufman's GPG key.
You can get the public key from here: [https://benkaufman.info/ben-kaufman.asc](https://benkaufman.info/ben-kaufman.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x5D27DE564153F2BD) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/5DF6A7601DB8B78EBDEC18DB5D27DE564153F2BD).
Fingerprint of the key is `5DF6 A760 1DB8 B78E BDEC  18DB 5D27 DE56 4153 F2BD`, short id: `5d27de564153f2bd`</summary>
    <title>cryptoadvance/specter-desktop: v1.3.0-pre3</title>
    <updated>2021-03-23T16:58:56Z</updated>
    <dc:date>2021-03-23T16:58:56Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre2</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre2"/>
    <summary># v1.3.0-pre2 - This is a pre-release (i.e. beta software).

# Use this with caution!!!

## Main changes to test:
- **Bitcoin Core and Tor setup**: Specter now has a new setup wizard, accessible from the main screen, which allows setting up Bitcoin Core and Tor directly from Specter. You can also setup Tor separately from the Tor settings tab. The Tor and Bitcoin Core will automatically start and stop with Specter launch/ close. (Warning: If you're already using Bitcoin Core on the machine you're testing the setup on, Specter by default will use and override existing files in the default location of Bitcoin Core - since we assume users who need Bitcoin Core installation from Specter don't have a node there already. If that is a concern for you, make sure to specify a custom path to Bitcoin Core data folder so Specter will use that instead, this can be done from the advanced section of the wizard).
- **Full RBF editing option**: You can now fully edit an RBF transaction - i.e. change recipient address, add inputs, edit amounts etc.
- **HWI v2.0.0**: New version of HWI with major changes, meaning all USB-connected hardware wallets should be tested to ensure the new version did not break any integration.
- **BitBox02 Multisig support**: With HWI v2.0.0, Specter now supports using BitBox02 in multisig setups.
- **Async wallets loading**: The process of loading existing wallets into Specter on startup has been moved to the background. Specter should now start up much faster, and you may see loading indication at first for the wallets.
- **Abandon transaction**: If you sent a transaction that has been purged from the mempool, it is now possible to make your wallet forget it so that the funds are spendable again. 
- **Mempool.space fee estimation**: The default fee estimation source is now mempool.space. It's also possible to configure in the general settings to use either Bitcoin Core, or a self-hosted instance of mempool.space.
- **Block explorer default options**: We now have default options for block explorers instead of only free text. It's still possible to use as free text by choosing `custom`.
- **HWI Bridge Redesign**: The process and design of configuring Specter used on a remote machine to allow USB connections has been simplified and redesigned.
- **More currencies and precious metals in price bar**: More currencies are now available for automated price pulling, also precious metals, with multiple weight unit options, are now available too.
- **Fix escaping of JSON wallet backup**: Avoid escaping the JSON file downloaded on wallet backup.
- **Fix Bitcoin Core v0.21 UTXO consolidation issue**: Previous version had a bug where UTXO consolidation transactions were would always show up as unconfirmed if Bitcoin Core v0.21 is used.
- **Fix Signet Nested SegWit**: Nested SegWit addresses on Signet were previously generated incorrectly.

## Planned release-notes:
- Bugfix: bump embit version, add secp binary #1031 (Stepan Snigirev)
- Bugfix: consolidations issue #1034 (benk10)
- Bugfix: Default bitcoind timeout to 60s for all platforms #1044 (kdmukai)
- Bugfix: Raspberry Pi check; fixing breaking changes when not using built-in Tor #1037 (kdmukai)
- Bugfix: Remove potentially non-final txid #1011 (benk10)
- Bugfix: auto-escaping of wallet.account_map json in pdf backup #976 (djpnewton)
- Bugfix: typo #1008 (Jan Rothen)
- Bugfix: HWI2 integration issues #1045 (benk10)
- Chore: Bump jinja2 from 2.11.2 to 2.11.3 #1033 (dependabot[bot])
- Chore: Some more Cypress tests #970 (benk10)
- Chore: Re-applying config change to pass Black formatting #1003 (kdmukai)
- Chore: Cypress travis #997 (Kim Neunert)
- Docs: added signature-verification to FAQ #1042 (Kim Neunert)
- Docs: Update DEVELOPMENT.md for Raspi #1032 (kdmukai)
- Docs: update to specify correct docker tag #971 (kdmukai)
- Docs: Fixed typos in faq.md #1004 (Dimitris Tsapakidis)
- Docs: Add link to RaspiBlitz connection guide #1041 (d11n)
- Feature: Add &quot;Abandon transaction&quot; option for low fee txs that have been purged from the mempool #991 (kdmukai)
- Feature: Add full edit transaction for RBF #998 (benk10)
- Feature: Add mempool.space as an option for fee estimation and block explorer #1020 (benk10)
- Feature: many more currencies to the price provider #1021 (benk10)
- Feature: Move wallets loading process to background #1017 (benk10)
- Feature: Setup Bitcoin Core from Specter #1007 (benk10)
- Feature: Show wallets overview for / , resolves #1018 #1019 (benk10)
- Feature: improved the description of the CLI arguments/options #984 (8go)
- Feature: Logging improvements #1043 (Kim Neunert)
- Feature: Move to HWI v2 #1001 (benk10)
- Feature: Specter-DIY: add sd card support #1047 (Stepan Snigirev)
- UIUX: changing the background color of that input/output (using colors based on the send/receive svg icons) #989 (djpnewton)
- UIUX: HWI Bridge design improvement #1015 (benk10)

## Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0-pre1/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @ben-kaufman's GPG key.
You can get the public key from here: [https://benkaufman.info/ben-kaufman.asc](https://benkaufman.info/ben-kaufman.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x5D27DE564153F2BD) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/5DF6A7601DB8B78EBDEC18DB5D27DE564153F2BD).
Fingerprint of the key is `5DF6 A760 1DB8 B78E BDEC  18DB 5D27 DE56 4153 F2BD`, short id: `5d27de564153f2bd`</summary>
    <title>cryptoadvance/specter-desktop: v1.3.0-pre2</title>
    <updated>2021-03-23T09:37:56Z</updated>
    <dc:date>2021-03-23T09:37:56Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre1</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.3.0-pre1"/>
    <summary># v1.3.0-pre1 - This is a pre-release (i.e. beta software).
# Use this with caution!!!


# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.3.0-pre1/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @ben-kaufman's GPG key.
You can get the public key from here: [https://benkaufman.info/ben-kaufman.asc](https://benkaufman.info/ben-kaufman.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x5D27DE564153F2BD) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/5DF6A7601DB8B78EBDEC18DB5D27DE564153F2BD).
Fingerprint of the key is `5DF6 A760 1DB8 B78E BDEC  18DB 5D27 DE56 4153 F2BD`, short id: `5d27de564153f2bd`</summary>
    <title>cryptoadvance/specter-desktop: v1.3.0-pre1</title>
    <updated>2021-03-22T19:05:18Z</updated>
    <dc:date>2021-03-22T19:05:18Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/rust-bitcoin/rust-lightning/releases/tag/v0.0.13</id>
    <link href="https://github.com/rust-bitcoin/rust-lightning/releases/tag/v0.0.13"/>
    <summary></summary>
    <title>rust-bitcoin/rust-lightning: v0.0.13</title>
    <updated>2021-03-22T16:49:11Z</updated>
    <dc:date>2021-03-22T16:49:11Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.6</id>
    <link href="https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.6"/>
    <summary># Summary

The last hotfix release broke the Tor installation on fresh installs. This release fixes this.

- **Fix Tor installation on fresh installs** 

# Newbie Guide

While setting up Wasabi is straightforward, even a Linux wizard with the longest beard can get stuck on the most basic tasks. Consider taking a look at the [Installation Instructions](https://docs.wasabiwallet.io/using-wasabi/InstallPackage.html) guide.

# Advanced Guide

If you want to build Wasabi from source code or update the source code check out [these instructions.](https://docs.wasabiwallet.io/using-wasabi/BuildSource.html)

From version 1.1.3 Wasabi also introduces [reproducible builds](https://reproducible-builds.org/): [Deterministic Build Guide](https://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi.Documentation/Guides/DeterministicBuildGuide.md)

Build with .NET Core 3.1.407-win-x64.

## FAQ

- **Frequently asked questions [here](https://docs.wasabiwallet.io/FAQ/).**
- **Requirements?** x64, Linux, &gt;Win10, &gt;macOS 10.13.

# Release Notes

- **Tor install fix** https://github.com/zkSNACKs/WalletWasabi/pull/5411
</summary>
    <title>zkSNACKs/WalletWasabi: v1.1.12.6</title>
    <updated>2021-03-22T10:21:30Z</updated>
    <dc:date>2021-03-22T10:21:30Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bwt-dev/bwt/releases/tag/v0.2.3</id>
    <link href="https://github.com/bwt-dev/bwt/releases/tag/v0.2.3"/>
    <summary>### Changelog

- New `--prune-until &lt;target&gt;` option to automatically prune the chain up to the given target (height, unix timestamp or YYYY-MM-DD formatted date)

  Require configuring bitcoind with `prune=1` to allow manual pruning via the RPC.

- New `--no-wait-sync` option to allow importing addresses without waiting for bitcoind to finish syncing first

  Useful for tracking wallets during the IBD of a pruned node, so transactions could be indexed before the blocks get pruned.

- Fix compatibility with the upcoming v0.22 Bitcoin Core release (https://github.com/sparrowwallet/sparrow/issues/67#issuecomment-791522237)

- HTTP: Set the `WWW-Authenticate` header to make logging-in possible via web browsers

- Implement an [fd-based daemon readiness notification mechanism](https://skarnet.org/software/s6/notifywhenup.html), enabled with `FD_NOTIFY=&lt;fd&gt;`

- Fix whitepaper extractor

- UX touchups for progress indicator, welcome banner and logs

- Allow setting `UNIX_LISTENER_MODE` to control permissions for the unix socket notification listener

- Allow setting `NO_REQUIRE_ADDRESSES` as an env variable

Breaking CLI changes:

- The Electrum SOCKS5-based authentication needs to be explicitly enabled with `--electrum-socks-auth`,
  in addition to enabling the `--auth-*` options. By default, authentication will only be enabled for
  the HTTP API server.


------------

Also see the v0.2.3 releases for [bwt-electrum-plugin](https://github.com/bwt-dev/bwt-electrum-plugin/releases/tag/v0.2.3), [libbwt](https://github.com/bwt-dev/libbwt/releases/tag/v0.2.3), [libbwt-nodejs](https://github.com/bwt-dev/libbwt-nodejs/releases/tag/v0.2.3) and [libbwt-jni](https://github.com/bwt-dev/libbwt-jni/releases/tag/v0.2.3).

### Installation

Installation instructions are [available on the README](https://github.com/bwt-dev/bwt#installation).

### Verifying signatures

The releases are signed by Nadav Ivgi (@shesek). The public key can be verified on the [PGP WoT](http://keys.gnupg.net/pks/lookup?op=vindex&amp;fingerprint=on&amp;search=0x81F6104CD0F150FC), [github](https://api.github.com/users/shesek/gpg_keys), [twitter](https://twitter.com/shesek), [keybase](https://keybase.io/nadav), [hacker news](https://news.ycombinator.com/user?id=nadaviv) and [this video presentation](https://youtu.be/SXJaN2T3M10?t=4).

```bash
# Download (change x86_64-linux to your platform)
$ wget https://github.com/bwt-dev/bwt/releases/download/v0.2.3/bwt-0.2.3-x86_64-linux.tar.gz

# Fetch public key
$ gpg --keyserver keyserver.ubuntu.com --recv-keys FCF19B67866562F08A43AAD681F6104CD0F150FC

# Verify signature
$ wget -qO - https://github.com/bwt-dev/bwt/releases/download/v0.2.3/SHA256SUMS.asc \
  | gpg --decrypt - | grep ' bwt-0.2.3-x86_64-linux.tar.gz$' | sha256sum -c -

$ tar zxvf bwt-0.2.3-x86_64-linux.tar.gz
$ ./bwt-0.1.5-x86_64-linux/bwt --xpub &lt;xpub&gt; ...
```

The signature verification should show `Good signature from &quot;Nadav Ivgi &lt;nadav@shesek.info&gt;&quot; ... Primary key fingerprint: FCF1 9B67 ...` and `bwt-0.2.3-x86_64-linux.tar.gz: OK`.

### Reproducible builds

The builds are fully reproducible.

You can verify the checksums against the v0.2.3 builds on Travis CI: https://travis-ci.org/github/bwt-dev/bwt/builds/763199070

See [more details here](https://github.com/bwt-dev/bwt#reproducible-builds).</summary>
    <title>bwt-dev/bwt: v0.2.3</title>
    <updated>2021-03-17T04:02:43Z</updated>
    <dc:date>2021-03-17T04:02:43Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.5</id>
    <link href="https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.5"/>
    <summary># Summary

The recent macOS update broke the initialization of the build-in Tor client in Wasabi. As a result, the client was not able to start Tor client, thus it was not able to connect to our Backend. 

- **Tor fix on the newest macOS.** 
- **Update HWI to 2.0.0**
- **Add Ledger Nano X support**

# Newbie Guide

While setting up Wasabi is straightforward, even a Linux wizard with the longest beard can get stuck on the most basic tasks. Consider taking a look at the [Installation Instructions](https://docs.wasabiwallet.io/using-wasabi/InstallPackage.html) guide.

# Advanced Guide

If you want to build Wasabi from source code or update the source code check out [these instructions.](https://docs.wasabiwallet.io/using-wasabi/BuildSource.html)

From version 1.1.3 Wasabi also introduces [reproducible builds](https://reproducible-builds.org/): [Deterministic Build Guide](https://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi.Documentation/Guides/DeterministicBuildGuide.md)

Build with .NET Core 3.1.407-win-x64.

## FAQ

- **Frequently asked questions [here](https://docs.wasabiwallet.io/FAQ/).**
- **Requirements?** x64, Linux, &gt;Win10, &gt;macOS 10.13.

# Release Notes

- **Tor update** https://github.com/zkSNACKs/WalletWasabi/pull/5295
- **New support link** https://github.com/zkSNACKs/WalletWasabi/pull/5184
- **HWI update** https://github.com/zkSNACKs/WalletWasabi/pull/5331
- **Ledger Nano X support** https://github.com/zkSNACKs/WalletWasabi/pull/5270
</summary>
    <title>zkSNACKs/WalletWasabi: v1.1.12.5</title>
    <updated>2021-03-16T17:43:47Z</updated>
    <dc:date>2021-03-16T17:43:47Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin-core/HWI/releases/tag/2.0.0</id>
    <link href="https://github.com/bitcoin-core/HWI/releases/tag/2.0.0"/>
    <summary>Also available on [PyPi](https://pypi.org/project/hwi/) and can be installed with `pip install -U hwi`

## Added
* BitBox02 multisig signing.
* Documentation automatically generated with sphinx and hosted on https://hwi.readthedocs.io.
* Support for Python 3.9.
* Trezor allows transactions with OP_RETURN outputs.
* Full type annotations within `hwilib` and type checking.
* Updated documentation for Bitcoin Core descriptor wallets.
* Device support policy
* Enforce that the Ledger is in either the Bitcoin or Bitcoin Testnet apps.

## Changed
* `--sh_wpkh` and `--wpkh` options have been replaced with `--addr-type` with the options `legacy`, `sh_wit`, and `wit`.
* `--testnet` option replaced with `--chain` with the options `main`, `test`, `signet`, and `regtest`.
* Overhauled descriptors implementation to be similar to Bitcoin Core's descriptors implementation.
* Replaced `HardwareWalletClient.display_address` with `display_singlesig_address` and `display_multisig_address`.
* Overhauled `HardwareWalletClient` functions to return the correct objects rather than string dictionaries.
* Raise errors and exceptions instead of returning string dictionary containing error.
* `bech32.py`, `base58.py`, `cli.py`, and `gui.py` are made internal modules.
* `serializations.py` is split into `tx.py`, `psbt.py` with some functions made internal with `_script.py` and `_serialize.py`.
* `getmasterxpub` takes options for chain type, address type, and BIP 44 account in order to provide the master xpub accordingly.

## Removed
* Removed option to provide redeem script to `displayaddress`.

## Fixed
* Fixed Ledger change path detection.
* Fixed Ledger message signing when the signature is shorter than expected.
* Fixed Trezor One pin sending when a passphrase is expected.
* Fixed handling of `sortedmulti()` descriptors. Some devices which only supported key sorting will be no longer allow `multi()` descriptors. The multisigs that devices use when given a `sortedmulti()` descriptor will now match what Bitcoin Core derives for those descriptors.
* Several fixes to device enumeration.
* `installudevrules` will search for the correct binaries in the PATH rather than assuming their locations.</summary>
    <title>bitcoin-core/HWI: 2.0.0</title>
    <updated>2021-03-15T18:00:02Z</updated>
    <dc:date>2021-03-15T18:00:02Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin-core/HWI/releases/tag/2.0.0-rc.3</id>
    <link href="https://github.com/bitcoin-core/HWI/releases/tag/2.0.0-rc.3"/>
    <summary>Release Candidate 3 for HWI 2.0.0</summary>
    <title>bitcoin-core/HWI: 2.0.0-rc.3</title>
    <updated>2021-03-11T22:15:31Z</updated>
    <dc:date>2021-03-11T22:15:31Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.7.0</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.7.0"/>
    <summary>See [blog post](https://blog.btcpayserver.org/btcpay-server-v1-0-7-0/) for more details.

### Features:

* New Wallet Setup UI (see #2164, #2296) @dennisreimann @dstrukt
* Greenfield: New on-chain wallet API @Kukks
* Greenfield: Ability to configure store's lightning payment methods @Kukks
* Allow an invoice to be marked invalid/complete even from the `new` state @Kukks
* Point of Sale and Crowdfund: Allow custom buy button text (see #2299) @dennisreimann
* Specter wallet file import (see #2252) @dennisreimann

### Improvements:

* Reenabling uppercase BECH32 in QR codes (see #2110) @rockstardev
* If a store is set to internal node, use &quot;Internal Node&quot; as connection string rather than the actual connection string. @NicolasDorier
* Improve Policies options UX in server settings (see #2307) @dstrukt @dennisreimann
* Fix view payment request loading spinner alignment @bumbummen99 
* Fix cart pay button loading spinner vertical alignment @bumbummen99
* Invoices list: Remove icon indicator for onchain (see #2240) @dennisreimann
* Login: Improve tab navigation for input fields (see #2258) @dennisreimann

### Bug fixes:

* Hovering the mouse pointer on invoice logs row would make them unreadable @bolatovumar
* Remove exchange rates that lost support in Coingecko @NicolasDorier
* Get invoice in greenfield was crashing if invoiceId did not exist @NicolasDorier
* Getting a file from the storage service which did not exist would return http 500 instead of 404 @NicolasDorier
* Fix direct URL for local storage with custom root path #2318 @bolatovumar
* The pay button would not show up properly on some websites @bolatovumar
* Profile email change should check email's availability @NicolasDorier
* Fixed mysql/sqlite support @ketominer
* Checkout: Fix scan/copy tab sizes with varying content (see #2264) @dennisreimann
* Greenfield: Lightning API would return HTTP 500 if store owner did not set the connection string @dennisreimann
* Point of Sale: The custom price was not properly working (see #2248) @bolatovumar</summary>
    <title>btcpayserver/btcpayserver: v1.0.7.0</title>
    <updated>2021-03-11T14:50:16Z</updated>
    <dc:date>2021-03-11T14:50:16Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin-core/HWI/releases/tag/2.0.0-rc.2</id>
    <link href="https://github.com/bitcoin-core/HWI/releases/tag/2.0.0-rc.2"/>
    <summary>Release Candidate 2 for HWI 2.0.0</summary>
    <title>bitcoin-core/HWI: 2.0.0-rc.2</title>
    <updated>2021-03-05T19:53:45Z</updated>
    <dc:date>2021-03-05T19:53:45Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/phoenix/releases/tag/v1.4.8</id>
    <link href="https://github.com/ACINQ/phoenix/releases/tag/v1.4.8"/>
    <summary>## Main changes

The channel creation fee for pay-to-open has been increased: it's still 0.1% but there is now a 1000 sat minimum. The manual confirmation dialog and asynchronous pay-to-open logic have been removed. The FTUE page regarding the channel opening cost has been updated as well as the swap-in dialog so that we can display this new fee minimum value.

## Complete list of changes

- **app**: https://github.com/ACINQ/phoenix/compare/v1.4.7...v1.4.8

## Verifying signatures

You will need `gpg` and our release signing key E434ED292E85643A. Note that you can get it:
- from our website: https://acinq.co/pgp/padioupm.asc
- from github user @pm47, a committer on eclair: https://api.github.com/users/pm47/gpg_keys

To import our signing key:
```
$ gpg --import padioupm.asc
```

To verify the release file checksums and signatures:
```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```</summary>
    <title>ACINQ/phoenix: v1.4.8</title>
    <updated>2021-03-04T15:20:44Z</updated>
    <dc:date>2021-03-04T15:20:44Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/phoenix/releases/tag/v1.4.7</id>
    <link href="https://github.com/ACINQ/phoenix/releases/tag/v1.4.7"/>
    <summary>## Main changes

### Improve LNURL error feedback

Errors returned by LNURL services were not properly handled and information was lost, causing confusion, especially for LNURL-withdraw.

### Notify user when channel opening is rejected

If a new channel must be created to receive an incoming payment but the amount is below the channel creation threshold, a notification is displayed. Note that this is not enabled yet because changes on the peer side are also needed.

-- edit: this is now enabled.

## Complete list of changes

- **app**: https://github.com/ACINQ/phoenix/compare/v1.4.6...v1.4.7
- **core**: https://github.com/ACINQ/eclair/compare/v0.4.8-android-phoenix...v0.4.9-android-phoenix

Thanks again @bitcoinuser for updating the Portuguese-Brazilian translation.

## Verifying signatures

You will need `gpg` and our release signing key E434ED292E85643A. Note that you can get it:
- from our website: https://acinq.co/pgp/padioupm.asc
- from github user @pm47, a committer on eclair: https://api.github.com/users/pm47/gpg_keys

To import our signing key:
```
$ gpg --import padioupm.asc
```

To verify the release file checksums and signatures:
```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```</summary>
    <title>ACINQ/phoenix: v1.4.7</title>
    <updated>2021-03-04T15:20:33Z</updated>
    <dc:date>2021-03-04T15:20:33Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.5.9</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.5.9"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

This is a hotfix release that [fixes an issue when trading messages are resent on application startup](https://github.com/bisq-network/bisq/pull/5267).

Here are the release notes from v1.5.8:

## Release notes
This release improves DAO charts to make it easier to drill into the DAO economics, it ships improvements for Amazon eGift Cards, adds new SEPA countries and the possibility to try out pre-release versions without the need of manual downloads and verification (see settings)...and lots of bug fixes and improvements across the board.

### DAO
- [Improve facts and figures](https://github.com/bisq-network/bisq/pull/5156)

### UI
- [Add colored decimal places with zeros for dark mode](https://github.com/bisq-network/bisq/pull/5198)
- [Fix stale trade statistics list view when new entries arrive](https://github.com/bisq-network/bisq/pull/5122)

### Trading
- [Specify Amazon eGift Card country](https://github.com/bisq-network/bisq/pull/5117)
- [Add four SEPA payment account countries: AD, SM, VA, JE](https://github.com/bisq-network/bisq/pull/5123)
- [&quot;Cash by Mail&quot; instructions improvements](https://github.com/bisq-network/bisq/pull/5114)
- [Fix startup error: &quot;You must have bootstrapped before adding data to the P2P network&quot;](https://github.com/bisq-network/bisq/pull/5191)
- [Fix NullPointerException in trader chat when trade contract is not set](https://github.com/bisq-network/bisq/pull/5175)
- [Fix NullPointerException at offer entry when trading account is switched](https://github.com/bisq-network/bisq/pull/5172)
- [Prevent erroneous logging of 'SignaturePubKey in message does not match'](https://github.com/bisq-network/bisq/pull/5196)

### Wallet
- [Check wallet is available and/or unlocked when creating an offer](https://github.com/bisq-network/bisq/pull/5126)
- [Obtain the minimum withdrawal fee from mempool.space](https://github.com/bisq-network/bisq/pull/5235)

### Reliability
- [New Feature: Pre-release notifications](https://github.com/bisq-network/bisq/pull/5108)
- [Fix multiple request preliminary data calls](https://github.com/bisq-network/bisq/pull/5205)
- [Fix initialization ordering issue](https://github.com/bisq-network/bisq/pull/5219)

### Privacy
- [Update to Tor version v0.4.5.6 ](https://github.com/bisq-network/bisq/pull/5245)

### Mediation/Arbitration
- [Refund agent payout to use withdrawal fee rate from settings](https://github.com/bisq-network/bisq/pull/5178)
- [Manual payout tool: prevent absurdly high fee payout](https://github.com/bisq-network/bisq/pull/5099)
- [Fix Mediator's name](https://github.com/bisq-network/bisq/pull/5167)

### Performance
- [Speed up deposit and transactions view loads](https://github.com/bisq-network/bisq/pull/5120)

### Network
- [Replace deprecated Bisq explorer settings](https://github.com/bisq-network/bisq/pull/5137)
- [Show popup if no filter is delivered](https://github.com/bisq-network/bisq/pull/5136)

### API
- [Add api method 'stop'](https://github.com/bisq-network/bisq/pull/5202)
- [Api v1 Beta Test Guide](https://github.com/bisq-network/bisq/pull/5159)
- [Add core api method help docs](https://github.com/bisq-network/bisq/pull/5084)
- [Add apitest rolling offer simulation script](https://github.com/bisq-network/bisq/pull/5129)
- [Define gRPC api call rate constraints](https://github.com/bisq-network/bisq/pull/5103)
- [Fix method help typos](https://github.com/bisq-network/bisq/pull/5157)
- [Fix find pid on OSX](https://github.com/bisq-network/bisq/pull/5155)

### Development
- [Remove unused BalanceWithConfirmationTextField](https://github.com/bisq-network/bisq/pull/5134)
- [Avoid reverse DNS lookup in BtcNodeConverterTest](https://github.com/bisq-network/bisq/pull/5083)
- [Fix log message when opening browser link](https://github.com/bisq-network/bisq/pull/5111)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.5.9.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.5.9.jar`
The output need to match the value from the Bisq-1.5.9.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.5.9.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Credits

Thanks to everyone who directly contributed to this release:

- @chimp1984
- @ripcurlx 
- @ghubstan
- @huey735 
- @jakub_cz
- @jmacxx 
- @sqrrm 
- @stejbac
- @bisqubutor

A special thanks to our first time contributor:

- @bisqubutor: [Add colored decimal places with zeros for dark mode](https://github.com/bisq-network/bisq/pull/5198)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.5.9</title>
    <updated>2021-03-03T12:38:54Z</updated>
    <dc:date>2021-03-03T12:38:54Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/eclair/releases/tag/v0.5.1</id>
    <link href="https://github.com/ACINQ/eclair/releases/tag/v0.5.1"/>
    <summary>This release includes many bug fixes and improvements, a new API and monitoring updates.
It is fully compatible with 0.5.0 (and all previous versions of eclair).

# Major changes

### Improved startup performance

When eclair starts up and restores channels, it makes a lot of calls to `bitcoind` to check the status of each channel.
We improved our calling pattern to greatly reduce the number of calls made when some channels are closing.
This is particularly noticeable when the mempool is quite full and you have many channels.

See #1699 for details.

### Gossip sync improvements

Most of the bandwidth consumed by lightning nodes is due to gossip (syncing the network graph).
When your eclair node has a lot of peers and doesn't use a `sync-whitelist`, you may end up syncing with many different peers and obtaining redundant information, thus wasting bandwidth.
Eclair now only syncs with peers you have a channel with to reduce bandwidth usage.

### Anchor outputs

This release contains a lot of changes for the upcoming anchor outputs commitment format:

- the feerate of the commitment transaction is kept low to improve off-chain channel usage
- transactions with multiple inputs and outputs are now supported
- CPFP and RBF utilities have been added to increase the feerate of commitment and htlc transactions

While you can start experimenting with this commitment format, it is still not safe to activate in production.
Anchor outputs is a complex and subtle change that requires re-architecting most of our transaction broadcasting logic and utxo management.
We are making steady progress towards that, but we're not there yet.

### Monitoring changes

Kamon tracing has been removed in this release.
It was too invasive in the codebase, generally unused and was costing some bandwidth.
We've found that metrics and logs are enough to correctly monitor your eclair node.

Additional metrics to monitor transaction signing have been added.
The rate of transaction signatures is a good indicator of how busy your node is.

### API changes

This release adds a new path-finding API:

- `findroutebetweennodes` lets you inspect the network graph by looking for routes between two nodes (whereas `findroute` only allowed finding routes between your node and a remote node)

Head over to our [API documentation](https://acinq.github.io/eclair) for more details.

### Miscellaneous improvements and bug fixes

- Correctly sort addresses in its `node_announcement` (#1693)
- Allow 2016 blocks before unconfirmed channels are forgotten (#1692)
- Re-emit private channel updates more frequently, improving payments to mobile wallets (#1671)
- Correctly handle channel failures in private routing hints, fixing an edge case for payments to mobile wallets (#1675)
- Drop support for `initial_routing_sync`: this was bandwidth-heavy and now unnecessary (#1683)
- Fix an MPP-send edge-case (#1685)
- Fix race condition between outgoing payment and peer disconnection (#1688)
- Fix race condition between `update_fee` and `shutdown`, which could lead to channels stuck in `shutdown` (#1661)
- Ensure transactions we publish always meet bitcoin's `min_relay_fee` (#1687)
- Fix an edge case where an HTLC failure was not correctly relayed upstream if `revoke_and_ack` had not been received (#1706)

# Verifying signatures

You will need `gpg` and our release signing key 7A73FE77DE2C4027. Note that you can get it:

- from our website: https://acinq.co/pgp/drouinf.asc
- from github user @sstone, a committer on eclair: https://api.github.com/users/sstone/gpg_keys

To import our signing key:

```sh
$ gpg --import drouinf.asc
```

To verify the release file checksums and signatures:

```sh
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```

# Building

Eclair builds are deterministic. To reproduce our builds, please use the following environment (*):

- Ubuntu 19.10
- AdoptOpenJDK 11.0.6
- Maven 3.6.3

Use the following command to generate the eclair-node package:

```sh
mvn clean install -DskipTests
```

That should generate `eclair-node/target/eclair-node-0.5.1-XXXXXXX-bin.zip` with sha256 checksums that match the one we provide and sign in `SHA256SUMS.asc`

(*) You may be able to build the exact same artefacts with other operating systems or versions of JDK 11, we have not tried everything.

# Upgrading

This release is fully compatible with Eclair v0.5.0. You don't need to close your channels, just stop eclair, upgrade and restart.

# Changelog

- 923ca26f Set version to 0.5.1-SNAPSHOT (#1651)
- b75f6c36 Fix duplicate commit id in awseb bundle (#1650)
- 5f9d0d91 Relax cltv-expiry-delta requirement when selecting a channel to relay (#1655)
- dd8975ae Make ChannelVersion methods public (#1656)
- 7343283f Add test for duplicate temporary channel id (#1660)
- 629c2e69 Fix rare race conditions in integration tests (#1653)
- b477d179 Update build instructions for front (#1658)
- e369ba9a More aggressively re-emit private channel updates (#1671)
- d40b321d Blockchain watchdogs use unique actor name (#1667)
- 9c4ab7d9 Fix HTLC fulfill race condition in integration spec (#1666)
- 81f15aab Refactor and improve some channel tests (#1654)
- 54ca2922 Remove kamon tracing (#1662)
- 34e901db Clarify default relay fee change (#1673)
- c75d9143 Fix failing reconnection tests (#1678)
- 0127ace4 Remote failure updating routing hint (#1675)
- ac054a2b Only sync with channel peers (#1587)
- d0531883 Truncate hex strings in front logs (#1679)
- 49023625 Refactor channel test helpers (#1682)
- f241ef93 Remove support for initial_routing_sync (#1683)
- 63d972bd Fix a few typos (#1684)
- 5d3958dd Fix MPP path-finding edge case (#1685)
- 15c1837d Add tx signing metrics (#1659)
- 72179de0 PaymentLifecycle handle disconnected peers (#1688)
- fdeb3ce7 Correctly set gossip sync_complete (#1668)
- 36e8c056 Shutdown and UpdateFee should not be intertwined (#1661)
- 2a359c6a Publish txs with min-relay-fee met (#1687)
- 82e5b596 Sort addresses in node announcement (#1693)
- 3a94a804 Reject unreasonable remote dust limit (#1694)
- fdb57b43 Find route between nodes (#1695)
- 9618a6a7 Add a maximum fee threshold for anchor outputs (#1672)
- ab89851c Relax single tx input requirements (#1677)
- 08351508 Update funding timeout fundee (#1692)
- d9c0b862 Refactor bitcoin clients (#1697)
- 5163749a [eclair-cli] Use multiplatform escape sequence
- fa759f1e Fix PaymentLifecycle warning (#1703)
- c1bf9bd1 Optimize watching for spending txs (#1699)
- d02b900a Fix annoying compiler warning (#1704)
- a3c477e3 Address all intellij warnings for Channel.scala (#1705)
- bf2a35f7 Relay partially failed htlcs when closing (#1706)
- 5d662fc3 Set anchor output feerates when force-closing (#1702)
- 8065d0bb Add a serializer for `DoSync` (#1708)
- 8d4da2fa Improve channel state tests (#1709)
- 26468862 fixup! Improve channel state tests (#1709) (#1712)
- 34796691 Disable jdbc instrumentation by default (#1713)
- 98bb7be7 Set version to 0.5.1 (#1707)

Thanks to our new contributors, @tompro and @ariskk!</summary>
    <title>ACINQ/eclair: v0.5.1</title>
    <updated>2021-03-03T12:33:57Z</updated>
    <dc:date>2021-03-03T12:33:57Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.6</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.6"/>
    <summary>**New**

- Offline Signing and Cold Storage

Allows a BlueWallet app on any mobile phone to sign transactions offline. Using PSBTs and Airgapped Animated QR codes to transmit information on the dark.

- Long press on Transaction Row to get shortcuts
- Tap and hold to Share QRCode image
- QR code scanner to wallet/broadcast screen
- Apple Watch Price Complication
- Copying Block Explorer Link
- If unable to connect to server, show alert

**Fixed**

- Wallet delete would cause crash
- Browser crash when accessing wallet
- Widgets were not showing on drawer
- Screen titles language
- QRCode save alert description
- QRCode size on large devices
- Transactions/details screen graceful error handling
- Electrum protocol graceful error handling
- Better bitcoinscript error handling
- Fee selection in darkmode

**Languages updates**

- Arabic, Russian, Greek, Polish, Japanese, Portuguese, Portuguese Brazilian, Swedish, Thai, Finnish, Persian, Dutch, German, French and Chinese.

A special shout out to @bitkarrot and @et_sam from the Hong Kong Bitcoin Association on the Chinese translation work.

**Download**

[![Appstore](https://bluewallet.io/uploads/app-store-badge-blue.svg)](https://github.com/BlueWallet/BlueWallet/releases/download/v6.0.6/BlueWallet.6.0.6.dmg)

[![Playstore](https://bluewallet.io/uploads/play-store-badge-blue.svg)](https://github.com/BlueWallet/BlueWallet/releases/download/v6.0.6/BlueWallet-v6.0.6.apk)
</summary>
    <title>BlueWallet/BlueWallet: v6.0.6</title>
    <updated>2021-03-02T14:09:23Z</updated>
    <dc:date>2021-03-02T14:09:23Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.5.8</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.5.8"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

This is a follow-up release that [obtains the minimum withdrawal fee from mempool.space](https://github.com/bisq-network/bisq/pull/5235) to avoid transactions being rejected by the bitcoin network for having too low a fee.

Here are the release notes from v1.5.7:

## Release notes
This release improves DAO charts to make it easier to drill into the DAO economics, it ships improvements for Amazon eGift Cards, adds new SEPA countries and the possibility to try out pre-release versions without the need of manual downloads and verification (see settings)...and lots of bug fixes and improvements across the board.

### DAO
- [Improve facts and figures](https://github.com/bisq-network/bisq/pull/5156)

### UI
- [Add colored decimal places with zeros for dark mode](https://github.com/bisq-network/bisq/pull/5198)
- [Fix stale trade statistics list view when new entries arrive](https://github.com/bisq-network/bisq/pull/5122)

### Trading
- [Specify Amazon eGift Card country](https://github.com/bisq-network/bisq/pull/5117)
- [Add four SEPA payment account countries: AD, SM, VA, JE](https://github.com/bisq-network/bisq/pull/5123)
- [&quot;Cash by Mail&quot; instructions improvements](https://github.com/bisq-network/bisq/pull/5114)
- [Fix startup error: &quot;You must have bootstrapped before adding data to the P2P network&quot;](https://github.com/bisq-network/bisq/pull/5191)
- [Fix NullPointerException in trader chat when trade contract is not set](https://github.com/bisq-network/bisq/pull/5175)
- [Fix NullPointerException at offer entry when trading account is switched](https://github.com/bisq-network/bisq/pull/5172)
- [Prevent erroneous logging of 'SignaturePubKey in message does not match'](https://github.com/bisq-network/bisq/pull/5196)

### Wallet
- [Check wallet is available and/or unlocked when creating an offer](https://github.com/bisq-network/bisq/pull/5126)
- [Increase min withdrawal tx fee to 15 sats/vB](https://github.com/bisq-network/bisq/pull/5224)

### Reliability
- [New Feature: Pre-release notifications](https://github.com/bisq-network/bisq/pull/5108)
- [Fix multiple request preliminary data calls](https://github.com/bisq-network/bisq/pull/5205)
- [Fix initialization ordering issue](https://github.com/bisq-network/bisq/pull/5219)

### Privacy
- [Update to Tor version v0.4.5.6 ](https://github.com/bisq-network/bisq/pull/5245)

### Mediation/Arbitration
- [Refund agent payout to use withdrawal fee rate from settings](https://github.com/bisq-network/bisq/pull/5178)
- [Manual payout tool: prevent absurdly high fee payout](https://github.com/bisq-network/bisq/pull/5099)
- [Fix Mediator's name](https://github.com/bisq-network/bisq/pull/5167)

### Performance
- [Speed up deposit and transactions view loads](https://github.com/bisq-network/bisq/pull/5120)

### Network
- [Replace deprecated Bisq explorer settings](https://github.com/bisq-network/bisq/pull/5137)
- [Show popup if no filter is delivered](https://github.com/bisq-network/bisq/pull/5136)

### API
- [Add api method 'stop'](https://github.com/bisq-network/bisq/pull/5202)
- [Api v1 Beta Test Guide](https://github.com/bisq-network/bisq/pull/5159)
- [Add core api method help docs](https://github.com/bisq-network/bisq/pull/5084)
- [Add apitest rolling offer simulation script](https://github.com/bisq-network/bisq/pull/5129)
- [Define gRPC api call rate constraints](https://github.com/bisq-network/bisq/pull/5103)
- [Fix method help typos](https://github.com/bisq-network/bisq/pull/5157)
- [Fix find pid on OSX](https://github.com/bisq-network/bisq/pull/5155)

### Development
- [Remove unused BalanceWithConfirmationTextField](https://github.com/bisq-network/bisq/pull/5134)
- [Avoid reverse DNS lookup in BtcNodeConverterTest](https://github.com/bisq-network/bisq/pull/5083)
- [Fix log message when opening browser link](https://github.com/bisq-network/bisq/pull/5111)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.5.8.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.5.8.jar`
The output need to match the value from the Bisq-1.5.8.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.5.8.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Credits

Thanks to everyone who directly contributed to this release:

- @chimp1984
- @ripcurlx 
- @ghubstan
- @huey735 
- @jakub_cz
- @jmacxx 
- @sqrrm 
- @stejbac
- @bisqubutor

A special thanks to our first time contributor:

- @bisqubutor: [Add colored decimal places with zeros for dark mode](https://github.com/bisq-network/bisq/pull/5198)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.5.8</title>
    <updated>2021-03-01T14:26:42Z</updated>
    <dc:date>2021-03-01T14:26:42Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.3.7</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.3.7"/>
    <summary>This update includes minor bug fixes for improved stability and security of your Umbrel.

If you face any difficulties while updating, please message us on Telegram: https://t.me/getumbrel

Diff: https://github.com/getumbrel/umbrel/compare/v0.3.6...v0.3.7</summary>
    <title>getumbrel/umbrel: v0.3.7</title>
    <updated>2021-02-28T15:02:41Z</updated>
    <dc:date>2021-02-28T15:02:41Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.3.6</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.3.6"/>
    <summary>Umbrel v0.3.6 brings some performance improvements to the Mempool app, updates LND to v0.12.1, and includes some other small bug fixes.

If you face any difficulties while updating, please message us on Telegram: https://t.me/getumbrel

Diff: https://github.com/getumbrel/umbrel/compare/v0.3.5...v0.3.6</summary>
    <title>getumbrel/umbrel: v0.3.6</title>
    <updated>2021-02-27T16:44:00Z</updated>
    <dc:date>2021-02-27T16:44:00Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.5.7</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.5.7"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

## Release notes
This release improves DAO charts to make it easier to drill into the DAO economics, it ships improvements for Amazon eGift Cards, adds new SEPA countries and the possibility to try out pre-release versions without the need of manual downloads and verification (see settings)...and lots of bug fixes and improvements across the board.

### DAO
- [Improve facts and figures](https://github.com/bisq-network/bisq/pull/5156)

### UI
- [Add colored decimal places with zeros for dark mode](https://github.com/bisq-network/bisq/pull/5198)
- [Fix stale trade statistics list view when new entries arrive](https://github.com/bisq-network/bisq/pull/5122)

### Trading
- [Specify Amazon eGift Card country](https://github.com/bisq-network/bisq/pull/5117)
- [Add four SEPA payment account countries: AD, SM, VA, JE](https://github.com/bisq-network/bisq/pull/5123)
- [&quot;Cash by Mail&quot; instructions improvements](https://github.com/bisq-network/bisq/pull/5114)
- [Fix startup error: &quot;You must have bootstrapped before adding data to the P2P network&quot;](https://github.com/bisq-network/bisq/pull/5191)
- [Fix NullPointerException in trader chat when trade contract is not set](https://github.com/bisq-network/bisq/pull/5175)
- [Fix NullPointerException at offer entry when trading account is switched](https://github.com/bisq-network/bisq/pull/5172)
- [Prevent erroneous logging of 'SignaturePubKey in message does not match'](https://github.com/bisq-network/bisq/pull/5196)

### Wallet
- [Check wallet is available and/or unlocked when creating an offer](https://github.com/bisq-network/bisq/pull/5126)
- [Increase min withdrawal tx fee to 15 sats/vB](https://github.com/bisq-network/bisq/pull/5224)

### Reliability
- [New Feature: Pre-release notifications](https://github.com/bisq-network/bisq/pull/5108)
- [Fix multiple request preliminary data calls](https://github.com/bisq-network/bisq/pull/5205)
- [Fix initialization ordering issue](https://github.com/bisq-network/bisq/pull/5219)

### Privacy
- [Update to Tor version v0.4.5.6 ](https://github.com/bisq-network/bisq/pull/5245)

### Mediation/Arbitration
- [Refund agent payout to use withdrawal fee rate from settings](https://github.com/bisq-network/bisq/pull/5178)
- [Manual payout tool: prevent absurdly high fee payout](https://github.com/bisq-network/bisq/pull/5099)
- [Fix Mediator's name](https://github.com/bisq-network/bisq/pull/5167)

### Performance
- [Speed up deposit and transactions view loads](https://github.com/bisq-network/bisq/pull/5120)

### Network
- [Replace deprecated Bisq explorer settings](https://github.com/bisq-network/bisq/pull/5137)
- [Show popup if no filter is delivered](https://github.com/bisq-network/bisq/pull/5136)

### API
- [Add api method 'stop'](https://github.com/bisq-network/bisq/pull/5202)
- [Api v1 Beta Test Guide](https://github.com/bisq-network/bisq/pull/5159)
- [Add core api method help docs](https://github.com/bisq-network/bisq/pull/5084)
- [Add apitest rolling offer simulation script](https://github.com/bisq-network/bisq/pull/5129)
- [Define gRPC api call rate constraints](https://github.com/bisq-network/bisq/pull/5103)
- [Fix method help typos](https://github.com/bisq-network/bisq/pull/5157)
- [Fix find pid on OSX](https://github.com/bisq-network/bisq/pull/5155)

### Development
- [Remove unused BalanceWithConfirmationTextField](https://github.com/bisq-network/bisq/pull/5134)
- [Avoid reverse DNS lookup in BtcNodeConverterTest](https://github.com/bisq-network/bisq/pull/5083)
- [Fix log message when opening browser link](https://github.com/bisq-network/bisq/pull/5111)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.5.7.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.5.7.jar`
The output need to match the value from the Bisq-1.5.7.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.5.7.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Credits

Thanks to everyone who directly contributed to this release:

- @chimp1984
- @ripcurlx 
- @ghubstan
- @huey735 
- @jakub_cz
- @jmacxx 
- @sqrrm 
- @stejbac
- @bisqubutor

A special thanks to our first time contributor:

- @bisqubutor: [Add colored decimal places with zeros for dark mode](https://github.com/bisq-network/bisq/pull/5198)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.5.7</title>
    <updated>2021-02-26T19:18:20Z</updated>
    <dc:date>2021-02-26T19:18:20Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.12.1-beta</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.12.1-beta"/>
    <summary># Database Migrations

There are no database migrations in `v0.12.1-beta`.

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/bitconner/pgp_keys.asc | gpg --import
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-roasbeef-v0.12.1-beta.sig` and `manifest-v0.12.1-beta.txt` are in the current directory) with:

```
gpg --verify manifest-roasbeef-v0.12.1-beta.sig manifest-v0.12.1-beta.txt
```

You should see the following if the verification was successful:

```
gpg: Signature made Mon Feb 22 19:23:11 2021 PST
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Timestamp 

From this new version onwards, in addition time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: ` manifest-roasbeef-v0.12.1-beta.txt.asc.ots`.

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-roasbeef-v0.12.1-beta.sig.ots 
ots verify manifest-v0.12.1-beta.txt.ots
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved.
The release binaries are compiled with `go1.15.7`, which is required by verifiers to arrive at the same ones.
They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.12.1-beta
gpg: Signature made Mon Feb 22 17:11:56 2021 PST
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

## Verifying the Docker Images

To verify the `lnd` and `lncli` binaries inside the docker images against the signed, reproducible release binaries, there is a verification script in the image that can be called (before starting the container for example):

```shell
$ docker run --rm --entrypoint=&quot;&quot; lightninglabs/lnd:v0.12.1-beta /verify-install.sh v0.12.1-beta
$ OK=$?
$ if [ &quot;$OK&quot; -ne &quot;0&quot; ]; then echo &quot;Verification failed!&quot;; exit 1; done
$ docker run lightninglabs/lnd [command-line options]
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming
that `vendor.tar.gz` and `lnd-source-v0.12.1-beta.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.12.1-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.1-beta&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.1-beta&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## Spec Compatibility

 - 0.12.1-beta fixes a [recently discovered edge-case in the spec](https://github.com/lightningnetwork/lightning-rfc/issues/794) surrounding retransmission of `RevokeAndAck` and `CommitSig` that can lead to channel force closures if they are not retransmitted in the same order upon reconnection. This version now [persists this extra state required to determine the correct transmission order](https://github.com/lightningnetwork/lnd/pull/4915), [in accordance with the new spec requirements](https://github.com/lightningnetwork/lightning-rfc/pull/810). This eliminates a potential vector for channel desynchronization on restart once both sides of the channel have updated and a successful state transition is performed.
 - Prior to this version, `lnd` may have incorrectly attempted an MPP payment even if the receiver's `NodeAnnouncement` or invoice did not set the MPP feature bit. This was caused by a bug that incorrectly assumed support for `payment_secrets` implied support for MPP. A fix has been applied that [limits the maximum number of splits to 1 when the receiver doesn't support MPP](https://github.com/lightningnetwork/lnd/pull/4924).

## Gossip Propagation Improvements

This release [reverts the removal of the premature channel update cache](https://github.com/lightningnetwork/lnd/pull/5003) that was removed in 0.12.0-beta. Absence of the cache was seen to cause issues with channel update propagation, so the change is reverted to restore the pre-0.12.0-beta behavior and stability. The current plan is to reschedule the cache's removal for 0.13 after performing more extensive investigation.
 
In addition, the gossip throttling adding in v0.12.0 has been [refactored to be less aggressive with respect to non-keepalive channel updates](https://github.com/lightningnetwork/lnd/pull/5006), i.e. channel updates that differ in more than just the timestamp. Previously `lnd` would drop all but the first such update that it received over the course of a block, which has reportedly been too restrictive and resulted in degraded propagation of routine channel updates.

The new throttling logic now employs a directional [token bucket rate limiter](https://en.wikipedia.org/wiki/Token_bucket), the same approach used by `lnd` to rate-limit gossip requests from sync peers. Each token bucket is configured to drop non-keepalive updates arriving faster that once per minute, yet permitting bursts of up 10 updates. This improves on the previous approach in a few ways:
 - Updates are now limited with respect to a consistent time source, i.e. seconds, rather than block height. This makes it easier to reason about when channel updates might get dropped as an average user, and places a deterministic bound on the next time a normal user can reliably update their channel again.
 - The rate limits are now applied _directionally_, so that one end of the channel cannot cause their counterparty's channel updates to be dropped. This has the effect of making the penalization more precise, and better targets individuals that exhibit abusive behavior.
 - By factoring in bursts, it provides enough tolerance for cases where policy changes that may occur in quick succession, e.g. disable followed by reenable, or modifying a channel policy immediately after open.

## No Gossip Mode

This release includes support for a [no-graph sync mode](https://github.com/lightningnetwork/lnd/pull/4945) which can be enabled by setting `numgraphsyncpeers=0`. In prior versions, running `lnd` in this configuration would still trigger an initial historical sync with the first connected peer on each restart. The behavior was modified under the assumption that users who have already configured `lnd` to not receive gossip updates probably don't want to sync the graph at all.

This mode is especially helpful to wallet developers that choose to outsource pathfinding via their own service, or purely forwarding nodes that never need to perform pathfinding.

## Pinned Gossip Syncers

Typically `lnd` performs this historical channel reconciliation periodically, rotating between the set of all active peers, and attempting to keep `numgraphsyncpeers` (defaults to 3) in a state where they are receiving new gossip messages. Due to the eventually consistent properties of this algorithm (and the gossip protocol in general), there are some cases that lead to long delays in a node receiving newer updates. Notably, if a node has many peers, then it may be a while before the sync rotation algorithm queries a given peer for newer updates.

To provide more control, a new configuration option has been added [allowing users to _pin_ their nodes into an ActiveSync with particular nodes](https://github.com/lightningnetwork/lnd/pull/4934). Each time a connection is established with a pinned syncer, `lnd` will first perform a historical channel reconciliation, followed by a request for the pinned syncer to forward all new gossip messages. Doing so allows users to keep their routing table tightly synchronized with nodes in their list of configured, pinned syncers. Users can add one or more pinned syncers via:
```
gossip.pinned-syncers=&lt;pubkey1&gt;
gossip.pinned-syncers=&lt;pubkey2&gt;
```
This can be especially useful for services that run multiple, well-connected `lnd` nodes, and want their own nodes to maintain similar views of the channel graph. Users can also use `gossip.pinned-syncers` in combination with `numgraphsyncpeers=0` to only sync from a specific peer.

## RPC Changes
 - `lnd` 0.12.1-beta now [exposes the HTLC `attempt_id` on response from `TrackPayment`](https://github.com/lightningnetwork/lnd/pull/4956). Internally, `lnd` uses `attempt_id` as a unique identifier for each HTLC it sends out, and to provide a total ordering on all HTLC sent by the daemon.  This identifier can be used by developers to better reflect progress of a payment, making it easier to extract per-HTLC state deltas rather than displaying the full payment state every time.
- Adds a new `MaxShardSizeMsat` argument to `SendPayment`, allowing users to cap the maximum value of any MPP shard sent out by `lnd`. Users can now set this from `lncli` via either the `max_shard_size_sat` or `max_shard_size_msat` field. 


## Deterministic Build / Release Verification
 - The signature verification script [was fixed to no longer fail if a public key of a signature is missing](https://github.com/lightningnetwork/lnd/pull/4963) and @halseth's [signing public keys were added](https://github.com/lightningnetwork/lnd/pull/4962).
 - The [golang version `1.15.7`](https://github.com/lightningnetwork/lnd/pull/4961) is now used for compilation across all build processes.
 - The release process has been modified to [clean any generated mobile stubs before packaging/verifying the release](https://github.com/lightningnetwork/lnd/pull/4983). Without doing so, users would arrive at a different `vendor.tar.gz` depending on whether or not they had previously run `make mobile` due to small differences in the imports present in the project.
 - Fixed an issue that allowed GO_VERSION of the release toolchain to be spuriously updated to newer releases of go. This was hit unexpectedly in the v0.12.1-beta.rc2 release cycle where the release binaries were built with go1.15.8, which had been released earlier in the week, rather than go1.15.7 which is pinned in our release/verify docker containers. As a result, building the release locally did not match the binaries uploaded by github to the release. We resolved this by _exactly_ [pinning the GO_VERSION used to compile the release binaries](https://github.com/lightningnetwork/lnd/pull/5013).
 - Allows users to [pass custom paths for `lnd` or `lncli` when verifying binaries](https://github.com/lightningnetwork/lnd/pull/5021).
 - Switches the [signing on the release manfest to use detached signatures](https://github.com/lightningnetwork/lnd/pull/5019) rather than clear signing the manifest.
 - The release [verification script now requires 5 of the 7 developer signatures on the manifest](https://github.com/lightningnetwork/lnd/pull/5023) before attempting to verify the hashes of `lnd` or `lncli`.
 - The release [verification script now selects either `sha256sum` or `shasum`](https://github.com/lightningnetwork/lnd/pull/5037) to increase portability and fix the docker `verify-install.sh` command.
 - Fixed an issue that would cause[ `make docker-release` to pull in the go version of the host machine](https://github.com/lightningnetwork/lnd/pull/5037), rather than the go version pinned inside the docker container.

## Developer Toolchain
 - Some of the GitHub Action scripts [were replaced by vendored scripts](https://github.com/lightningnetwork/lnd/pull/4952) to prevent secret extraction through malicious code.
 - The build process was [enhanced with a `make imports`](https://github.com/lightningnetwork/lnd/pull/2162) command that organizes all golang import statements.
 - The protobuf definitions are now compiled [using docker](https://github.com/lightningnetwork/lnd/pull/4911) to avoid needing to install a set of binaries and libraries with exact pinned versions. The instructions on how to [format the proto files with MacOS](https://github.com/lightningnetwork/lnd/pull/4944) were added as well.

## Bug Fixes
 - Fixes a bug that can result in a [panic when generating hodl invoices for private channels](https://github.com/lightningnetwork/lnd/pull/4978). An [itest has also been added for generating hodl invoices using private channels](https://github.com/lightningnetwork/lnd/pull/4996) to provide more complete coverage of this area going forward.
 - Fixes a [resource utilization issue cause by too many concurrent block fetches from the backend](https://github.com/lightningnetwork/lnd/pull/5043) that would cause the rpc interface to hang.
 - Squashes a bug that results in a [startup error when the daemon exits while in the middle of processing graph updates for its own channels](https://github.com/lightningnetwork/lnd/pull/4958).
 - Creates a [fast-path for persisting locally-created gossip messages](https://github.com/lightningnetwork/lnd/pull/4964) rather than waiting to be batched with remote graph updates. This reduces the likelihood of partially-writes for local graph updates, which was partially patched in https://github.com/lightningnetwork/lnd/pull/4958.
 - The development docker files were [fixed by adding an extra listener](https://github.com/lightningnetwork/lnd/pull/4938) to make sure the beginner tutorial can be followed without running into errors.
 - Fixes an [error message returned when attempting to bind a REST listener on a public interface without authentication](https://github.com/lightningnetwork/lnd/pull/4993), such that it returns the relevant configuration flag (`no-rest-tls`).
 - Fixes an issue with [IPv6 address resolution when using `tor.active`](https://github.com/lightningnetwork/lnd/pull/4988) such that `lnd` will fall back to the system resolver.
 - Fixes an issue with [IP alias resolution](https://github.com/lightningnetwork/lnd/pull/5007) such that `lnd` will fall back to the system resolver.
 - Fixes a bug where [SCB file paths weren't properly expanded when in the home directory](https://github.com/lightningnetwork/lnd/pull/5020).
 - Fixes some itest flakes caused by [stray logs that were not in the error whitelist](https://github.com/lightningnetwork/lnd/pull/5016).
 - Resolves some [htlcswitch unit test flakes that would trigger if the test ran longer than expected](https://github.com/lightningnetwork/lnd/pull/5026).

## Full Changelog
 - https://github.com/lightningnetwork/lnd/pull/4958 - netann: ignore unknown channel update on startup
 - https://github.com/lightningnetwork/lnd/pull/4962 - scripts: add halseth key to verify script
 - https://github.com/lightningnetwork/lnd/pull/4938 - docker: add an extra listener for localhost
 - https://github.com/lightningnetwork/lnd/pull/4944 - docs: Add clang-format instructions for mac
 - https://github.com/lightningnetwork/lnd/pull/4956 - lnrpc: add htlc attempt id
 - https://github.com/lightningnetwork/lnd/pull/4952 - Github: use vendored actions for steps with sensitive info
 - https://github.com/lightningnetwork/lnd/pull/4963 - scripts: don't fail signature verification on missing public key
 - https://github.com/lightningnetwork/lnd/pull/2162 - Makefile: define `make imports`
 - https://github.com/lightningnetwork/lnd/pull/4911 - lnrpc/mobile: use docker to compile/format protos
 - https://github.com/lightningnetwork/lnd/pull/4974 - Fix typo in restorechanbackup command description
 - https://github.com/lightningnetwork/lnd/pull/4902 - lntest/channels: introduce subpackage to deduplicate structs
 - https://github.com/lightningnetwork/lnd/pull/4978 - invoices+rpc: add missing channel graph to the AddInvoiceConfig
 - https://github.com/lightningnetwork/lnd/pull/4934 - discovery: pinned syncers
 - https://github.com/lightningnetwork/lnd/pull/4924 - routerrpc,routing: limit max parts if the invoice doesn't declare MPP support
 - https://github.com/lightningnetwork/lnd/pull/4961 - build: update CI builds to use go 1.15.7
 - https://github.com/lightningnetwork/lnd/pull/4979 - routing: add new TestPaymentAddrOnlyNoSplit test case
 - https://github.com/lightningnetwork/lnd/pull/4915 - multi: store bool to determine retransmission ordering
 - https://github.com/lightningnetwork/lnd/pull/4981 - docs: correct sign command
 - https://github.com/lightningnetwork/lnd/pull/4983 - make: clean mobile stubs before building release
 - https://github.com/lightningnetwork/lnd/pull/4993 - fix: correct no-rest-tls parameter in error message
 - https://github.com/lightningnetwork/lnd/pull/5003 - Revert: https://github.com/lightningnetwork/lnd/pull/4895 to store premature channel updates
 - https://github.com/lightningnetwork/lnd/pull/4996 - itest: add coverage for hold invoices with hop hints
 - https://github.com/lightningnetwork/lnd/pull/4945 - discovery: no graph sync
 - https://github.com/lightningnetwork/lnd/pull/4964 - channeldb+routing+gossiper: add local updates to graph immediately
 - https://github.com/lightningnetwork/lnd/pull/5006 - discovery: use token bucket based rate limiting to throttle gossip
 - https://github.com/lightningnetwork/lnd/pull/4988 - add isIPv6Host helper to force v6 addrs through system resolver
 - https://github.com/lightningnetwork/lnd/pull/5007 - lncfg: add IPv6 resolution bypass &amp; account for local hostname aliases
 - https://github.com/lightningnetwork/lnd/pull/5013 - github/workflows: pin exact docker release
 - https://github.com/lightningnetwork/lnd/pull/5021 - scripts: allow verification of custom binary
 - https://github.com/lightningnetwork/lnd/pull/5020 - config: clean and expand backup file path
 - https://github.com/lightningnetwork/lnd/pull/5019 - release: create and verify detached signatures, fix hashing command on MacOS
 - https://github.com/lightningnetwork/lnd/pull/5023 - scripts/verify-install: require 5-of-7 signatures before accepting
 - https://github.com/lightningnetwork/lnd/pull/5016 - lntest: update error whitelist
 - https://github.com/lightningnetwork/lnd/pull/5026 - htlcswitch: init mockFeeEstimator in other ChannelLinkConfigs
 - https://github.com/lightningnetwork/lnd/pull/5017 - routing: if MaxShardAmt is set, then use that as a ceiling for our splits (does not change default to 16 for MaxParts)
- https://github.com/lightningnetwork/lnd/pull/5037 - release: fix golang version issue in docker-release and shasum issue in verification script
- https://github.com/lightningnetwork/lnd/pull/5043 - routing: dial back max concurrent block fetches

# Contributors (Alphabetical Order)

Andras Banki-Horvath
Carla Kirk-Cohen
Conner Fromknecht
Eugene Siegel
Jake Sylvestre
Johan T. Halseth
Joost Jager
Juan Pablo Civile
Olaoluwa Osuntokun
Oliver Gugger
rockstardev
Umar Bolatov
Vlad Stan
Wilmer Paulino</summary>
    <title>lightningnetwork/lnd: v0.12.1-beta</title>
    <updated>2021-02-23T18:16:42Z</updated>
    <dc:date>2021-02-23T18:16:42Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.2.2</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.2.2"/>
    <summary># v1.2.2 (Hotfix release for Send transaction error)
# Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.2/Specter-Setup-v1.2.2.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.2/SpecterDesktop-v1.2.2.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.2/specter_desktop-v1.2.2-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

**Note on macOS**: The current build supports only macOS Catalina (10.15) or higher. If you'd like to run Specter on an older macOS version, you can [install Specter from Pip](https://github.com/cryptoadvance/specter-desktop#installing-specter-from-pip).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.2/specterd-v1.2.2-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.2/specterd-v1.2.2-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.2/specterd-v1.2.2-x86_64-linux-gnu.zip)

# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.2/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @stepansnigirev's GPG key.
You can get the public key from here: [https://stepansnigirev.com/ss-specter-release.asc](https://stepansnigirev.com/ss-specter-release.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x36ED357AB24B915F) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/6F16E354F83393D6E52EC25F36ED357AB24B915F).
Fingerprint of the key is `6F16 E354 F833 93D6 E52E  C25F 36ED 357A B24B 915F`, short id: `36ed357ab24b915f`

# Release notes
- Bugfix: Hot fix for: Transactions sending/ signing failure
- Bugfix: Hot fix for Tor connections
- Bugfix: a minor bug that always shows address as used #927 (jleo84)
- Bugfix: cypress-tests #961 (Kim Neunert)
- Bugfix: Fix key initial format in wallet info #925 (benk10)
- Bugfix: Use the request session API for authentification #958 (Jürgen Hötzel)
- Chore: Bump cryptography from 3.2 to 3.3.2 #943 (dependabot[bot])
- Chore: enable dev-restart-login #960 (Kim Neunert)
- Chore: fix release-notes #928 (Kim Neunert)
- Docs: Typos #941 (Max Hillebrand)
- Feature: Add failed wallets popup #952 (benk10)
- Feature: Freeze UTXO and select UTXO for new transaction from the UTXO tab #956 (benk10)
- Feature: Use descriptor wallet for Bitcoin Core &gt;= v0.21.0 #737 (Sjors Provoost)
- UIUX: Add reason for why device is disabled in new wallet screen #932 (benk10)
- UIUX: pass result of createpsbt call back to calculateEstimatedFee #945 (djpnewton)
- UIUX: Preserve form status when creating a transaction #938 (djpnewton)</summary>
    <title>cryptoadvance/specter-desktop: v1.2.2</title>
    <updated>2021-02-21T13:31:31Z</updated>
    <dc:date>2021-02-21T13:31:31Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.2.1</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.2.1"/>
    <summary># v1.2.1 (Hotfix release for Tor connections)
# Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.1/Specter-Setup-v1.2.1.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.1/SpecterDesktop-v1.2.1.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.1/specter_desktop-v1.2.1-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

**Note on macOS**: The current build supports only macOS Catalina (10.15) or higher. If you'd like to run Specter on an older macOS version, you can [install Specter from Pip](https://github.com/cryptoadvance/specter-desktop#installing-specter-from-pip).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.1/specterd-v1.2.1-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.1/specterd-v1.2.1-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.1/specterd-v1.2.1-x86_64-linux-gnu.zip)

# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.1/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @stepansnigirev's GPG key.
You can get the public key from here: [https://stepansnigirev.com/ss-specter-release.asc](https://stepansnigirev.com/ss-specter-release.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x36ED357AB24B915F) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/6F16E354F83393D6E52EC25F36ED357AB24B915F).
Fingerprint of the key is `6F16 E354 F833 93D6 E52E  C25F 36ED 357A B24B 915F`, short id: `36ed357ab24b915f`

# Release notes
- Bugfix: Hot fix for Tor connections
- Bugfix: a minor bug that always shows address as used #927 (jleo84)
- Bugfix: cypress-tests #961 (Kim Neunert)
- Bugfix: Fix key initial format in wallet info #925 (benk10)
- Bugfix: Use the request session API for authentification #958 (Jürgen Hötzel)
- Chore: Bump cryptography from 3.2 to 3.3.2 #943 (dependabot[bot])
- Chore: enable dev-restart-login #960 (Kim Neunert)
- Chore: fix release-notes #928 (Kim Neunert)
- Docs: Typos #941 (Max Hillebrand)
- Feature: Add failed wallets popup #952 (benk10)
- Feature: Freeze UTXO and select UTXO for new transaction from the UTXO tab #956 (benk10)
- Feature: Use descriptor wallet for Bitcoin Core &gt;= v0.21.0 #737 (Sjors Provoost)
- UIUX: Add reason for why device is disabled in new wallet screen #932 (benk10)
- UIUX: pass result of createpsbt call back to calculateEstimatedFee #945 (djpnewton)
- UIUX: Preserve form status when creating a transaction #938 (djpnewton)</summary>
    <title>cryptoadvance/specter-desktop: v1.2.1</title>
    <updated>2021-02-20T17:26:35Z</updated>
    <dc:date>2021-02-20T17:26:35Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.2.0</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.2.0"/>
    <summary># Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.0/Specter-Setup-v1.2.0.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.0/SpecterDesktop-v1.2.0.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.0/specter_desktop-v1.2.0-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

**Note on macOS**: The current build supports only macOS Catalina (10.15) or higher. If you'd like to run Specter on an older macOS version, you can [install Specter from Pip](https://github.com/cryptoadvance/specter-desktop#installing-specter-from-pip).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.0/specterd-v1.2.0-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.0/specterd-v1.2.0-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.0/specterd-v1.2.0-x86_64-linux-gnu.zip)

# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.2.0/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @stepansnigirev's GPG key.
You can get the public key from here: [https://stepansnigirev.com/ss-specter-release.asc](https://stepansnigirev.com/ss-specter-release.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x36ED357AB24B915F) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/6F16E354F83393D6E52EC25F36ED357AB24B915F).
Fingerprint of the key is `6F16 E354 F833 93D6 E52E  C25F 36ED 357A B24B 915F`, short id: `36ed357ab24b915f`

# Release notes
- Bugfix: a minor bug that always shows address as used #927 (jleo84)
- Bugfix: cypress-tests #961 (Kim Neunert)
- Bugfix: Fix key initial format in wallet info #925 (benk10)
- Bugfix: Use the request session API for authentification #958 (Jürgen Hötzel)
- Chore: Bump cryptography from 3.2 to 3.3.2 #943 (dependabot[bot])
- Chore: enable dev-restart-login #960 (Kim Neunert)
- Chore: fix release-notes #928 (Kim Neunert)
- Docs: Typos #941 (Max Hillebrand)
- Feature: Add failed wallets popup #952 (benk10)
- Feature: Freeze UTXO and select UTXO for new transaction from the UTXO tab #956 (benk10)
- Feature: Use descriptor wallet for Bitcoin Core &gt;= v0.21.0 #737 (Sjors Provoost)
- UIUX: Add reason for why device is disabled in new wallet screen #932 (benk10)
- UIUX: pass result of createpsbt call back to calculateEstimatedFee #945 (djpnewton)
- UIUX: Preserve form status when creating a transaction #938 (djpnewton)</summary>
    <title>cryptoadvance/specter-desktop: v1.2.0</title>
    <updated>2021-02-20T15:04:18Z</updated>
    <dc:date>2021-02-20T15:04:18Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.3.5</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.3.5"/>
    <summary>Umbrel v0.3.5 fixes some bugs that were preventing the sending of transactions and causing Umbrel to hang on the &quot;Loading LND...&quot; message.

If your update gets stuck for some reason, please message us on Telegram: https://t.me/getumbrel

Diff: https://github.com/getumbrel/umbrel/compare/v0.3.4...v0.3.5</summary>
    <title>getumbrel/umbrel: v0.3.5</title>
    <updated>2021-02-20T10:15:13Z</updated>
    <dc:date>2021-02-20T10:15:13Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.12.1-beta.rc6</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.12.1-beta.rc6"/>
    <summary># Database Migrations

There are no database migrations in `v0.12.1-beta.rc6`.

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/bitconner/pgp_keys.asc | gpg --import
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-roasbeef-v0.12.1-beta.rc6.sig` and `manifest-v0.12.1-beta.rc6.txt` are in the current directory) with:

```
gpg --verify manifest-roasbeef-v0.12.1-beta.rc6.sig manifest-v0.12.1-beta.rc6.txt
```

You should see the following if the verification was successful:

```
gpg: Signature made Thu Feb 18 18:01:34 2021 PST
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Timestamp 

From this new version onwards, in addition time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: ` manifest-roasbeef-v0.12.1-beta.rc6.txt.asc.ots`.

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-roasbeef-v0.12.1-beta.rc6.sig.ots -f manifest-roasbeef-v0.12.1-beta.rc6.sig
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved.
The release binaries are compiled with `go1.15.7`, which is required by verifiers to arrive at the same ones.
They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.12.1-beta.rc6
gpg: Signature made Thu Feb 18 17:04:03 2021 PST
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

## Verifying the Docker Images

To verify the `lnd` and `lncli` binaries inside the docker images against the signed, reproducible release binaries, there is a verification script in the image that can be called (before starting the container for example):

```shell
$ docker pull lightninglabs/lnd:v0.12.1-beta.rc6
$ docker run --rm --entrypoint=&quot;&quot; lightninglabs/lnd:v0.12.1-beta.rc6 /verify-install.sh
$ OK=$?
$ if [ &quot;$OK&quot; -ne &quot;0&quot; ]; then echo &quot;Verification failed!&quot;; exit 1; done
$ docker run lightninglabs/lnd [command-line options]
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming
that `vendor.tar.gz` and `lnd-source-v0.12.1-beta.rc6.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.12.1-beta.rc6.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.1-beta.rc6&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.1-beta.rc6&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## Spec Compatibility

 - 0.12.1-beta.rc6 fixes a [recently discovered edge-case in the spec](https://github.com/lightningnetwork/lightning-rfc/issues/794) surrounding retransmission of `RevokeAndAck` and `CommitSig` that can lead to channel force closures if they are not retransmitted in the same order upon reconnection. This version now [persists this extra state required to determine the correct transmission order](https://github.com/lightningnetwork/lnd/pull/4915), [in accordance with the new spec requirements](https://github.com/lightningnetwork/lightning-rfc/pull/810). This eliminates a potential vector for channel desynchronization on restart once both sides of the channel have updated and a successful state transition is performed.
 - Prior to this version, `lnd` may have incorrectly attempted an MPP payment even if the receiver's `NodeAnnouncement` or invoice did not set the MPP feature bit. This was caused by a bug that incorrectly assumed support for `payment_secrets` implied support for MPP. A fix has been applied that [limits the maximum number of splits to 1 when the receiver doesn't support MPP](https://github.com/lightningnetwork/lnd/pull/4924).

## Gossip Propagation Improvements

This release [reverts the removal of the premature channel update cache](https://github.com/lightningnetwork/lnd/pull/5003) that was removed in 0.12.0-beta. Absence of the cache was seen to cause issues with channel update propagation, so the change is reverted to restore the pre-0.12.0-beta behavior and stability. The current plan is to reschedule the cache's removal for 0.13 after performing more extensive investigation.
 
In addition, the gossip throttling adding in v0.12.0 has been [refactored to be less aggressive with respect to non-keepalive channel updates](https://github.com/lightningnetwork/lnd/pull/5006), i.e. channel updates that differ in more than just the timestamp. Previously `lnd` would drop all but the first such update that it received over the course of a block, which has reportedly been too restrictive and resulted in degraded propagation of routine channel updates.

The new throttling logic now employs a directional [token bucket rate limiter](https://en.wikipedia.org/wiki/Token_bucket), the same approach used by `lnd` to rate-limit gossip requests from sync peers. Each token bucket is configured to drop non-keepalive updates arriving faster that once per minute, yet permitting bursts of up 10 updates. This improves on the previous approach in a few ways:
 - Updates are now limited with respect to a consistent time source, i.e. seconds, rather than block height. This makes it easier to reason about when channel updates might get dropped as an average user, and places a deterministic bound on the next time a normal user can reliably update their channel again.
 - The rate limits are now applied _directionally_, so that one end of the channel cannot cause their counterparty's channel updates to be dropped. This has the effect of making the penalization more precise, and better targets individuals that exhibit abusive behavior.
 - By factoring in bursts, it provides enough tolerance for cases where policy changes that may occur in quick succession, e.g. disable followed by reenable, or modifying a channel policy immediately after open.

## No Gossip Mode

This release includes support for a [no-graph sync mode](https://github.com/lightningnetwork/lnd/pull/4945) which can be enabled by setting `numgraphsyncpeers=0`. In prior versions, running `lnd` in this configuration would still trigger an initial historical sync with the first connected peer on each restart. The behavior was modified under the assumption that users who have already configured `lnd` to not receive gossip updates probably don't want to sync the graph at all.

This mode is especially helpful to wallet developers that choose to outsource pathfinding via their own service, or purely forwarding nodes that never need to perform pathfinding.

## Pinned Gossip Syncers

Typically `lnd` performs this historical channel reconciliation periodically, rotating between the set of all active peers, and attempting to keep `numgraphsyncpeers` (defaults to 3) in a state where they are receiving new gossip messages. Due to the eventually consistent properties of this algorithm (and the gossip protocol in general), there are some cases that lead to long delays in a node receiving newer updates. Notably, if a node has many peers, then it may be a while before the sync rotation algorithm queries a given peer for newer updates.

To provide more control, a new configuration option has been added [allowing users to _pin_ their nodes into an ActiveSync with particular nodes](https://github.com/lightningnetwork/lnd/pull/4934). Each time a connection is established with a pinned syncer, `lnd` will first perform a historical channel reconciliation, followed by a request for the pinned syncer to forward all new gossip messages. Doing so allows users to keep their routing table tightly synchronized with nodes in their list of configured, pinned syncers. Users can add one or more pinned syncers via:
```
gossip.pinned-syncers=&lt;pubkey1&gt;
gossip.pinned-syncers=&lt;pubkey2&gt;
```
This can be especially useful for services that run multiple, well-connected `lnd` nodes, and want their own nodes to maintain similar views of the channel graph. Users can also use `gossip.pinned-syncers` in combination with `numgraphsyncpeers=0` to only sync from a specific peer.

## RPC Changes
 - `lnd` 0.12.1-beta.rc6 now [exposes the HTLC `attempt_id` on response from `TrackPayment`](https://github.com/lightningnetwork/lnd/pull/4956). Internally, `lnd` uses `attempt_id` as a unique identifier for each HTLC it sends out, and to provide a total ordering on all HTLC sent by the daemon.  This identifier can be used by developers to better reflect progress of a payment, making it easier to extract per-HTLC state deltas rather than displaying the full payment state every time.
- Adds a new `MaxShardSizeMsat` argument to `SendPayment`, allowing users to cap the maximum value of any MPP shard sent out by `lnd`. Users can now set this from `lncli` via either the `max_shard_size_sat` or `max_shard_size_msat` field. 


## Deterministic Build / Release Verification
 - The signature verification script [was fixed to no longer fail if a public key of a signature is missing](https://github.com/lightningnetwork/lnd/pull/4963) and @halseth's [signing public keys were added](https://github.com/lightningnetwork/lnd/pull/4962).
 - The [golang version `1.15.7`](https://github.com/lightningnetwork/lnd/pull/4961) is now used for compilation across all build processes.
 - The release process has been modified to [clean any generated mobile stubs before packaging/verifying the release](https://github.com/lightningnetwork/lnd/pull/4983). Without doing so, users would arrive at a different `vendor.tar.gz` depending on whether or not they had previously run `make mobile` due to small differences in the imports present in the project.
 - Fixed an issue that allowed GO_VERSION of the release toolchain to be spuriously updated to newer releases of go. This was hit unexpectedly in the v0.12.1-beta.rc2 release cycle where the release binaries were built with go1.15.8, which had been released earlier in the week, rather than go1.15.7 which is pinned in our release/verify docker containers. As a result, building the release locally did not match the binaries uploaded by github to the release. We resolved this by _exactly_ [pinning the GO_VERSION used to compile the release binaries](https://github.com/lightningnetwork/lnd/pull/5013).
 - Allows users to [pass custom paths for `lnd` or `lncli` when verifying binaries](https://github.com/lightningnetwork/lnd/pull/5021).
 - Switches the [signing on the release manfest to use detached signatures](https://github.com/lightningnetwork/lnd/pull/5019) rather than clear signing the manifest.
 - The release [verification script now requires 5 of the 7 developer signatures on the manifest](https://github.com/lightningnetwork/lnd/pull/5023) before attempting to verify the hashes of `lnd` or `lncli`.
 - The release [verification script now selects either `sha256sum` or `shasum`](https://github.com/lightningnetwork/lnd/pull/5037) to increase portability and fix the docker `verify-install.sh` command.
 - Fixed an issue that would cause[ `make docker-release` to pull in the go version of the host machine](https://github.com/lightningnetwork/lnd/pull/5037), rather than the go version pinned inside the docker container.

## Developer Toolchain
 - Some of the GitHub Action scripts [were replaced by vendored scripts](https://github.com/lightningnetwork/lnd/pull/4952) to prevent secret extraction through malicious code.
 - The build process was [enhanced with a `make imports`](https://github.com/lightningnetwork/lnd/pull/2162) command that organizes all golang import statements.
 - The protobuf definitions are now compiled [using docker](https://github.com/lightningnetwork/lnd/pull/4911) to avoid needing to install a set of binaries and libraries with exact pinned versions. The instructions on how to [format the proto files with MacOS](https://github.com/lightningnetwork/lnd/pull/4944) were added as well.

## Bug Fixes
 - Fixes a bug that can result in a [panic when generating hodl invoices for private channels](https://github.com/lightningnetwork/lnd/pull/4978). An [itest has also been added for generating hodl invoices using private channels](https://github.com/lightningnetwork/lnd/pull/4996) to provide more complete coverage of this area going forward.
 - Fixes a [resource utilization issue cause by too many concurrent block fetches from the backend](https://github.com/lightningnetwork/lnd/pull/5043) that would cause the rpc interface to hang.
 - Squashes a bug that results in a [startup error when the daemon exits while in the middle of processing graph updates for its own channels](https://github.com/lightningnetwork/lnd/pull/4958).
 - Creates a [fast-path for persisting locally-created gossip messages](https://github.com/lightningnetwork/lnd/pull/4964) rather than waiting to be batched with remote graph updates. This reduces the likelihood of partially-writes for local graph updates, which was partially patched in https://github.com/lightningnetwork/lnd/pull/4958.
 - The development docker files were [fixed by adding an extra listener](https://github.com/lightningnetwork/lnd/pull/4938) to make sure the beginner tutorial can be followed without running into errors.
 - Fixes an [error message returned when attempting to bind a REST listener on a public interface without authentication](https://github.com/lightningnetwork/lnd/pull/4993), such that it returns the relevant configuration flag (`no-rest-tls`).
 - Fixes an issue with [IPv6 address resolution when using `tor.active`](https://github.com/lightningnetwork/lnd/pull/4988) such that `lnd` will fall back to the system resolver.
 - Fixes an issue with [IP alias resolution](https://github.com/lightningnetwork/lnd/pull/5007) such that `lnd` will fall back to the system resolver.
 - Fixes a bug where [SCB file paths weren't properly expanded when in the home directory](https://github.com/lightningnetwork/lnd/pull/5020).
 - Fixes some itest flakes caused by [stray logs that were not in the error whitelist](https://github.com/lightningnetwork/lnd/pull/5016).
 - Resolves some [htlcswitch unit test flakes that would trigger if the test ran longer than expected](https://github.com/lightningnetwork/lnd/pull/5026).

## Full Changelog
 - https://github.com/lightningnetwork/lnd/pull/4958 - netann: ignore unknown channel update on startup
 - https://github.com/lightningnetwork/lnd/pull/4962 - scripts: add halseth key to verify script
 - https://github.com/lightningnetwork/lnd/pull/4938 - docker: add an extra listener for localhost
 - https://github.com/lightningnetwork/lnd/pull/4944 - docs: Add clang-format instructions for mac
 - https://github.com/lightningnetwork/lnd/pull/4956 - lnrpc: add htlc attempt id
 - https://github.com/lightningnetwork/lnd/pull/4952 - Github: use vendored actions for steps with sensitive info
 - https://github.com/lightningnetwork/lnd/pull/4963 - scripts: don't fail signature verification on missing public key
 - https://github.com/lightningnetwork/lnd/pull/2162 - Makefile: define `make imports`
 - https://github.com/lightningnetwork/lnd/pull/4911 - lnrpc/mobile: use docker to compile/format protos
 - https://github.com/lightningnetwork/lnd/pull/4974 - Fix typo in restorechanbackup command description
 - https://github.com/lightningnetwork/lnd/pull/4902 - lntest/channels: introduce subpackage to deduplicate structs
 - https://github.com/lightningnetwork/lnd/pull/4978 - invoices+rpc: add missing channel graph to the AddInvoiceConfig
 - https://github.com/lightningnetwork/lnd/pull/4934 - discovery: pinned syncers
 - https://github.com/lightningnetwork/lnd/pull/4924 - routerrpc,routing: limit max parts if the invoice doesn't declare MPP support
 - https://github.com/lightningnetwork/lnd/pull/4961 - build: update CI builds to use go 1.15.7
 - https://github.com/lightningnetwork/lnd/pull/4979 - routing: add new TestPaymentAddrOnlyNoSplit test case
 - https://github.com/lightningnetwork/lnd/pull/4915 - multi: store bool to determine retransmission ordering
 - https://github.com/lightningnetwork/lnd/pull/4981 - docs: correct sign command
 - https://github.com/lightningnetwork/lnd/pull/4983 - make: clean mobile stubs before building release
 - https://github.com/lightningnetwork/lnd/pull/4993 - fix: correct no-rest-tls parameter in error message
 - https://github.com/lightningnetwork/lnd/pull/5003 - Revert: https://github.com/lightningnetwork/lnd/pull/4895 to store premature channel updates
 - https://github.com/lightningnetwork/lnd/pull/4996 - itest: add coverage for hold invoices with hop hints
 - https://github.com/lightningnetwork/lnd/pull/4945 - discovery: no graph sync
 - https://github.com/lightningnetwork/lnd/pull/4964 - channeldb+routing+gossiper: add local updates to graph immediately
 - https://github.com/lightningnetwork/lnd/pull/5006 - discovery: use token bucket based rate limiting to throttle gossip
 - https://github.com/lightningnetwork/lnd/pull/4988 - add isIPv6Host helper to force v6 addrs through system resolver
 - https://github.com/lightningnetwork/lnd/pull/5007 - lncfg: add IPv6 resolution bypass &amp; account for local hostname aliases
 - https://github.com/lightningnetwork/lnd/pull/5013 - github/workflows: pin exact docker release
 - https://github.com/lightningnetwork/lnd/pull/5021 - scripts: allow verification of custom binary
 - https://github.com/lightningnetwork/lnd/pull/5020 - config: clean and expand backup file path
 - https://github.com/lightningnetwork/lnd/pull/5019 - release: create and verify detached signatures, fix hashing command on MacOS
 - https://github.com/lightningnetwork/lnd/pull/5023 - scripts/verify-install: require 5-of-7 signatures before accepting
 - https://github.com/lightningnetwork/lnd/pull/5016 - lntest: update error whitelist
 - https://github.com/lightningnetwork/lnd/pull/5026 - htlcswitch: init mockFeeEstimator in other ChannelLinkConfigs
 - https://github.com/lightningnetwork/lnd/pull/5017 - routing: if MaxShardAmt is set, then use that as a ceiling for our splits (does not change default to 16 for MaxParts)
- https://github.com/lightningnetwork/lnd/pull/5037 - release: fix golang version issue in docker-release and shasum issue in verification script
- https://github.com/lightningnetwork/lnd/pull/5043 - routing: dial back max concurrent block fetches

# Contributors (Alphabetical Order)

Andras Banki-Horvath
Carla Kirk-Cohen
Conner Fromknecht
Eugene Siegel
Jake Sylvestre
Johan T. Halseth
Joost Jager
Juan Pablo Civile
Olaoluwa Osuntokun
Oliver Gugger
rockstardev
Umar Bolatov
Vlad Stan
Wilmer Paulino</summary>
    <title>lightningnetwork/lnd: v0.12.1-beta.rc6</title>
    <updated>2021-02-19T20:02:23Z</updated>
    <dc:date>2021-02-19T20:02:23Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/mempool/mempool/releases/tag/v2.1.2</id>
    <link href="https://github.com/mempool/mempool/releases/tag/v2.1.2"/>
    <summary>This is a patch release that optimizes memory usage for embedded devices like Raspberry Pi

Notes:
* The disk cache now has its own folder, so `mv cache*.json ./cache/` before restart to migrate

Changes:
* Optimize memory usage when writing disk cache (#342)
* Reduce backend maximum heap size setting to 2G (#345)
* Enable mempool clear protection on all backends (#335)
* Make mempool clear protection timeout configurable (#343)
* Minor tweaks to About page text, links (#350)
* Logo design update (#349) by @pedromvpg
* Fix style on block hover (#347) by @Czino and @Eric-Machinas</summary>
    <title>mempool/mempool: v2.1.2</title>
    <updated>2021-02-18T11:47:39Z</updated>
    <dc:date>2021-02-18T11:47:39Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.1.1-pre1</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.1.1-pre1"/>
    <summary>This is a pre-release. Use this with caution!</summary>
    <title>cryptoadvance/specter-desktop: v1.1.1-pre1</title>
    <updated>2021-02-18T07:56:16Z</updated>
    <dc:date>2021-02-18T07:56:16Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.12.1-beta.rc5</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.12.1-beta.rc5"/>
    <summary># Database Migrations

There are no database migrations in `v0.12.1-beta.rc5`.

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/bitconner/pgp_keys.asc | gpg --import
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-bitconner-v0.12.1-beta.rc5.sig` and `manifest-v0.12.1-beta.rc5.txt` are in the current directory) with:

```
gpg --verify manifest-bitconner-v0.12.1-beta.rc5.sig manifest-v0.12.1-beta.rc5.txt
```

You should see the following if the verification was successful:

```
gpg: Signature made Wed Feb 17 14:16:06 2021 PST
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Timestamp 

From this new version onwards, in addition time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: ` manifest-roasbeef-v0.12.1-beta.rc5.txt.asc.ots`.

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-roasbeef-v0.12.1-beta.rc5.sig.ots -f manifest-roasbeef-v0.12.1-beta.rc5.sig
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved.
The release binaries are compiled with `go1.15.7`, which is required by verifiers to arrive at the same ones.
They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.12.1-beta.rc5
gpg: Signature made Wed Feb 17 12:59:15 2021 PST
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

## Verifying the Docker Images

To verify the `lnd` and `lncli` binaries inside the docker images against the signed, reproducible release binaries, there is a verification script in the image that can be called (before starting the container for example):

```shell
$ docker pull lightninglabs/lnd:v0.12.1-beta.rc5
$ docker run --rm --entrypoint=&quot;&quot; lightninglabs/lnd:v0.12.1-beta.rc5 /verify-install.sh
$ OK=$?
$ if [ &quot;$OK&quot; -ne &quot;0&quot; ]; then echo &quot;Verification failed!&quot;; exit 1; done
$ docker run lightninglabs/lnd [command-line options]
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming
that `vendor.tar.gz` and `lnd-source-v0.12.1-beta.rc5.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.12.1-beta.rc5.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.1-beta.rc5&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.1-beta.rc5&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## Spec Compatibility

 - 0.12.1-beta.rc5 fixes a [recently discovered edge-case in the spec](https://github.com/lightningnetwork/lightning-rfc/issues/794) surrounding retransmission of `RevokeAndAck` and `CommitSig` that can lead to channel force closures if they are not retransmitted in the same order upon reconnection. This version now [persists this extra state required to determine the correct transmission order](https://github.com/lightningnetwork/lnd/pull/4915), [in accordance with the new spec requirements](https://github.com/lightningnetwork/lightning-rfc/pull/810). This eliminates a potential vector for channel desynchronization on restart once both sides of the channel have updated and a successful state transition is performed.
 - Prior to this version, `lnd` may have incorrectly attempted an MPP payment even if the receiver's `NodeAnnouncement` or invoice did not set the MPP feature bit. This was caused by a bug that incorrectly assumed support for `payment_secrets` implied support for MPP. A fix has been applied that [limits the maximum number of splits to 1 when the receiver doesn't support MPP](https://github.com/lightningnetwork/lnd/pull/4924).

## Gossip Propagation Improvements

This release [reverts the removal of the premature channel update cache](https://github.com/lightningnetwork/lnd/pull/5003) that was removed in 0.12.0-beta. Absence of the cache was seen to cause issues with channel update propagation, so the change is reverted to restore the pre-0.12.0-beta behavior and stability. The current plan is to reschedule the cache's removal for 0.13 after performing more extensive investigation.
 
In addition, the gossip throttling adding in v0.12.0 has been [refactored to be less aggressive with respect to non-keepalive channel updates](https://github.com/lightningnetwork/lnd/pull/5006), i.e. channel updates that differ in more than just the timestamp. Previously `lnd` would drop all but the first such update that it received over the course of a block, which has reportedly been too restrictive and resulted in degraded propagation of routine channel updates.

The new throttling logic now employs a directional [token bucket rate limiter](https://en.wikipedia.org/wiki/Token_bucket), the same approach used by `lnd` to rate-limit gossip requests from sync peers. Each token bucket is configured to drop non-keepalive updates arriving faster that once per minute, yet permitting bursts of up 10 updates. This improves on the previous approach in a few ways:
 - Updates are now limited with respect to a consistent time source, i.e. seconds, rather than block height. This makes it easier to reason about when channel updates might get dropped as an average user, and places a deterministic bound on the next time a normal user can reliably update their channel again.
 - The rate limits are now applied _directionally_, so that one end of the channel cannot cause their counterparty's channel updates to be dropped. This has the effect of making the penalization more precise, and better targets individuals that exhibit abusive behavior.
 - By factoring in bursts, it provides enough tolerance for cases where policy changes that may occur in quick succession, e.g. disable followed by reenable, or modifying a channel policy immediately after open.

## No Gossip Mode

This release includes support for a [no-graph sync mode](https://github.com/lightningnetwork/lnd/pull/4945) which can be enabled by setting `numgraphsyncpeers=0`. In prior versions, running `lnd` in this configuration would still trigger an initial historical sync with the first connected peer on each restart. The behavior was modified under the assumption that users who have already configured `lnd` to not receive gossip updates probably don't want to sync the graph at all.

This mode is especially helpful to wallet developers that choose to outsource pathfinding via their own service, or purely forwarding nodes that never need to perform pathfinding.

## Pinned Gossip Syncers

Typically `lnd` performs this historical channel reconciliation periodically, rotating between the set of all active peers, and attempting to keep `numgraphsyncpeers` (defaults to 3) in a state where they are receiving new gossip messages. Due to the eventually consistent properties of this algorithm (and the gossip protocol in general), there are some cases that lead to long delays in a node receiving newer updates. Notably, if a node has many peers, then it may be a while before the sync rotation algorithm queries a given peer for newer updates.

To provide more control, a new configuration option has been added [allowing users to _pin_ their nodes into an ActiveSync with particular nodes](https://github.com/lightningnetwork/lnd/pull/4934). Each time a connection is established with a pinned syncer, `lnd` will first perform a historical channel reconciliation, followed by a request for the pinned syncer to forward all new gossip messages. Doing so allows users to keep their routing table tightly synchronized with nodes in their list of configured, pinned syncers. Users can add one or more pinned syncers via:
```
gossip.pinned-syncers=&lt;pubkey1&gt;
gossip.pinned-syncers=&lt;pubkey2&gt;
```
This can be especially useful for services that run multiple, well-connected `lnd` nodes, and want their own nodes to maintain similar views of the channel graph. Users can also use `gossip.pinned-syncers` in combination with `numgraphsyncpeers=0` to only sync from a specific peer.

## RPC Changes
 - `lnd` 0.12.1-beta.rc5 now [exposes the HTLC `attempt_id` on response from `TrackPayment`](https://github.com/lightningnetwork/lnd/pull/4956). Internally, `lnd` uses `attempt_id` as a unique identifier for each HTLC it sends out, and to provide a total ordering on all HTLC sent by the daemon.  This identifier can be used by developers to better reflect progress of a payment, making it easier to extract per-HTLC state deltas rather than displaying the full payment state every time.
- Adds a new `MaxShardSizeMsat` argument to `SendPayment`, allowing users to cap the maximum value of any MPP shard sent out by `lnd`. Users can now set this from `lncli` via either the `max_shard_size_sat` or `max_shard_size_msat` field. 


## Deterministic Build / Release Verification
 - The signature verification script [was fixed to no longer fail if a public key of a signature is missing](https://github.com/lightningnetwork/lnd/pull/4963) and @halseth's [signing public keys were added](https://github.com/lightningnetwork/lnd/pull/4962).
 - The [golang version `1.15.7`](https://github.com/lightningnetwork/lnd/pull/4961) is now used for compilation across all build processes.
 - The release process has been modified to [clean any generated mobile stubs before packaging/verifying the release](https://github.com/lightningnetwork/lnd/pull/4983). Without doing so, users would arrive at a different `vendor.tar.gz` depending on whether or not they had previously run `make mobile` due to small differences in the imports present in the project.
 - Fixed an issue that allowed GO_VERSION of the release toolchain to be spuriously updated to newer releases of go. This was hit unexpectedly in the v0.12.1-beta.rc2 release cycle where the release binaries were built with go1.15.8, which had been released earlier in the week, rather than go1.15.7 which is pinned in our release/verify docker containers. As a result, building the release locally did not match the binaries uploaded by github to the release. We resolved this by _exactly_ [pinning the GO_VERSION used to compile the release binaries](https://github.com/lightningnetwork/lnd/pull/5013).
 - Allows users to [pass custom paths for `lnd` or `lncli` when verifying binaries](https://github.com/lightningnetwork/lnd/pull/5021).
 - Switches the [signing on the release manfest to use detached signatures](https://github.com/lightningnetwork/lnd/pull/5019) rather than clear signing the manifest.
 - The release [verification script now requires 5 of the 7 developer signatures on the manifest](https://github.com/lightningnetwork/lnd/pull/5023) before attempting to verify the hashes of `lnd` or `lncli`.
 - The release [verification script now selects either `sha256sum` or `shasum`](https://github.com/lightningnetwork/lnd/pull/5037) to increase portability and fix the `docker run --rm --entrypoint=&quot;&quot; lightninglabs/lnd:v0.12.1-beta.rc5 /verify-install.sh` command.
 - Fixed an issue that would cause[ `make docker-release` to pull in the go version of the host machine](https://github.com/lightningnetwork/lnd/pull/5037), rather than the go version pinned inside the docker container.

## Developer Toolchain
 - Some of the GitHub Action scripts [were replaced by vendored scripts](https://github.com/lightningnetwork/lnd/pull/4952) to prevent secret extraction through malicious code.
 - The build process was [enhanced with a `make imports`](https://github.com/lightningnetwork/lnd/pull/2162) command that organizes all golang import statements.
 - The protobuf definitions are now compiled [using docker](https://github.com/lightningnetwork/lnd/pull/4911) to avoid needing to install a set of binaries and libraries with exact pinned versions. The instructions on how to [format the proto files with MacOS](https://github.com/lightningnetwork/lnd/pull/4944) were added as well.

## Bug Fixes
 - Fixes a bug that can result in a [panic when generating hodl invoices for private channels](https://github.com/lightningnetwork/lnd/pull/4978). An [itest has also been added for generating hodl invoices using private channels](https://github.com/lightningnetwork/lnd/pull/4996) to provide more complete coverage of this area going forward.
 - Squashes a bug that results in a [startup error when the daemon exits while in the middle of processing graph updates for its own channels](https://github.com/lightningnetwork/lnd/pull/4958).
 - Creates a [fast-path for persisting locally-created gossip messages](https://github.com/lightningnetwork/lnd/pull/4964) rather than waiting to be batched with remote graph updates. This reduces the likelihood of partially-writes for local graph updates, which was partially patched in https://github.com/lightningnetwork/lnd/pull/4958.
 - The development docker files were [fixed by adding an extra listener](https://github.com/lightningnetwork/lnd/pull/4938) to make sure the beginner tutorial can be followed without running into errors.
 - Fixes an [error message returned when attempting to bind a REST listener on a public interface without authentication](https://github.com/lightningnetwork/lnd/pull/4993), such that it returns the relevant configuration flag (`no-rest-tls`).
 - Fixes an issue with [IPv6 address resolution when using `tor.active`](https://github.com/lightningnetwork/lnd/pull/4988) such that `lnd` will fall back to the system resolver.
 - Fixes an issue with [IP alias resolution](https://github.com/lightningnetwork/lnd/pull/5007) such that `lnd` will fall back to the system resolver.
 - Fixes a bug where [SCB file paths weren't properly expanded when in the home directory](https://github.com/lightningnetwork/lnd/pull/5020).
 - Fixes some itest flakes caused by [stray logs that were not in the error whitelist](https://github.com/lightningnetwork/lnd/pull/5016).
 - Resolves some [htlcswitch unit test flakes that would trigger if the test ran longer than expected](https://github.com/lightningnetwork/lnd/pull/5026).

## Full Changelog
 - https://github.com/lightningnetwork/lnd/pull/4958 - netann: ignore unknown channel update on startup
 - https://github.com/lightningnetwork/lnd/pull/4962 - scripts: add halseth key to verify script
 - https://github.com/lightningnetwork/lnd/pull/4938 - docker: add an extra listener for localhost
 - https://github.com/lightningnetwork/lnd/pull/4944 - docs: Add clang-format instructions for mac
 - https://github.com/lightningnetwork/lnd/pull/4956 - lnrpc: add htlc attempt id
 - https://github.com/lightningnetwork/lnd/pull/4952 - Github: use vendored actions for steps with sensitive info
 - https://github.com/lightningnetwork/lnd/pull/4963 - scripts: don't fail signature verification on missing public key
 - https://github.com/lightningnetwork/lnd/pull/2162 - Makefile: define `make imports`
 - https://github.com/lightningnetwork/lnd/pull/4911 - lnrpc/mobile: use docker to compile/format protos
 - https://github.com/lightningnetwork/lnd/pull/4974 - Fix typo in restorechanbackup command description
 - https://github.com/lightningnetwork/lnd/pull/4902 - lntest/channels: introduce subpackage to deduplicate structs
 - https://github.com/lightningnetwork/lnd/pull/4978 - invoices+rpc: add missing channel graph to the AddInvoiceConfig
 - https://github.com/lightningnetwork/lnd/pull/4934 - discovery: pinned syncers
 - https://github.com/lightningnetwork/lnd/pull/4924 - routerrpc,routing: limit max parts if the invoice doesn't declare MPP support
 - https://github.com/lightningnetwork/lnd/pull/4961 - build: update CI builds to use go 1.15.7
 - https://github.com/lightningnetwork/lnd/pull/4979 - routing: add new TestPaymentAddrOnlyNoSplit test case
 - https://github.com/lightningnetwork/lnd/pull/4915 - multi: store bool to determine retransmission ordering
 - https://github.com/lightningnetwork/lnd/pull/4981 - docs: correct sign command
 - https://github.com/lightningnetwork/lnd/pull/4983 - make: clean mobile stubs before building release
 - https://github.com/lightningnetwork/lnd/pull/4993 - fix: correct no-rest-tls parameter in error message
 - https://github.com/lightningnetwork/lnd/pull/5003 - Revert: https://github.com/lightningnetwork/lnd/pull/4895 to store premature channel updates
 - https://github.com/lightningnetwork/lnd/pull/4996 - itest: add coverage for hold invoices with hop hints
 - https://github.com/lightningnetwork/lnd/pull/4945 - discovery: no graph sync
 - https://github.com/lightningnetwork/lnd/pull/4964 - channeldb+routing+gossiper: add local updates to graph immediately
 - https://github.com/lightningnetwork/lnd/pull/5006 - discovery: use token bucket based rate limiting to throttle gossip
 - https://github.com/lightningnetwork/lnd/pull/4988 - add isIPv6Host helper to force v6 addrs through system resolver
 - https://github.com/lightningnetwork/lnd/pull/5007 - lncfg: add IPv6 resolution bypass &amp; account for local hostname aliases
 - https://github.com/lightningnetwork/lnd/pull/5013 - github/workflows: pin exact docker release
 - https://github.com/lightningnetwork/lnd/pull/5021 - scripts: allow verification of custom binary
 - https://github.com/lightningnetwork/lnd/pull/5020 - config: clean and expand backup file path
 - https://github.com/lightningnetwork/lnd/pull/5019 - release: create and verify detached signatures, fix hashing command on MacOS
 - https://github.com/lightningnetwork/lnd/pull/5023 - scripts/verify-install: require 5-of-7 signatures before accepting
 - https://github.com/lightningnetwork/lnd/pull/5016 - lntest: update error whitelist
 - https://github.com/lightningnetwork/lnd/pull/5026 - htlcswitch: init mockFeeEstimator in other ChannelLinkConfigs
 - https://github.com/lightningnetwork/lnd/pull/5017 - routing: if MaxShardAmt is set, then use that as a ceiling for our splits (does not change default to 16 for MaxParts)
- https://github.com/lightningnetwork/lnd/pull/5037 - release: fix golang version issue in docker-release and shasum issue in verification script

# Contributors (Alphabetical Order)

Andras Banki-Horvath
Carla Kirk-Cohen
Conner Fromknecht
Eugene Siegel
Jake Sylvestre
Johan T. Halseth
Joost Jager
Juan Pablo Civile
Olaoluwa Osuntokun
Oliver Gugger
rockstardev
Umar Bolatov
Vlad Stan
Wilmer Paulino</summary>
    <title>lightningnetwork/lnd: v0.12.1-beta.rc5</title>
    <updated>2021-02-18T00:33:15Z</updated>
    <dc:date>2021-02-18T00:33:15Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.12.1-beta.rc4</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.12.1-beta.rc4"/>
    <summary># Database Migrations

There are no migrations in `lnd` v0.12.1-beta.rc4.

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/bitconner/pgp_keys.asc | gpg --import
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-bitconner-v0.12.1-beta.rc4.sig` and `manifest-v0.12.1-beta.rc4.txt` are in the current directory) with:

```
gpg --verify manifest-bitconner-v0.12.1-beta.rc4.sig manifest-v0.12.1-beta.rc4.txt
```

You should see the following if the verification was successful:

```
gpg: Signature made Tue Feb 16 17:45:05 2021 PST
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Timestamp 

From this new version onwards, in addition time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: ` manifest-roasbeef-v0.12.1-beta.rc4.txt.asc.ots`.

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-roasbeef-v0.12.1-beta.rc4.sig.ots -f manifest-roasbeef-v0.12.1-beta.rc4.sig
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved.
The release binaries are compiled with `go1.15.7`, which is required by verifiers to arrive at the same ones.
They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.12.1-beta.rc4
gpg: Signature made Tue Feb 16 16:35:12 2021 PST
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

## Verifying the Docker Images

To verify the `lnd` and `lncli` binaries inside the docker images against the signed, reproducible release binaries, there is a verification script in the image that can be called (before starting the container for example):

```shell
$ docker pull lightninglabs/lnd:v0.12.1-beta.rc4
$ docker run --rm --entrypoint=&quot;&quot; lightninglabs/lnd:v0.12.1-beta.rc4 /verify-install.sh
$ OK=$?
$ if [ &quot;$OK&quot; -ne &quot;0&quot; ]; then echo &quot;Verification failed!&quot;; exit 1; done
$ docker run lightninglabs/lnd [command-line options]
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming
that `vendor.tar.gz` and `lnd-source-v0.12.1-beta.rc4.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.12.1-beta.rc4.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.1-beta.rc4&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.1-beta.rc4&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## Spec Compatibility

 - 0.12.1-beta.rc4 fixes a [recently discovered edge-case in the spec](https://github.com/lightningnetwork/lightning-rfc/issues/794) surrounding retransmission of `RevokeAndAck` and `CommitSig` that can lead to channel force closures if they are not retransmitted in the same order upon reconnection. This version now [persists this extra state required to determine the correct transmission order](https://github.com/lightningnetwork/lnd/pull/4915), [in accordance with the new spec requirements](https://github.com/lightningnetwork/lightning-rfc/pull/810). This eliminates a potential vector for channel desynchronization on restart once both sides of the channel have updated and a successful state transition is performed.
 - Prior to this version, `lnd` may have incorrectly attempted an MPP payment even if the receiver's `NodeAnnouncement` or invoice did not set the MPP feature bit. This was caused by a bug that incorrectly assumed support for `payment_secrets` implied support for MPP. A fix has been applied that [limits the maximum number of splits to 1 when the receiver doesn't support MPP](https://github.com/lightningnetwork/lnd/pull/4924).

## Gossip Propagation Improvements

This release [reverts the removal of the premature channel update cache](https://github.com/lightningnetwork/lnd/pull/5003) that was removed in 0.12.0-beta. Absence of the cache was seen to cause issues with channel update propagation, so the change is reverted to restore the pre-0.12.0-beta behavior and stability. The current plan is to reschedule the cache's removal for 0.13 after performing more extensive investigation.
 
In addition, the gossip throttling adding in v0.12.0 has been [refactored to be less aggressive with respect to non-keepalive channel updates](https://github.com/lightningnetwork/lnd/pull/5006), i.e. channel updates that differ in more than just the timestamp. Previously `lnd` would drop all but the first such update that it received over the course of a block, which has reportedly been too restrictive and resulted in degraded propagation of routine channel updates.

The new throttling logic now employs a directional [token bucket rate limiter](https://en.wikipedia.org/wiki/Token_bucket), the same approach used by `lnd` to rate-limit gossip requests from sync peers. Each token bucket is configured to drop non-keepalive updates arriving faster that once per minute, yet permitting bursts of up 10 updates. This improves on the previous approach in a few ways:
 - Updates are now limited with respect to a consistent time source, i.e. seconds, rather than block height. This makes it easier to reason about when channel updates might get dropped as an average user, and places a deterministic bound on the next time a normal user can reliably update their channel again.
 - The rate limits are now applied _directionally_, so that one end of the channel cannot cause their counterparty's channel updates to be dropped. This has the effect of making the penalization more precise, and better targets individuals that exhibit abusive behavior.
 - By factoring in bursts, it provides enough tolerance for cases where policy changes that may occur in quick succession, e.g. disable followed by reenable, or modifying a channel policy immediately after open.

## No Gossip Mode

This release includes support for a [no-graph sync mode](https://github.com/lightningnetwork/lnd/pull/4945) which can be enabled by setting `numgraphsyncpeers=0`. In prior versions, running `lnd` in this configuration would still trigger an initial historical sync with the first connected peer on each restart. The behavior was modified under the assumption that users who have already configured `lnd` to not receive gossip updates probably don't want to sync the graph at all.

This mode is especially helpful to wallet developers that choose to outsource pathfinding via their own service, or purely forwarding nodes that never need to perform pathfinding.

## Pinned Gossip Syncers

Typically `lnd` performs this historical channel reconciliation periodically, rotating between the set of all active peers, and attempting to keep `numgraphsyncpeers` (defaults to 3) in a state where they are receiving new gossip messages. Due to the eventually consistent properties of this algorithm (and the gossip protocol in general), there are some cases that lead to long delays in a node receiving newer updates. Notably, if a node has many peers, then it may be a while before the sync rotation algorithm queries a given peer for newer updates.

To provide more control, a new configuration option has been added [allowing users to _pin_ their nodes into an ActiveSync with particular nodes](https://github.com/lightningnetwork/lnd/pull/4934). Each time a connection is established with a pinned syncer, `lnd` will first perform a historical channel reconciliation, followed by a request for the pinned syncer to forward all new gossip messages. Doing so allows users to keep their routing table tightly synchronized with nodes in their list of configured, pinned syncers. Users can add one or more pinned syncers via:
```
gossip.pinned-syncers=&lt;pubkey1&gt;
gossip.pinned-syncers=&lt;pubkey2&gt;
```
This can be especially useful for services that run multiple, well-connected `lnd` nodes, and want their own nodes to maintain similar views of the channel graph. Users can also use `gossip.pinned-syncers` in combination with `numgraphsyncpeers=0` to only sync from a specific peer.

## RPC Changes
 - `lnd` 0.12.1-beta.rc4 now [exposes the HTLC `attempt_id` on response from `TrackPayment`](https://github.com/lightningnetwork/lnd/pull/4956). Internally, `lnd` uses `attempt_id` as a unique identifier for each HTLC it sends out, and to provide a total ordering on all HTLC sent by the daemon.  This identifier can be used by developers to better reflect progress of a payment, making it easier to extract per-HTLC state deltas rather than displaying the full payment state every time.
- Changes the default value of the `max-parts` argument to `SendPayment` from 1 to 16. When called without any arguments previously, `lnd` would only ever attempt paths with 1 HTLC, and give up if it couldn't find such a path. This change makes it so that `lnd` will attempt to make payments using a small number of shards if it can't be done using a single HTLC. 
- Adds a new `MaxShardSizeMsat` argument to `SendPayment`, allowing users to cap the maximum value of any MPP shard sent out by `lnd`. Users can now set this from `lncli` via either the `max_shard_size_sat` or `max_shard_size_msat` field. 


## Deterministic Build / Release Verification
 - The signature verification script [was fixed to no longer fail if a public key of a signature is missing](https://github.com/lightningnetwork/lnd/pull/4963) and @halseth's [signing public keys were added](https://github.com/lightningnetwork/lnd/pull/4962).
 - The [golang version `1.15.7`](https://github.com/lightningnetwork/lnd/pull/4961) is now used for compilation across all build processes.
 - The release process has been modified to [clean any generated mobile stubs before packaging/verifying the release](https://github.com/lightningnetwork/lnd/pull/4983). Without doing so, users would arrive at a different `vendor.tar.gz` depending on whether or not they had previously run `make mobile` due to small differences in the imports present in the project.
 - Fixed an issue that allowed GO_VERSION of the release toolchain to be spuriously updated to newer releases of go. This was hit unexpectedly in the v0.12.1-beta.rc2 release cycle where the release binaries were built with go1.15.8, which had been released earlier in the week, rather than go1.15.7 which is pinned in our release/verify docker containers. As a result, building the release locally did not match the binaries uploaded by github to the release. We resolved this by _exactly_ [pinning the GO_VERSION used to compile the release binaries](https://github.com/lightningnetwork/lnd/pull/5013).
 - Allows users to [pass custom paths for `lnd` or `lncli` when verifying binaries](https://github.com/lightningnetwork/lnd/pull/5021).
 - Switches the [signing on the release manfest to use detached signatures](https://github.com/lightningnetwork/lnd/pull/5019) rather than clear signing the manifest.
 - The release [verification script now requires 5 of the 7 developer signatures on the manifest](https://github.com/lightningnetwork/lnd/pull/5023) before attempting to verify the hashes of `lnd` or `lncli`.

## Developer Toolchain
 - Some of the GitHub Action scripts [were replaced by vendored scripts](https://github.com/lightningnetwork/lnd/pull/4952) to prevent secret extraction through malicious code.
 - The build process was [enhanced with a `make imports`](https://github.com/lightningnetwork/lnd/pull/2162) command that organizes all golang import statements.
 - The protobuf definitions are now compiled [using docker](https://github.com/lightningnetwork/lnd/pull/4911) to avoid needing to install a set of binaries and libraries with exact pinned versions. The instructions on how to [format the proto files with MacOS](https://github.com/lightningnetwork/lnd/pull/4944) were added as well.

## Bug Fixes
 - Fixes a bug that can result in a [panic when generating hodl invoices for private channels](https://github.com/lightningnetwork/lnd/pull/4978). An [itest has also been added for generating hodl invoices using private channels](https://github.com/lightningnetwork/lnd/pull/4996) to provide more complete coverage of this area going forward.
 - Squashes a bug that results in a [startup error when the daemon exits while in the middle of processing graph updates for its own channels](https://github.com/lightningnetwork/lnd/pull/4958).
 - Creates a [fast-path for persisting locally-created gossip messages](https://github.com/lightningnetwork/lnd/pull/4964) rather than waiting to be batched with remote graph updates. This reduces the likelihood of partially-writes for local graph updates, which was partially patched in https://github.com/lightningnetwork/lnd/pull/4958.
 - The development docker files were [fixed by adding an extra listener](https://github.com/lightningnetwork/lnd/pull/4938) to make sure the beginner tutorial can be followed without running into errors.
 - Fixes an [error message returned when attempting to bind a REST listener on a public interface without authentication](https://github.com/lightningnetwork/lnd/pull/4993), such that it returns the relevant configuration flag (`no-rest-tls`).
 - Fixes an issue with [IPv6 address resolution when using `tor.active`](https://github.com/lightningnetwork/lnd/pull/4988) such that `lnd` will fall back to the system resolver.
 - Fixes an issue with [IP alias resolution](https://github.com/lightningnetwork/lnd/pull/5007) such that `lnd` will fall back to the system resolver.
 - Fixes a bug where [SCB file paths weren't properly expanded when in the home directory](https://github.com/lightningnetwork/lnd/pull/5020).
 - Fixes some itest flakes caused by [stray logs that were not in the error whitelist](https://github.com/lightningnetwork/lnd/pull/5016).
 - Resolves some [htlcswitch unit test flakes that would trigger if the test ran longer than expected](https://github.com/lightningnetwork/lnd/pull/5026).

## Full Changelog
 - https://github.com/lightningnetwork/lnd/pull/4958 - netann: ignore unknown channel update on startup
 - https://github.com/lightningnetwork/lnd/pull/4962 - scripts: add halseth key to verify script
 - https://github.com/lightningnetwork/lnd/pull/4938 - docker: add an extra listener for localhost
 - https://github.com/lightningnetwork/lnd/pull/4944 - docs: Add clang-format instructions for mac
 - https://github.com/lightningnetwork/lnd/pull/4956 - lnrpc: add htlc attempt id
 - https://github.com/lightningnetwork/lnd/pull/4952 - Github: use vendored actions for steps with sensitive info
 - https://github.com/lightningnetwork/lnd/pull/4963 - scripts: don't fail signature verification on missing public key
 - https://github.com/lightningnetwork/lnd/pull/2162 - Makefile: define `make imports`
 - https://github.com/lightningnetwork/lnd/pull/4911 - lnrpc/mobile: use docker to compile/format protos
 - https://github.com/lightningnetwork/lnd/pull/4974 - Fix typo in restorechanbackup command description
 - https://github.com/lightningnetwork/lnd/pull/4902 - lntest/channels: introduce subpackage to deduplicate structs
 - https://github.com/lightningnetwork/lnd/pull/4978 - invoices+rpc: add missing channel graph to the AddInvoiceConfig
 - https://github.com/lightningnetwork/lnd/pull/4934 - discovery: pinned syncers
 - https://github.com/lightningnetwork/lnd/pull/4924 - routerrpc,routing: limit max parts if the invoice doesn't declare MPP support
 - https://github.com/lightningnetwork/lnd/pull/4961 - build: update CI builds to use go 1.15.7
 - https://github.com/lightningnetwork/lnd/pull/4979 - routing: add new TestPaymentAddrOnlyNoSplit test case
 - https://github.com/lightningnetwork/lnd/pull/4915 - multi: store bool to determine retransmission ordering
 - https://github.com/lightningnetwork/lnd/pull/4981 - docs: correct sign command
 - https://github.com/lightningnetwork/lnd/pull/4983 - make: clean mobile stubs before building release
 - https://github.com/lightningnetwork/lnd/pull/4993 - fix: correct no-rest-tls parameter in error message
 - https://github.com/lightningnetwork/lnd/pull/5003 - Revert: https://github.com/lightningnetwork/lnd/pull/4895 to store premature channel updates
 - https://github.com/lightningnetwork/lnd/pull/4996 - itest: add coverage for hold invoices with hop hints
 - https://github.com/lightningnetwork/lnd/pull/4945 - discovery: no graph sync
 - https://github.com/lightningnetwork/lnd/pull/4964 - channeldb+routing+gossiper: add local updates to graph immediately
 - https://github.com/lightningnetwork/lnd/pull/5006 - discovery: use token bucket based rate limiting to throttle gossip
 - https://github.com/lightningnetwork/lnd/pull/4988 - add isIPv6Host helper to force v6 addrs through system resolver
 - https://github.com/lightningnetwork/lnd/pull/5007 - lncfg: add IPv6 resolution bypass &amp; account for local hostname aliases
 - https://github.com/lightningnetwork/lnd/pull/5013 - github/workflows: pin exact docker release
 - https://github.com/lightningnetwork/lnd/pull/5021 - scripts: allow verification of custom binary
 - https://github.com/lightningnetwork/lnd/pull/5020 - config: clean and expand backup file path
 - https://github.com/lightningnetwork/lnd/pull/5019 - release: create and verify detached signatures, fix hashing command on MacOS
 - https://github.com/lightningnetwork/lnd/pull/5023 - scripts/verify-install: require 5-of-7 signatures before accepting
 - https://github.com/lightningnetwork/lnd/pull/5016 - lntest: update error whitelist
 - https://github.com/lightningnetwork/lnd/pull/5026 - htlcswitch: init mockFeeEstimator in other ChannelLinkConfigs
 - https://github.com/lightningnetwork/lnd/pull/5017 - routing: if MaxShardAmt is set, then use that as a ceiling for our splits, use default of 16 for MaxParts

# Contributors (Alphabetical Order)

Andras Banki-Horvath
Carla Kirk-Cohen
Conner Fromknecht
Eugene Siegel
Jake Sylvestre
Johan T. Halseth
Joost Jager
Juan Pablo Civile
Olaoluwa Osuntokun
Oliver Gugger
rockstardev
Umar Bolatov
Vlad Stan
Wilmer Paulino
</summary>
    <title>lightningnetwork/lnd: v0.12.1-beta.rc4</title>
    <updated>2021-02-17T08:05:12Z</updated>
    <dc:date>2021-02-17T08:05:12Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.5.6</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.5.6"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

This is a hotfix that fixes a [startup issue](https://github.com/bisq-network/bisq/pull/5191) with limit offers.

Here are the release notes from v1.5.5:

## Release notes

ATTENTION: This release changes the trade protocol. 

**DO NOT specify trade ID or any other value in the 'reason for payment' field.
LEAVE IT BLANK.** 

If it is mandatory for your payment service add a dash character ('-') or coordinate with your counterparty over trader chat to agree on a reason for payment.

This change reduces the chances that certain payment accounts get flagged. 
Please see https://github.com/bisq-network/bisq/issues/2869 for more details on this change.

This release introduces the option to create limit offers to be able to deactivate an offer if a certain price limit is reached. It also introduces cash-by-mail as a new payment method. In addition to multiple minor UI changes, we squashed lots of bugs and improved reliability and performance of the app across the board.

### DAO
- [Add CSV export to BSQ transaction view](https://github.com/bisq-network/bisq/pull/5054)
- [Move BSQ price in USD at first row](https://github.com/bisq-network/bisq/pull/4988)
- [Add indication of last GH CR issue](https://github.com/bisq-network/bisq/pull/5014)
- [Fix request amount bounds in ReimbursementValidator](https://github.com/bisq-network/bisq/pull/5077)

### UI
- [Add toggle for displaying volume in trade statistics chart in USD](https://github.com/bisq-network/bisq/pull/5066)
- [Add toggle for hiding not takable offers](https://github.com/bisq-network/bisq/pull/5048)
- [Add a 'payment method details' screen](https://github.com/bisq-network/bisq/pull/5052)
- [Improve trade fee display at create and take offer screens and popups](https://github.com/bisq-network/bisq/pull/4985)
- [Disable CPU-intensive animations](https://github.com/bisq-network/bisq/pull/5090)
- [Improve popup text in case a local node is detected](https://github.com/bisq-network/bisq/pull/4984)
- [Keep main navigation items left aligned](https://github.com/bisq-network/bisq/pull/5087)
- [Reword &quot;trade started&quot; popup messages per suggestion](https://github.com/bisq-network/bisq/pull/5091)
- [Update translations and fix a broken German translation](https://github.com/bisq-network/bisq/pull/5037)
- [Show stacktrace in error popup at view exceptions](https://github.com/bisq-network/bisq/pull/5011)
- [Fix missing apostrophe in Withdrawal view](https://github.com/bisq-network/bisq/pull/5015)
- [Remove redundant popup when cancelling an offer](https://github.com/bisq-network/bisq/pull/4987)

### Trading
- [Change rule for 'reason for payment' field to not use trade ID but leave it empty](https://github.com/bisq-network/bisq/pull/5080)
- [Deactivate open offer if trigger price is reached](https://github.com/bisq-network/bisq/pull/5001)
- [Add payment method &quot;Cash by mail&quot;](https://github.com/bisq-network/bisq/pull/5092)
- [Change trade period for TransferWise from 1 day to 4 days](https://github.com/bisq-network/bisq/pull/5016)
- [Add option to hide non supported payment methods](https://github.com/bisq-network/bisq/pull/5045)
- [Select show-all currencies if TransferWise is selected](https://github.com/bisq-network/bisq/pull/5042)

### Wallet
- [Show a confirmation of successfully sending BTC or BSQ from wallet](https://github.com/bisq-network/bisq/pull/5071)
- [Improve path text on wallet info screen](https://github.com/bisq-network/bisq/pull/4991)
- [Fix broken `-ignoreLocalBtcNode` startup option](https://github.com/bisq-network/bisq/pull/5094)

### Reliability
- [Persist and republish mailbox messages](https://github.com/bisq-network/bisq/pull/5072)
- [Request only non-seed nodes if no seed nodes are available](https://github.com/bisq-network/bisq/pull/5041)
- [Access concrete data stores](https://github.com/bisq-network/bisq/pull/5031)
- [Improve offer publishing](https://github.com/bisq-network/bisq/pull/4950)
- [Improve getBlocks request handling](https://github.com/bisq-network/bisq/pull/4851)
- [Improve CleanupMailboxMessages](https://github.com/bisq-network/bisq/pull/4975)
- [Fix premature disconnections from seeds](https://github.com/bisq-network/bisq/pull/5057)

### Mediation/Arbitration
- [Add mediators keybase usernames](https://github.com/bisq-network/bisq/pull/5004)

### Performance
- [Persist failed attempts of decrypting mailbox messages](https://github.com/bisq-network/bisq/pull/5061)
- [Cache signature verification results](https://github.com/bisq-network/bisq/pull/5047)
- [Cache results in account witness domain](https://github.com/bisq-network/bisq/pull/4953)

### Network
- [Add 4 old v2 seed nodes](https://github.com/bisq-network/bisq/pull/5078)
- [Add option to prevent periodic shutdown for seed nodes](https://github.com/bisq-network/bisq/pull/5039)
- [Add filter support on network level](https://github.com/bisq-network/bisq/pull/5038)
- [Improve cleanup tor dir at seeds](https://github.com/bisq-network/bisq/pull/5070)
- [Avoid resync from genesis in case of dao state issues](https://github.com/bisq-network/bisq/pull/4971)
- [Update inventory code](https://github.com/bisq-network/bisq/pull/5040)

### API
- [Add new api methods 'getmyoffers' and 'getmyoffer'](https://github.com/bisq-network/bisq/pull/5056)
- [Add new api method 'sendbtc'](https://github.com/bisq-network/bisq/pull/4922)
- [Add new api method 'gettransaction'](https://github.com/bisq-network/bisq/pull/4948)
- [Add optional txFeeRate parameter to api 'sendbsq'](https://github.com/bisq-network/bisq/pull/4900)
- [Support tx memo field for btc withdrawals from api](https://github.com/bisq-network/bisq/pull/4925)
- [Add protection tools](https://github.com/bisq-network/bisq/pull/5053)
- [Integrate new protection tools into api's offer &amp; trade services](https://github.com/bisq-network/bisq/pull/5065)
- [Prevent excessive api calls](https://github.com/bisq-network/bisq/pull/4966)
- [Use posix-style CLI opts, provide method help](https://github.com/bisq-network/bisq/pull/5081)
- [Add api trade simulation scripts](https://github.com/bisq-network/bisq/pull/5093)
- [Pass hash to bitcoind blocknotify script](https://github.com/bisq-network/bisq/pull/4996)
- [Stub out support for OpenOffer's triggerPrice in api](https://github.com/bisq-network/bisq/pull/5076)
- [Use Bisq's UserThread.executor in gRPC server](https://github.com/bisq-network/bisq/pull/4936)

### Development
- [Remove awt dependencies except for webcam library](https://github.com/bisq-network/bisq/pull/5008)
- [Update installation script](https://github.com/bisq-network/bisq/pull/4893)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.5.6.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.5.6.jar`
The output need to match the value from the Bisq-1.5.6.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.5.6.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Credits

Thanks to everyone who directly contributed to this release:

- @chimp1984
- @ripcurlx 
- @ghubstan
- @jakub_cz
- @jmacxx 
- @m52go 
- @sqrrm 
- @stejbac

A special thanks to our first time contributors:

- @81dr: [Update installation script](https://github.com/bisq-network/bisq/pull/4893)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.5.6</title>
    <updated>2021-02-16T16:07:33Z</updated>
    <dc:date>2021-02-16T16:07:33Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.4</id>
    <link href="https://github.com/zkSNACKs/WalletWasabi/releases/tag/v1.1.12.4"/>
    <summary># Summary

This silent release contains an updated Tor client that has the fix for the DDoS vulnerability. Users who encountered Tor connection problems should update their Wasabi. 

- **Tor client update (Tor 0.4.4.7), fixed the [DDos vulnerability](https://blog.wasabiwallet.io/wasabi-wallet-tor-consensus/).**
- **Best effort node connection strategy, more stable peer connections. This will also solve the v2 onion service deprecation problem.**
- **Bitcoin Knots v0.21.0**

# Newbie Guide

While setting up Wasabi is straightforward, even a Linux wizard with the longest beard can get stuck on the most basic tasks. Consider taking a look at the [Installation Instructions](https://docs.wasabiwallet.io/using-wasabi/InstallPackage.html) guide.

# Advanced Guide

If you want to build Wasabi from source code or update the source code check out [these instructions.](https://docs.wasabiwallet.io/using-wasabi/BuildSource.html)

From version 1.1.3 Wasabi also introduces [reproducible builds](https://reproducible-builds.org/): [Deterministic Build Guide](https://github.com/zkSNACKs/WalletWasabi/blob/master/WalletWasabi.Documentation/Guides/DeterministicBuildGuide.md)

Build with .NET Core 3.1.403-win-x64.

## FAQ

- **Frequently asked questions [here](https://docs.wasabiwallet.io/FAQ/).**
- **Requirements?** x64, Linux, &gt;Win10, &gt;macOS 10.13.

# Release Notes

- **Tor update** https://github.com/zkSNACKs/WalletWasabi/pull/5144
- **New connection strategy** https://github.com/zkSNACKs/WalletWasabi/pull/5024
- **Knots update** https://github.com/zkSNACKs/WalletWasabi/pull/5216
- **More log messages** https://github.com/zkSNACKs/WalletWasabi/pull/4965
</summary>
    <title>zkSNACKs/WalletWasabi: v1.1.12.4</title>
    <updated>2021-02-16T15:36:21Z</updated>
    <dc:date>2021-02-16T15:36:21Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.3.4</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.3.4"/>
    <summary>Umbrel v0.3.4 fixes a minor bug in v0.3.3 that was causing the update process to fail for some users.

Here's what new in Umbrel v0.3.3:

Umbrel v0.3.3 is here with 3 brand new apps in the Umbrel App Store — Samourai Server (Dojo + Whirlpool), Mempool, LNbits —  a totally redesigned wallet connector, Lightning Pool, Bitcoin Core v0.21.0, and more.

If your update gets stuck for some reason, please message us on Telegram: https://t.me/getumbrel&quot;

Diff: https://github.com/getumbrel/umbrel/compare/v0.3.3...v0.3.4</summary>
    <title>getumbrel/umbrel: v0.3.4</title>
    <updated>2021-02-15T16:38:17Z</updated>
    <dc:date>2021-02-15T16:38:17Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.3.3</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.3.3"/>
    <summary>Umbrel v0.3.3 is here with 3 brand new apps in the Umbrel App Store — Samourai Server (Dojo + Whirlpool), Mempool, LNbits —  a totally redesigned wallet connector, Lightning Pool, Bitcoin Core v0.21.0, and more.

If your update gets stuck for some reason, please message us on Telegram: https://t.me/getumbrel

Diff: https://github.com/getumbrel/umbrel/compare/v0.3.2...v0.3.3</summary>
    <title>getumbrel/umbrel: v0.3.3</title>
    <updated>2021-02-15T13:50:58Z</updated>
    <dc:date>2021-02-15T13:50:58Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.12.1-beta.rc3</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.12.1-beta.rc3"/>
    <summary># Database Migrations

There are no migrations in `lnd` v0.12.1-beta.rc3.

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/bitconner/pgp_keys.asc | gpg --import
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-bitconner-v0.12.1-beta.rc3.txt.asc` is in the current directory) with:

```
gpg --verify manifest-bitconner-v0.12.1-beta.rc3.txt.asc
```

You should see the following if the verification was successful:

```
gpg: Signature made Thu Feb 11 18:44:20 2021 PST
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Timestamp 

From this new version onwards, in addition time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: ` manifest-roasbeef-v0.12.1-beta.rc3.txt.asc.ots`.

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-roasbeef-v0.12.1-beta.rc3.txt.asc.ots -f manifest-roasbeef-v0.12.1-beta.rc3.txt.asc
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved.
The release binaries are compiled with `go1.15.7`, which is required by verifiers to arrive at the same ones.
They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.12.1-beta.rc3
gpg: Signature made Thu Feb 11 18:03:36 2021 PST
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

## Verifying the Docker Images

To verify the `lnd` and `lncli` binaries inside the docker images against the signed, reproducible release binaries, there is a verification script in the image that can be called (before starting the container for example):

```shell
$ docker pull lightninglabs/lnd:v0.12.1-beta.rc3
$ docker run --rm --entrypoint=&quot;&quot; lightninglabs/lnd:v0.12.1-beta.rc3 /verify-install.sh
$ OK=$?
$ if [ &quot;$OK&quot; -ne &quot;0&quot; ]; then echo &quot;Verification failed!&quot;; exit 1; done
$ docker run lightninglabs/lnd [command-line options]
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming
that `vendor.tar.gz` and `lnd-source-v0.12.1-beta.rc3.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.12.1-beta.rc3.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.1-beta.rc3&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.1-beta.rc3&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## Spec Compatibility

 - 0.12.1-beta.rc3 fixes a [recently discovered edge-case in the spec](https://github.com/lightningnetwork/lightning-rfc/issues/794) surrounding retransmission of `RevokeAndAck` and `CommitSig` that can lead to channel force closures if they are not retransmitted in the same order upon reconnection. This version now [persists this extra state required to determine the correct transmission order](https://github.com/lightningnetwork/lnd/pull/4915), [in accordance with the new spec requirements](https://github.com/lightningnetwork/lightning-rfc/pull/810). This eliminates a potential vector for channel desynchronization on restart once both sides of the channel have updated and a successful state transition is performed.
 - Prior to this version, `lnd` may have incorrectly attempted an MPP payment even if the receiver's `NodeAnnouncement` or invoice did not set the MPP feature bit. This was caused by a bug that incorrectly assumed support for `payment_secrets` implied support for MPP. A fix has been applied that [limits the maximum number of splits to 1 when the receiver doesn't support MPP](https://github.com/lightningnetwork/lnd/pull/4924).

## Gossip Propagation Improvements

This release [reverts the removal of the premature channel update cache](https://github.com/lightningnetwork/lnd/pull/5003) that was removed in 0.12.0-beta. Absence of the cache was seen to cause issues with channel update propagation, so the change is reverted to restore the pre-0.12.0-beta behavior and stability. The current plan is to reschedule the cache's removal for 0.13 after performing more extensive investigation.
 
In addition, the gossip throttling adding in v0.12.0 has been [refactored to be less aggressive with respect to non-keepalive channel updates](https://github.com/lightningnetwork/lnd/pull/5006), i.e. channel updates that differ in more than just the timestamp. Previously `lnd` would drop all but the first such update that it received over the course of a block, which has reportedly been too restrictive and resulted in degraded propagation of routine channel updates.

The new throttling logic now employs a directional [token bucket rate limiter](https://en.wikipedia.org/wiki/Token_bucket), the same approach used by `lnd` to rate-limit gossip requests from sync peers. Each token bucket is configured to drop non-keepalive updates arriving faster that once per minute, yet permitting bursts of up 10 updates. This improves on the previous approach in a few ways:
 - Updates are now limited with respect to a consistent time source, i.e. seconds, rather than block height. This makes it easier to reason about when channel updates might get dropped as an average user, and places a deterministic bound on the next time a normal user can reliably update their channel again.
 - The rate limits are now applied _directionally_, so that one end of the channel cannot cause their counterparty's channel updates to be dropped. This has the effect of making the penalization more precise, and better targets individuals that exhibit abusive behavior.
 - By factoring in bursts, it provides enough tolerance for cases where policy changes that may occur in quick succession, e.g. disable followed by reenable, or modifying a channel policy immediately after open.

## No Gossip Mode

This release includes support for a [no-graph sync mode](https://github.com/lightningnetwork/lnd/pull/4945) which can be enabled by setting `numgraphsyncpeers=0`. In prior versions, running `lnd` in this configuration would still trigger an initial historical sync with the first connected peer on each restart. The behavior was modified under the assumption that users who have already configured `lnd` to not receive gossip updates probably don't want to sync the graph at all.

This mode is especially helpful to wallet developers that choose to outsource pathfinding via their own service, or purely forwarding nodes that never need to perform pathfinding.

## Pinned Gossip Syncers

Typically `lnd` performs this historical channel reconciliation periodically, rotating between the set of all active peers, and attempting to keep `numgraphsyncpeers` (defaults to 3) in a state where they are receiving new gossip messages. Due to the eventually consistent properties of this algorithm (and the gossip protocol in general), there are some cases that lead to long delays in a node receiving newer updates. Notably, if a node has many peers, then it may be a while before the sync rotation algorithm queries a given peer for newer updates.

To provide more control, a new configuration option has been added [allowing users to _pin_ their nodes into an ActiveSync with particular nodes](https://github.com/lightningnetwork/lnd/pull/4934). Each time a connection is established with a pinned syncer, `lnd` will first perform a historical channel reconciliation, followed by a request for the pinned syncer to forward all new gossip messages. Doing so allows users to keep their routing table tightly synchronized with nodes in their list of configured, pinned syncers. Users can add one or more pinned syncers via:
```
gossip.pinned-syncers=&lt;pubkey1&gt;
gossip.pinned-syncers=&lt;pubkey2&gt;
```
This can be especially useful for services that run multiple, well-connected `lnd` nodes, and want their own nodes to maintain similar views of the channel graph. Users can also use `gossip.pinned-syncers` in combination with `numgraphsyncpeers=0` to only sync from a specific peer.

## RPC Changes
 - `lnd` 0.12.1-beta.rc3 now [exposes the HTLC `attempt_id` on response from `TrackPayment`](https://github.com/lightningnetwork/lnd/pull/4956). Internally, `lnd` uses `attempt_id` as a unique identifier for each HTLC it sends out, and to provide a total ordering on all HTLC sent by the daemon.  This identifier can be used by developers to better reflect progress of a payment, making it easier to extract per-HTLC state deltas rather than displaying the full payment state every time.


## Deterministic Build / Release Verification
 - The signature verification script [was fixed to no longer fail if a public key of a signature is missing](https://github.com/lightningnetwork/lnd/pull/4963) and @halseth's [signing public keys were added](https://github.com/lightningnetwork/lnd/pull/4962).
 - The [golang version `1.15.7`](https://github.com/lightningnetwork/lnd/pull/4961) is now used for compilation across all build processes.
 - The release process has been modified to [clean any generated mobile stubs before packaging/verifying the release](https://github.com/lightningnetwork/lnd/pull/4983). Without doing so, users would arrive at a different `vendor.tar.gz` depending on whether or not they had previously run `make mobile` due to small differences in the imports present in the project.
 - Fixed an issue that allowed GO_VERSION of the release toolchain to be spuriously updated to newer releases of go. This was hit unexpectedly in the v0.12.1-beta.rc2 release cycle where the release binaries were built with go1.15.8, which had been released earlier in the week, rather than go1.15.7 which is pinned in our release/verify docker containers. As a result, building the release locally did not match the binaries uploaded by github to the release. We resolved this by _exactly_ [pinning the GO_VERSION used to compile the release binaries](https://github.com/lightningnetwork/lnd/pull/5013).

## Developer Toolchain
 - Some of the GitHub Action scripts [were replaced by vendored scripts](https://github.com/lightningnetwork/lnd/pull/4952) to prevent secret extraction through malicious code.
 - The build process was [enhanced with a `make imports`](https://github.com/lightningnetwork/lnd/pull/2162) command that organizes all golang import statements.
 - The protobuf definitions are now compiled [using docker](https://github.com/lightningnetwork/lnd/pull/4911) to avoid needing to install a set of binaries and libraries with exact pinned versions. The instructions on how to [format the proto files with MacOS](https://github.com/lightningnetwork/lnd/pull/4944) were added as well.

## Bug Fixes
 - Fixes a bug that can result in a [panic when generating hodl invoices for private channels](https://github.com/lightningnetwork/lnd/pull/4978). An [itest has also been added for generating hodl invoices using private channels](https://github.com/lightningnetwork/lnd/pull/4996) to provide more complete coverage of this area going forward.
 - Squashes a bug that results in a [startup error when the daemon exits while in the middle of processing graph updates for its own channels](https://github.com/lightningnetwork/lnd/pull/4958).
 - Creates a [fast-path for persisting locally-created gossip messages](https://github.com/lightningnetwork/lnd/pull/4964) rather than waiting to be batched with remote graph updates. This reduces the likelihood of partially-writes for local graph updates, which was partially patched in https://github.com/lightningnetwork/lnd/pull/4958.
 - The development docker files were [fixed by adding an extra listener](https://github.com/lightningnetwork/lnd/pull/4938) to make sure the beginner tutorial can be followed without running into errors.
 - Fixes an [error message returned when attempting to bind a REST listener on a public interface without authentication](https://github.com/lightningnetwork/lnd/pull/4993), such that it returns the relevant configuration flag (`no-rest-tls`).
 - Fixes an issue with [IPv6 address resolution when using `tor.active`](https://github.com/lightningnetwork/lnd/pull/4988) such that `lnd` will fall back to the system resolver.
 - Fixes an issue with [IP alias resolution](https://github.com/lightningnetwork/lnd/pull/5007) such that `lnd` will fall back to the system resolver.

## Full Changelog
 - https://github.com/lightningnetwork/lnd/pull/4958 - netann: ignore unknown channel update on startup
 - https://github.com/lightningnetwork/lnd/pull/4962 - scripts: add halseth key to verify script
 - https://github.com/lightningnetwork/lnd/pull/4938 - docker: add an extra listener for localhost
 - https://github.com/lightningnetwork/lnd/pull/4944 - docs: Add clang-format instructions for mac
 - https://github.com/lightningnetwork/lnd/pull/4956 - lnrpc: add htlc attempt id
 - https://github.com/lightningnetwork/lnd/pull/4952 - Github: use vendored actions for steps with sensitive info
 - https://github.com/lightningnetwork/lnd/pull/4963 - scripts: don't fail signature verification on missing public key
 - https://github.com/lightningnetwork/lnd/pull/2162 - Makefile: define `make imports`
 - https://github.com/lightningnetwork/lnd/pull/4911 - lnrpc/mobile: use docker to compile/format protos
 - https://github.com/lightningnetwork/lnd/pull/4974 - Fix typo in restorechanbackup command description
 - https://github.com/lightningnetwork/lnd/pull/4902 - lntest/channels: introduce subpackage to deduplicate structs
 - https://github.com/lightningnetwork/lnd/pull/4978 - invoices+rpc: add missing channel graph to the AddInvoiceConfig
 - https://github.com/lightningnetwork/lnd/pull/4934 - discovery: pinned syncers
 - https://github.com/lightningnetwork/lnd/pull/4924 - routerrpc,routing: limit max parts if the invoice doesn't declare MPP support
 - https://github.com/lightningnetwork/lnd/pull/4961 - build: update CI builds to use go 1.15.7
 - https://github.com/lightningnetwork/lnd/pull/4979 - routing: add new TestPaymentAddrOnlyNoSplit test case
 - https://github.com/lightningnetwork/lnd/pull/4915 - multi: store bool to determine retransmission ordering
 - https://github.com/lightningnetwork/lnd/pull/4981 - docs: correct sign command
 - https://github.com/lightningnetwork/lnd/pull/4983 - make: clean mobile stubs before building release
 - https://github.com/lightningnetwork/lnd/pull/4993 - fix: correct no-rest-tls parameter in error message
 - https://github.com/lightningnetwork/lnd/pull/5003 - Revert: https://github.com/lightningnetwork/lnd/pull/4895 to store premature channel updates
 - https://github.com/lightningnetwork/lnd/pull/4996 - itest: add coverage for hold invoices with hop hints
 - https://github.com/lightningnetwork/lnd/pull/4945 - discovery: no graph sync
 - https://github.com/lightningnetwork/lnd/pull/4964 - channeldb+routing+gossiper: add local updates to graph immediately
 - https://github.com/lightningnetwork/lnd/pull/5006 - discovery: use token bucket based rate limiting to throttle gossip
 - https://github.com/lightningnetwork/lnd/pull/4988 - add isIPv6Host helper to force v6 addrs through system resolver
 - https://github.com/lightningnetwork/lnd/pull/5007 - lncfg: add IPv6 resolution bypass &amp; account for local hostname aliases
 - https://github.com/lightningnetwork/lnd/pull/5013 - github/workflows: pin exact docker release

# Contributors (Alphabetical Order)

Andras Banki-Horvath
Carla Kirk-Cohen
Conner Fromknecht
Eugene Siegel
Jake Sylvestre
Johan T. Halseth
Joost Jager
Juan Pablo Civile
Olaoluwa Osuntokun
Oliver Gugger
rockstardev
Umar Bolatov
Vlad Stan
Wilmer Paulino</summary>
    <title>lightningnetwork/lnd: v0.12.1-beta.rc3</title>
    <updated>2021-02-12T06:30:35Z</updated>
    <dc:date>2021-02-12T06:30:35Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.4</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.4"/>
    <summary>**New**

- Fee estimation based on mempool 
- iOS 14.5 support
- Electrum json import support
- AEZEED mnemonics support (LND wallet)
- Remove Location permission (Local trader)
- Wallet update indicator
- Vault manage keys - show alert if unsaved
- Lower fee value if balance is not enough

**Fixed**

- &quot;Can't finalize input&quot;' error (Vaults)
- Scroll on multi sig creation (Vaults)
- Loading on creation (Vaults)
- Import seed hangs forever (Vaults)
- Scanning invalid QR code throws multiple alerts
- Cached wallet address wouldn't change
- 'Few seconds ago' -&gt; 'pending'
- Legacy wallet can now derive UTXO from transactions if fetching listUnspent from network is not possible
- Biometrics with PSBT
- Better support of coldcard's 'p2sh-p2wsh'
- Do not show notification settings if device does not support it

**Download**

[![Appstore](https://bluewallet.io/uploads/app-store-badge-blue.svg)](https://github.com/BlueWallet/BlueWallet/releases/download/v6.0.4/BlueWallet.6.0.5.dmg)

[![Playstore](https://bluewallet.io/uploads/play-store-badge-blue.svg)](https://github.com/BlueWallet/BlueWallet/releases/download/v6.0.4/android-6.0.5.apk)
</summary>
    <title>BlueWallet/BlueWallet: v6.0.4</title>
    <updated>2021-02-11T20:26:03Z</updated>
    <dc:date>2021-02-11T20:26:03Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/mempool/mempool/releases/tag/v2.1.1</id>
    <link href="https://github.com/mempool/mempool/releases/tag/v2.1.1"/>
    <summary>This update adds support for Umbrel, together with a few minor bugfixes:

* Improve Docker workflow for Umbrel (#326) by @bguillaumat
* BSQ token market cap calculation fix (#332) by @devinbileck
* Lightning HTLC identification label fix (#320) by @fiatjaf</summary>
    <title>mempool/mempool: v2.1.1</title>
    <updated>2021-02-10T14:28:06Z</updated>
    <dc:date>2021-02-10T14:28:06Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin-s/bitcoin-s/releases/tag/v0.5.0</id>
    <link href="https://github.com/bitcoin-s/bitcoin-s/releases/tag/v0.5.0"/>
    <summary># v0.5.0 - The release who must not be named

## Running Bitcoin-S

If you want to run the standalone server binary, after verifying gpg signatures, you
can `unzip bitcoin-s-server-0.5.0.zip` and then run it with `./bin/bitcoin-s-server` to start the node. You will need to
configure the node properly first, you can find example
configurations [here](https://bitcoin-s.org/docs/config/configuration#example-configuration-file).

You can then unzip the `bitcoin-s-cli-0.5.0.zip` folder and start using the `bitcoin-s-cli` like this:

```bashrc
./bin/bitcoin-s-cli --help
Usage: bitcoin-s-cli [options] [&lt;cmd&gt;]

  -n, --network &lt;value&gt;    Select the active network.
  --debug                  Print debugging information
  --rpcport &lt;value&gt;        The port to send our rpc request to on the server
  -h, --help               Display this help message and exit
```

For more information on what commands `bitcoin-s-cli` supports check the documentation, here is where to
start: https://bitcoin-s.org/docs/next/applications/server#server-endpoints

## Running the oracle server

If you want to run the standalone oracle server binary, after verifying gpg signatures, you
can `unzip bitcoin-s-oracle-server-0.5.0.zip` and then run it with `./bin/bitcoin-s-oracle-server` to start the node. You will need to
configure the node properly first, you can find example
configurations [here](https://bitcoin-s.org/docs/config/configuration#example-configuration-file).

You can then unzip the `bitcoin-s-cli-0.5.0.zip` folder and start using the `bitcoin-s-cli` like this:

```bashrc
./bin/bitcoin-s-cli --help
Usage: bitcoin-s-cli [options] [&lt;cmd&gt;]

  -n, --network &lt;value&gt;    Select the active network.
  --debug                  Print debugging information
  --rpcport &lt;value&gt;        The port to send our rpc request to on the server
  -h, --help               Display this help message and exit
```

For more information on what commands `bitcoin-s-cli` supports check the documentation, here is where to
start: https://bitcoin-s.org/docs/oracle/oracle-server

## Verifying signatures

This release is signed with [Chris's signing key](https://bitcoin-s.org/docs/next/security#disclosure) with
fingerprint `339A49229576050819083EB3F99724872F822910`

To do the verification, first hash the executable using `sha256sum`. You should check that the result is listed in
the `SHA256SUMS.asc` file next to its file name. After doing that you can use `gpg --verify` to authenticate the
signature.

Example:

```
$ sha256sum bitcoin-s-server-0.5.0.zip
59c14b9fa27731d7a97f61145569619c5c497c22a976add7e554ea063c63d373  bitcoin-s-server-0.5.0.zip
$  gpg --verify SHA256SUMS.asc
gpg: Signature made Thu 04 Feb 2021 12:49:59 PM CST
gpg:                using RSA key 339A49229576050819083EB3F99724872F822910
gpg: Good signature from &quot;Chris Stewart &lt;stewart.chris1234@gmail.com&gt;&quot; [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 339A 4922 9576 0508 1908  3EB3 F997 2487 2F82 2910
```

### Website

https://bitcoin-s.org/

### Releases

https://repo1.maven.org/maven2/org/bitcoin-s/

#### Snapshot releases

https://oss.sonatype.org/content/repositories/snapshots/org/bitcoin-s/

## BREAKING CHANGES to Configuration Options

It is required that all wallets pre #2217 need to have the configuration

&gt; bitcoin-s.wallet.aesPassword = &quot;changeMe&quot;

See [issue #2245](https://github.com/bitcoin-s/bitcoin-s/issues/2245) for the errors that are thrown when this isn't set.

This password can be changed now with the `keymanagerpassphrasechange` RPC command.

## Multi Wallet Support

Initial support for saving multiple seeds and wallets has been added to Bitcoin-S!
This does not yet allow you to load and use multiple wallets at once, but you can switch between wallets using the
`bitcoin-s.wallet.walletName` config option.

## Module Level Changes

### Bitcoind RPC Client

The Bitcoind RPC Client now has support for v0.20 &amp; v0.21!

The Bitcoind RPC Client now has support for using it with a bitcoind that has multiple wallets loaded, this is done by
setting the `walletName` parameter in the required functions.

#### Commits

940fce433d4 Fix rescans with bitcoind backend (#2605)

648e7d9abac Bitcoind v0.21.0 support (#2414)

3f18ba18d7e Bitcoind Version from String (#2421)

905491fe0e8 Fix getPeerInfo for v0.20 (#2402)

e8305477739 Use PSBT type in bitcoind calls (#2242)

aaf1a81d4ca Bitcoind RPC Multi-wallet support  (#2231)

7c887cc144b Move newer functions to common rpc interface (#2230)

a5621f5f565 Add bitcoind functions for load and unload wallet (#2229)

ead4eaa1477 Make bitcoind extend chain api (#2087)

206c5a93d00 Bitcoind v0.20 updated rpcs &amp; tests (#2061)

0b100383f32 Create initial BitcoindV20RpcClient (#2060)

### Chain

The `ChainHandler` has been split up into two different types: `ChainHandler` and `CachedChainHandler`.

`CachedChainHandler` stores in memory the latest block headers and allows for faster syncing.
`ChainHandler` uses the chain database to access all data, this is necessary for things like the wallet to be able to
point to a single `ChainApi` and not get outdated data.

Neutrino syncing should be faster after some optimizations.

#### Commits

d159f3eb5fc Reduce number of rows selected by best filter header/best filter query (#2617)

1dacb74edf7 Optimize filter sync and fetching filter heights (#2568)

e44a620ea1a Small cleanups on the chain docs (#2515)

4e285e67469 Make ChainApi.processHeaders() return a failed future in the case we … (#2436)

9bef444fe70 Rework BlockHeaderDAO.chainTips into two methods: BlockHeaderDAO.{get… (#2443)

40f46d7c7a8 Remove BlockHeader.getBlockchainsFrom(), rework type signature for Bl… (#2431)

2de17bb4e47 2020 11 13 issue 2258 (#2260)

### CLI

New CLI commands have been added such as `decodepsbt`, `getblockheader`, and `bumpfeecpfp`. For a full list of available CLI
commands check [the docs](https://bitcoin-s.org/docs/0.5.0/applications/server#server-endpoints).

The `Cli` module is now published as a library, this should allow other projects to easily interact with a Bitcoin-S server.

The `cli` is also published using the `sbt-native-image` plugin. (#2494)

#### Commits

f849ba492f1 Wallet name in walletinfo (#2603)

94c71543fb9 Add createmultisig cli command (#2495)

fb43748d978 Version Number in logs &amp; Cli Command (#2467)

2be2df12dbb Publish Cli as library (#2433)

847981317a0 Add getblockheader cli command (#2424)

f135322c094 Bump Fee Cli commands (#2415)

a2b54eef308 Import Seed cli commands (#2376)

ce9fbb0807a Analyze PSBT function (#2240)

c08379b2361 Decode PSBT function (#2237)

c662cf802d1 Make tx an argument for decoderawtransaction (#2155)

8c4308e2c6a Make cli pretty print json (#2130)

### Core

Fixed some bugs with PSBT parsing and adding witness scripts.

Initial BIP 155 support for sending and receiving addrv2 messages.

Initial BIP 325 support for interacting with Signet.

Experimental TLV support for DLC messaging, data structures, and algorithms.
These are subject to change and if your project is looking to use them
it is recommended to use [nightly builds](https://bitcoin-s.org/docs/next/getting-started#nightly-builds) to stay up to date.

#### Commits

0280707eaa5 Make contract info lazy so native image works (#2606)

c4edcb2d5f4 Update dlc before release (#2543)

04cc10effec Add better Block.toString that doesn't blow up logs (#2585)

810ca7c678c Create BlockSyncState type (#2567)

aa0a6f96b8b Bech32 address improvements (#2571)

abc1fdd23fb 2021 01 15 dlc refactors (#2518)

c4650e3930b Make allFactories lazy so we don't hit NPE exceptions (#2491)

056702f61c1 Add explicit signing version associated with a EventDescriptor (#2487)

223be805735 Limit bech32 addresses to segwitv0 (#2471)

141fc548bcb Modified rounding on DLCPayoutCurve interpolation to match spec (#2470)

aba109de16a Add attestation verification utility (#2438)

ff60c6e03e9 OutcomePayoutPoint now has the correct types and deffers rounding due to extra_precision in serialized points (#2441)

036d714563b Made TLV serialization and deserialization uniform under a succinct and expressive API (#2420)

13c4b0d9556 Added length prefixes to contract_info and cet_signatures TLVs (#2419)

719fab23b7a Remove CompatEither, it was needed for historical purposes to support… (#2394)

378c51991b9 DLC Data Structures on Master Cleanup (#2375)

49a281acaf0 Pulled down work from adaptor-dlc onto master (#2339)

49871df0c35 Require CJDNS starts with 0xFC (#2356)

3e7fade2240 Add latest ProtocolVersion (#2332)

13443fd0d1e Implement BIP 155 addrv2 messages (#2321)

b3d70f559a6 Fix TLV parsing for non-standard strings (#2312)

0c03aa9c24d Add function to validate OracleAnnouncementV0TLV's signature (#2308)

28c37ccf1fe trivial: Add a sha256 hash field on all TLV (#2300)

b638c6837e6 Move english word list to be represented by a Vector in memory (#2287)

18dfbed8c90 Add helper OracleEventTLVV0.maturation method (#2267)

e4194220c1e Update Oracle TLVs (#2185)

7178cb7136f Fixed P2SH(Segwit) bug and brought down DLC-used PSBT functionality (#2140)

ddf39057fe0 Only Validate PSBT BIP143 vulnerability on signing (#2204)

02c10fd89ed Pretty Fee Rate toStrings (#2210)

c275a8c8aa6 Make tx bytes functions lazy vals (#2180)

c5be81d5e21 Add address descriptors (#2176)

2e1b4d04919 P2SHTxSigComponent constructor now detects witness data (#2169)

7bbc89fb33f Optimize GetHeadersMessage.fromBytes (#2131)

4ac93660d2c Add BIP45 Multisig Purpose (#2103)

f69678d74bf Allow any HDCoinType (#2097)

fa31609daca Enable AddrMessageTest (#2106)

d158f4fcb08 Calculate HRP from network param instead of the inverse (#2079)

c2315082d8c Create ExtPrivateKeyHardened (#2073)

856f88f0ddb Initial SigNet support (#2057)

### Crypto

ECDSA Adaptor signatures have been added in a basic Java implementation.
These should be used with caution as they are experimental and still being developed.
They are based on the specification located [here](https://github.com/discreetlogcontracts/dlcspecs/pull/114),
however they do not fully follow the specification and will be updated in the future.

Low R Signing should now use the same algorithm as Bitcoin Core.
Previously our first attempted signature would use different added entropy.

#### Commits

2c2646c78d8 Commit add Opt/T fromBytes/fromHex methods similar to StringFactory (#2499)

e944ed083f3 Bump size of data for AesCryptTest (#2483)

313e9d6e798 Update secp branch with synced java files (#2448)

70d014f7b26 Fixed Low R signing (#2408)

c7e5c634f3a Brought down ecdsa adaptor signatures implemented in scala from the dlc-crypto branch (#2034)

5bcf3e2a533 Introduced NFC normalization for strings in CryptoUtil and added String hashing functions (#2102)

### Db Commons

Various improvements to initializing and parsing an `AppConfig`.

#### Commits

c91f81bdbfb Fix all DAOs to use safeDatabase (#2556)

0cc85cc0b3d Simplify DBConfig Test to fix failures (#2459)

00e6a81a2a6 Safely delete files in DBConfigTest (#2451)

6b2237d2e81 Fix overrides AppConfig.configOverrides with DLCOracleAppConfig, also remove hardcoded value out of
AppConfig.configOverrides so people have to implement it (#2209)

ca5324c6a22 2020 10 12 issue 2164 (#2173)

1997f22e7d3 Refactor db configuration to use the key 'user' rather than 'username' inline with slick documentation (#2184)

56b385a0e79 Create fromConfig functions for AppConfigs (#2170)

0e41c29a3fe 2020 10 08 issue 2147 (#2153)

da2f3232cd0 2020 10 06 explicit classloader (#2148)

475ed19df66 2020 10 05 redo config (#2121)

4aec33f38cc Move configuration for sqlite into the 'bitcoin-s' key (#2113)

### DLC Oracle

The DLC Oracle is a new module in Bitcoin-S!
The DLC Oracle allows you to attest to events and sign their outcomes for DLC participants.

The DLC Oracle can be used to as a standalone module or as an RPC server.
You can check out the [documentation](https://bitcoin-s.org/docs/next/oracle/oracle-server) to find out more.

This is still in beta and is likely to have some breaking changes in the future. As of this release, it is up to date
with the [DLC Spec](https://github.com/discreetlogcontracts/dlcspecs).

#### Commits

779eefb6a58 Rename createevent rpc to createenumevent (#2604)

89e3fc54f59 Fix oracle cli to use announcements (#2576)

7cce23abf72 Implement OracleAttestmentV0TLV, save outcome to db (#2516)

166440b34b4 Update DLC Oracle Signing Algo (#2465)

7ad477fdaa2 Don't allow negative outcome for unsigned digit decomp events (#2446)

0897ea5da17 2020 11 17 dlcoracle dbutil (#2272)

4c623a8fcb5 Fix listEvents in DLCOracle (#2265)

cc428498648 Use New Oracle TLVs in DLCOracle (#2162)

be6a2a21846 Add DbManagement tests for Oracle (#2186)

f55e83ae21e Oracle Announcement TLVs (#2149)

bc3c0af1632 Use Llyod's Oracle recommendations on commitment Signature (#2117)

4cc30e15a99 Don't allow duplcate or 0 outcomes for a DLCOracle (#2120)

fcc6558a651 Increase DLC Oracle test coverage (#2128)

5d56e95af7e Add basic DLC Oracle (#2094)

28ed8db9a58 Move DLC Oracle module to `master` (#2083)

### Eclair RPC

Eclair RPC is now updated to be compatible with v0.5

#### Commits

d2203f2359f Bump Eclair version (#2405)

e38569db105 Add officially supported version of bitcoind by eclair, also add the ability to specify which version of bitcoind you are using for EclairRpcTestUtil.getBitcoindRpc (#2490)

### Fee Provider

Fixed a bug with the BitGo fee provider that occurred during high fee environments.

#### Commits

a08fc0c8a24 Fix BitGo fee provider parser (#2381)

### GUI

The GUI's icon now changes based on the network of the running server. The GUI now will update its balance periodically.

#### Commits

827f0f3b6a8 Uniform GUI denominations (#2534)

95935dca34f Make GUI auto-update balance (#2197)

d2f08fd2269 Add network specific icons for bitcoin-s (#2067)

### Key Manager

The password to encrypt a seed as well as a BIP 39 password are both now configurable.
There also exists now the ability to change your seed's password.

The Key Manager now supports the ability to store an `ExtPrivateKey`
instead of a Mnemonic. This is only used when using the `importxprv` cli command.

#### Commits

f5dae427613 Make KeyManager return better error messages (#2464)

0e9449d9a18 Add ability to store ExtPrivateKey instead of Mnemonic (#2372)

bd3584eb43f Mask BIP39 password in the BIP39KeyManager (#2350)

79b3d959d3a Create KeyManagerAppConfig (#2268)

744d8d18ab5 Add ability to change aes password (#2254)

15bb9357696 Use same config option for key manager projects (#2252)

42e9cbb1f21 Make aesPassword option for wallet config (#2217)

7b72d82440d Make BIP 39 password a config option (#2234)

### Node

Fixed an issue where the node would not request witness data for blocks.

Fixed an issue with parsing unknown messages.

#### Commits

d608a442556 Ignore block messages while syncing (#2587)

ddd47b1cf10 Optimize `node.start()` and fetching filter &amp; filter header heights (#2554)

7e942ba66dc Add unit test to make sure DataMessageHandler exception doesn't stop node (#2536)

da54d2e9fbd 2021 01 11 issue 2493 (#2503)

1ddd7bec1dd Recover errors in DataMessageHandler (#2460)

2b94b330528 2021 01 02 issue 2457 (#2461)

ecc4532bf7b Remove callbacks param from DataMessageHandler &amp; PeerMessageReceiver (#2476)

238bd025952 Request filters after processing (#2463)

9aa4d0fcd1c Fail broadcasting transaction when disconnected (#2336)

9a5ba7bd4f3 Fix P2PClient parsing unknown messages (#2315)

7172b4a049b Request witness blocks from peers (#2289)

61c1b916113 Bump user agent to new version (#2055)

### Server

Can now use bitcoind as a backend for your bitcoin-s server.
Checkout [the docs](https://bitcoin-s.org/docs/0.5.0/getting-setup#option-b-bitcoind-backend) on how to set this up.

Fixed issues where the server wasn't always returning correctly formatted json.

#### Commits

db6cd10c2f1 Fix bestblockhash rpc call (#2612)

a42601ebacd Fix rpc bind address from config (#2542)

a1a2524b56e Use mainnet for default server (#2453)

93dae6c2394 2021 01 09 issue 2496 (#2500)

8e6a37e9880 Remove extra logback files (#2456)

7409bae8f9d Remove need for params in RPC request (#2418)

eaecc1c377b Implement rpcbind to allow for binding to a different interface (#2409)

de5041ee278 Fix server configuration for the app server (#2413)

42c15ba6726 Fix datadir config option (#2271)

55249669989 Add directive to configure timeout on the appServer (#2275)

37012819959 Have api endpoints return json (#2178)

720932f7975 BitcoindRpcConfig Test (#2181)

9036869990a Add test for server startup (#2171)

8577bfd34d8 Remove requirement for ZMQ with bitcoind backend (#2137)

30b6e226622 Fix NPE and log location on server start up (#2163)

6b98154622f Fix npe exception on oracleServer/run (#2160)

593f170f2a2 Refactor Mains to use common BitcoinSRunner (#2141)

8048f1e80c7 Add DLC Oracle Server Endpoints (#2105)

105260249f1 Bitcoind backend on server start up (#2088)

c853151206f Create Util functions for wallets with a bitcoind backend (#2076)

23d0d7e0eaa Create BitcoindRpcAppConfig (#2077)

### Testkit

The testkit now allows you to set any binary location for bitcoind and eclair.

#### Commits

4bf637a008b Fix 'client1.getDaemon.datadir.exists() was true' (#2544)

d5f162ee09d Fix BitcoindV21RpcClient testkit errors (#2533)

8c918ac0a72 Refactor test case to be more idiomatic in hopes this kills CI failures (#2524)

84ce69eac85 Clean up fixture shutdown code a bit to try and see if this resolves … (#2498)

48cb939976f Don't allow fee unit gen to be 0 (#2346)

cbd6ea2cbec Start refactoring testkit to allow for specifying a different binary … (#2325)

8f9f7750d90 Remove hard coded bitcoind version eclair was depending on and switch to latest version of bitcoind (#2324)

c29d95eeceb Make BitcoinSAyncTest more thread safe and make sure we have all the … (#2292)

### Wallet

[Multi-Wallet support](#Multi-Wallet-Support) has been added.

New wallet commands have been added like `signpsbt`, `listreservedutxos`, and more.

The wallet now stores its last sync height to allow for chainApis that are ahead of the wallet.

The wallet now defaults to use native segwit (bc1 addresses) instead of legacy addresses.

#### Commits

ee7c96245e9 Add walletinfo rpc (#2546)

cba90e5c2bb Fix rescan to fetch blocks during scan (#2540)

36b5fc14271 Create isChange function for wallet (#2535)

f3e81d027df Remove WalletSync.sync() -&gt; WalletSync.syncFullBlocks() (#2522)

b76be736b83 Rename wallet.getSyncHeight() -&gt; wallet.getSyncDescriptorOpt(). We don't just use height in the descriptor, the hash is just as valuable for connecting to chains (#2479)

1d701c48a3c Use written txDbs in TransactionProcessing (#2449)

90e2a4b6f17 Account for rounding of fee rate in CPFP test (#2423)

92ac986baad Add extra checks for RBF transactions (#2416)

89222eb7669 Add wallet function to bump fee with CPFP (#2399)

64a6b6bbc5b Add wallet function to bump fee with RBF (#2392)

2db21fc3d21 Add get transaction cli command (#2370)

901fb2af17a Rescan Improvements (#2379)

18755df3d17 Multi Wallet support (#2345)

d884f7b4e9b Have makeOpReturnCommitment use random UTXO selection (#2320)

641b2236d6a Let wallet sign PSBTs (#2236)

7530a138300 Add listreservedutxos cli command (#2247)

641538440f1 Fee Provider from config (#2219)

49a58133ec2 Add Wallet State Descriptors (#2157)

e2b01e17ba8 Small improvements on FundTransactionHandling (#2143)

f7b97ba36eb Use SubtractFeeFromOutputsFinalizer when sending full utxos (#2072)

b59a17def0d Add ability to fully spend utxos (#2063)

### Website &amp; Documentation

865f1a6d460 DLC + Adaptor Docs (#2552)

8e799a4b245 Update website dependencies to address security warnings (#2607)

edf81251340 Hide chain api creation (#2569)

9f36250646c Add documentation to website for bitcoin-s-cli native image (#2591)

096504b905f Add enum oracle example (#2601)

61c3b8185e5 Add oracle configuration to example configuration.md (#2592)

0424bd8309a Fix aesPassword config in configuration docs (#2588)

ec65e48a29e Update Oracle Server docs, fix oracle server bugs (#2581)

d5243adf5a9 Add wallet sync documentation (#2565)

7c18083577c Remove range event example from website docs (#2575)

10c54186811 Updated DLC cli docs (#2551)

74884a50d27 Clarify getting-setup.md -- make distinctions between optional steps … (#2528)

f34f35ae2b7 Default to native segwit wallet (#2548)

663d94d1c0c Add comment about using defaultAccountType (#2549)

4a6c45f3137 Add whitepaper to website (#2547)

48918380003 Rescan/Restore wallet docs improvements (#2539)

65919e135b1 Touch up bitcoind docs (#2514)

1ea4e1b0be5 Add download link to navbar &amp; downloads page (#2473)

78e28baf3c5 Rename v0.4 version to 0.4.0 in docs (#2478)

4cd3079d890 Fix docs sidebar (#2466)

3e9b6881d23 KeyManager Docs (#2426)

ef1a3e7baf5 Add doc about no mempool (#2429)

2610a23a234 Fix broken links in docs (#2439)

732c38486ee Add to docs we support schnorr (#2428)

3d37d919a36 Add supported Bips docs (#2427)

c33f88eb050 Add old release notes (#2385)

e5225993c3c Change CI Status to use Github Actions badge (#2364)

7f759ab0840 docs: Logback conf command line docs (#2270)

3314cd36d05 docs: Add DLC Oracle db conf to docs (#2269)

add6b495b3c Add release notes directory similar to what bitcoin core does, docume… (#2246)

881d3b0b781 docs: Oracle Server setup docs (#2187)

25bc97765ed docs: Clarify there are 2 options for node backend (#2177)

6db248de032 docs: Fix internal database configuration docs (#2156)

08ac5cc9f12 docs: Add Bitcoind Backend Docs (#2136)

0c31a9d3e69 Update slack links (#2134)

2882956f303 docs: DLC Oracle Server (#2125)

ffc42a1ed3b Server installation guide (#2091)

dd272a8d8e3 systemd script (#2074)

c857f5e6c7b Change versions in readme (#2065)

40db826ffc5 docs: Calculate correct hashes in dlc doc (#2059)

### Other

72db35112d3 Fix compiler warning (#2609)

2f00b4a5deb Update sbt to 1.4.7 (#2598)

f2172965221 Update scala-collection-compat to 2.4.1 (#2597)

409373b89db Update metrics-core to 4.1.17 (#2580)

4a1316263f8 2021 01 27 conectionpool (#2578)

3ebf786fcd3 Update website deps (#2573)

23f15dffc71 Update sourcecode to 0.2.3 (#2557)

7bb0b10cd5e Update akka-actor, akka-slf4j, akka-stream, ... to 2.6.11 (#2517)

93fea25c32e Fix native CI workflow for different branches (#2521)

a16018bf172 Update sbt-mdoc to 2.2.16 (#2541)

1903ee30b07 Update native-lib-loader to 2.3.5 (#2523)

d21657e18bb Update sbt-native-image to 0.3.0 (#2511)

0f84e3d158b Add new sbt-native-image plugin that helps generate a correct native … (#2494)

0c0e2090136 Update scalafx to 15.0.1-R21 (#2492)

27e50b2c34e Update javafx-base, javafx-controls, ... to 16-ea+6 (#2489)

9eb6ec84582 Update play-json to 2.9.2 (#2468)

663a9514301 Update LICENSE year (#2474)

cc2c438da19 Remove -Xfatal-warnings flag for tests (#2469)

b0b56dd5da2 2020 12 18 enable lint options (#2454)

4e862b72976 Move RPC server logic into separate project (#2440)

f7c6fc141d0 Skip CI tests for docs PRs (#2435)

19c68b77b97 Update sbt to 1.4.6 (#2434)

528b4e01ee5 Outstanding DLC branch diff (#2432)

41b1c4a88d5 Update bcprov-jdk15on to 1.68 (#2422)

b5d62161501 Windows Secp Update &amp; fix for parsing Windows paths (#2398)

8ed30e72a8c 2020 12 20 root dependson (#2404)

bc6561465e0 Update scala-collection-compat to 2.3.2 (#2401)

bb4a2667d14 2020 12 19 enable test compileropts (#2400)

719ccbe9326 PoC: Attempt to enable parallel execution on CI now that we have github ac… (#2396)

0f037f3fb9d Remove autoScalaLibrary := false, this was not being used correctly and now is hindering builds on intellij (#2397)

0f56ab2113e Update scodec-bits to 1.1.23 (#2391)

307ba23d0d1 Update sbt-native-packager to 1.8.0 (#2382)

a080fc6730c Update scalacheck to 1.15.2 (#2378)

44d54ff5a52 Update sbt-mdoc to 2.2.14 (#2383)

ac374780c14 Ignore DLCPayoutCurveTest until issue 2369 is resolved (#2388)

c43e78adf3f Move CI into indiviual workflows (#2353)

35025f9843e Setup Github Actions (#2319)

4bfcaa22353 docs: Fix dependabot warning for highlight.js (#2328)

e6d8a02e42f docs: Replace Large Range with Digit Decomp (#2331)

a1862cb6489 Bump sbt to 1.4.5 (#2358)

696dce912d4 Bump ini from 1.3.5 to 1.3.7 in /website (#2349)

f3ce3619b04 Update scalafx to 15.0.1-R20 (#2348)

1e7e8473a30 Update sqlite-jdbc to 3.34.0 (#2347)

afeb992ca66 Update sqlite-jdbc to 3.32.3.3 (#2342)

cec0593929a Update scalamock to 5.1.0 (#2327)

92b7944e230 Bump scalac setting in secp256k1jni.sbt to scala 2.12.12 (#2317)

ebd917b363c Update sbt-bloop to 1.4.6 (#2316)

5927a2e2c2c Update sbt-ci-release to 1.5.5 (#2322)

fd08c98be09 Update javafx-base, javafx-controls, ... to 16-ea+5 (#2304)

f0d925fda17 Update scopt to 4.0.0 (#2298)

8836ed5e4fb Get Scala 2.13.4 compiling (#2294)

c5c7a423b29 Update scodec-bits to 1.1.22 (#2296)

b2fe48e9fbc Update sbt-mdoc to 2.2.13 (#2291)

d12c857441e Update scala-collection-compat to 2.3.1 (#2290)

9d842897f5b Update scala-collection-compat to 2.3.0 (#2285)

d0e3561bca9 Update sbt to 1.4.4 (#2288)

f22e1b6edb8 Update akka-http, akka-http-testkit to 10.1.13 (#2276)

76d4e36097d Update sbt to 1.4.3 (#2266)

ff9119e9757 Update spray-json to 1.3.6 (#2256)

ea232969068 Update sbt-mdoc to 2.2.12 (#2253)

35aae036f07 Update javafx-base, javafx-controls, ... to 16-ea+4 (#2249)

6538a14097b Update scalatest to 3.2.3 (#2250)

a6156cd2f3a Update scalacheck to 1.15.1 (#2243)

30cd7ed0b04 Update sbt-bloop to 1.4.5 (#2241)

497e33c1a39 Update scodec-bits to 1.1.21 (#2239)

3ba3ea61256 Update sbt-mdoc to 2.2.11 (#2238)

8a148357d56 2020 11 02 cleanup (#2233)

aca5e82bcd7 Exclude sbt keys that unused (are they really unused?) (#2194)

8346010027c trivial: Cache new modules for travis (#2190)

02eb3b8805a Update sbt-ci-release to 1.5.4 (#2235)

23a143d1950 Update bcprov-jdk15on to 1.67 (#2228)

8d379e39a0f Update sbt to 1.4.2 (#2232)

ac53a5ee637 Update javafx-base, javafx-controls, ... to 16-ea+3 (#2205)

c4970a3e3ec Update typesafe:config to 1.4.1 (#2212)

a679950ac52 Update sbt to 1.4.1 (#2202)

f75ca45e50e Update sbt-mdoc to 2.2.10 (#2199)

bc36519c06b Update postgresql to 42.2.18 (#2195)

77892490782 Update sbt to 1.4.0 (#2119)

b0b1f41ba01 Update akka-actor, akka-slf4j, akka-stream, ... to 2.6.10 (#2166)

708b160260b Update postgresql to 42.2.17 (#2168)

898a9df1dcc Update sbt-native-packager to 1.7.6 (#2172)

14cfa06a4bc Add -Xcheckinit copmiler flag to tests to try and find uninitialized vals (#2165)

c4bb3ac1218 Conslidate DLC tests into existing CI rows rather than having unique … (#2152)

6267512c4da Make ZMQ Listeners typed (#2144)

6ce7d3d7019 Upgrade to scalac 2.13.3 (#2115)

679691be27f Add signet db settings (#2068)

2abe5dff250 Update javafx-base, javafx-controls, ... to 16-ea+2 (#2038)

c2bf6dc4315 Update akka-actor, akka-slf4j, akka-stream, ... to 2.6.9 (#1993)
</summary>
    <title>bitcoin-s/bitcoin-s: v0.5.0</title>
    <updated>2021-02-04T19:04:36Z</updated>
    <dc:date>2021-02-04T19:04:36Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.12.1-beta.rc1</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.12.1-beta.rc1"/>
    <summary># Database Migrations

There are no database migrations in v0.12.1-beta.rc1.

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/bitconner/pgp_keys.asc | gpg --import
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-bitconner-v0.12.1-beta.rc1.txt.asc` is in the current directory) with:

```
gpg --verify manifest-bitconner-v0.12.1-beta.rc1.txt.asc
```

You should see the following if the verification was successful:

```
gpg: Signature made Wed Feb  3 22:51:31 2021 PST
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Timestamp 

From this new version onwards, in addition time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: ` manifest-roasbeef-v0.12.1-beta.rc1.txt.asc.ots`.

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-roasbeef-v0.12.1-beta.rc1.txt.asc.ots -f manifest-roasbeef-v0.12.1-beta.rc1.txt.asc
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved.
The release binaries are compiled with `go1.15.7`, which is required by verifiers to arrive at the same ones.
They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.12.1-beta.rc1
gpg: Signature made Wed Feb  3 22:09:02 2021 PST
gpg:                using RSA key 9C8D61868A7C492003B2744EE7D737B67FA592C7
gpg: Good signature from &quot;Conner Fromknecht &lt;conner@lightning.engineering&gt;&quot; [ultimate]
```

## Verifying the Docker Images

To verify the `lnd` and `lncli` binaries inside the docker images against the signed, reproducible release binaries, there is a verification script in the image that can be called (before starting the container for example):

```shell
$ docker pull lightninglabs/lnd:v0.12.1-beta.rc1
$ docker run --rm --entrypoint=&quot;&quot; lightninglabs/lnd:v0.12.1-beta.rc1 /verify-install.sh
$ OK=$?
$ if [ &quot;$OK&quot; -ne &quot;0&quot; ]; then echo &quot;Verification failed!&quot;; exit 1; done
$ docker run lightninglabs/lnd [command-line options]
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming
that `vendor.tar.gz` and `lnd-source-v0.12.1-beta.rc1.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.12.1-beta.rc1.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.1-beta.rc1&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.1-beta.rc1&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## Spec Compatibility

 - 0.12.1-beta.rc1 fixes a [recently discovered edge-case in the spec](https://github.com/lightningnetwork/lightning-rfc/issues/794) surrounding retransmission of `RevokeAndAck` and `CommitSig` that can lead to channel force closures if they are not retransmitted in the same order upon reconnection. This version now [persists this extra state required to determine the correct transmission order](https://github.com/lightningnetwork/lnd/pull/4915), [in accordance with the new spec requirements](https://github.com/lightningnetwork/lightning-rfc/pull/810). This eliminates a potential vector for channel desynchronization on restart once both sides of the channel have updated and a successful state transition is performed.
 - Prior to this version, `lnd` may have incorrectly attempted an MPP payment even if the receiver's `NodeAnnouncement` or invoice did not set the MPP feature bit. This was caused by a bug that incorrectly assumed support for `payment_secrets` implied support for MPP. A fix has been applied that [limits the maximum number of splits to 1 when the receiver doesn't support MPP](https://github.com/lightningnetwork/lnd/pull/4924).

## Pinned Gossip Syncers

Typically `lnd` performs this historical channel reconciliation periodically, rotating between the set of all active peers, and attempting to keep `numgraphsyncpeers` (defaults to 3) in a state where they are receiving new gossip messages. Due to the eventually consistent properties of this algorithm (and the gossip protocol in general), there are some cases that lead to long delays in a node receiving newer updates. Notably, if a node has many peers, then it may be a while before the sync rotation algorithm queries a given peer for newer updates.

To provide more control, a new configuration option has been added allowing users to _pin_ their nodes into an ActiveSync with particular nodes. Each time a connection is established with a pinned syncer, `lnd` will first perform a historical channel reconciliation, followed by a request for the pinned syncer to forward all new gossip messages. Doing so allows users to keep their routing table tightly synchronized with nodes in their list of configured, pinned syncers. Users can add one or more pinned syncers via:
```
gossip.pinned-syncers=&lt;pubkey1&gt;
gossip.pinned-syncers=&lt;pubkey2&gt;
```
This can be especially useful for services that run multiple, well-connected `lnd` nodes, and want their own nodes to maintain similar views of the channel graph.

## RPC Changes
 - `lnd` 0.12.1-beta.rc1 now [exposes the HTLC `attempt_id` on response from `TrackPayment`](https://github.com/lightningnetwork/lnd/pull/4956). Internally, `lnd` uses `attempt_id` as a unique identifier for each HTLC it sends out, and to provide a total ordering on all HTLC sent by the daemon.  This identifier can be used by developers to better reflect progress of a payment, making it easier to extract per-HTLC state deltas rather than displaying the full payment state every time.

## Build / verification
 - Some of the GitHub Action scripts [were replaced by vendored scripts](https://github.com/lightningnetwork/lnd/pull/4952) to prevent secret extraction through malicious code.
 - The signature verification script [was fixed to no longer fail if a public key of a signature is missing](https://github.com/lightningnetwork/lnd/pull/4963) and [more signing public keys were added](https://github.com/lightningnetwork/lnd/pull/4962).
 - The build process was [enhanced with a `make imports`](https://github.com/lightningnetwork/lnd/pull/2162) command that organizes all golang import statements.
 - The protobuf definitions are now compiled [using docker](https://github.com/lightningnetwork/lnd/pull/4911) to avoid needing to install a set of binaries and libraries with exact pinned versions. The instructions on how to [format the proto files with MacOS](https://github.com/lightningnetwork/lnd/pull/4944) were added as well.
 - The [golang version `1.15.7`](https://github.com/lightningnetwork/lnd/pull/4961) is now used for compilation across all build processes.

## Bug Fixes
 - Fixes a bug that can result in a [panic when generating hodl invoices for private channels](https://github.com/lightningnetwork/lnd/pull/4978).
 - Squashes a bug that results in a [startup error when the daemon exits while in the middle of processing graph updates for its own channels](https://github.com/lightningnetwork/lnd/pull/4958).
 - The development docker files were [fixed by adding an extra listener](https://github.com/lightningnetwork/lnd/pull/4938) to make sure the beginner tutorial can be followed without running into errors.


## Full Changelog
 - #4958 - netann: ignore unknown channel update on startup
 - #4962 - scripts: add halseth key to verify script
 - #4938 - docker: add an extra listener for localhost
 - #4944 - docs: Add clang-format instructions for mac
 - #4956 - lnrpc: add htlc attempt id
 - #4952 - Github: use vendored actions for steps with sensitive info
 - #4963 - scripts: don't fail signature verification on missing public key
 - #2162 - Makefile: define `make imports`
 - #4911 - lnrpc/mobile: use docker to compile/format protos
 - #4974 - Fix typo in restorechanbackup command description
 - #4902 - lntest/channels: introduce subpackage to deduplicate structs
 - #4978 - invoices+rpc: add missing channel graph to the AddInvoiceConfig
 - #4934 - discovery: pinned syncers
 - #4924 - routerrpc,routing: limit max parts if the invoice doesn't declare MPP support
 - #4961 - build: update CI builds to use go 1.15.7
 - #4979 - routing: add new TestPaymentAddrOnlyNoSplit test case
 - #4915 - multi: store bool to determine retransmission ordering

# Contributors (Alphabetical Order)

András Bánki-Horváth
Conner Fromknecht
eugene
Jake Sylvestre
Johan T. Halseth
Joost Jager
Juan Pablo Civile
Olaoluwa Osuntokun
Oliver Gugger
Umar Bolatov
Vlad Stan</summary>
    <title>lightningnetwork/lnd: v0.12.1-beta.rc1</title>
    <updated>2021-02-04T08:23:19Z</updated>
    <dc:date>2021-02-04T08:23:19Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/mempool/mempool/releases/tag/v2.1.0</id>
    <link href="https://github.com/mempool/mempool/releases/tag/v2.1.0"/>
    <summary>Mempool v2.1.0 is a minor release that brings bug fixes and improvements.

&lt;img width=&quot;559&quot; alt=&quot;Screen Shot 2021-02-03 at 18 06 20&quot; src=&quot;https://user-images.githubusercontent.com/8561090/106738489-8e8ab480-664a-11eb-95dc-3ed8d0ec517b.png&quot;&gt;

* Implement workflow to publish [mempool on DockerHub](https://hub.docker.com/u/mempool). #67
* Add CoreRPC &quot;Minimum fee&quot; to the dashboard. #171
* Fix for occasional inability to change language to English. #275
* Fix for anguage dropdown select styling. #293
* Display a red RBF button when RBF is not enabled. #279
* Don't save disk cache on exit. Handle corrupted mempool disk cache. #304
* Fix for fee estimate not being correct when block is almost full. #278
* Bisq stats calculation fixed. #280
* Fix for sub networks not detected when using languages. #287
* Don't display fee rating when block medianFee is empty. #228
* Display P2PK inputs as &quot;P2PK&quot; instead of empty string.  #290
* Better identification of Lightning and Liquid scripts. #324
* Add new languages: Hungarian and Italian
* (Bitcoind) Return correct http status message when tx not found. #295
* (Bitcoind) Adding missing basic API endpoints. #291
* (Bitcoind) Parse witness scripts from P2SH transactions. #323
* (Electrum) Hide missing address received/sent from address page. #294
</summary>
    <title>mempool/mempool: v2.1.0</title>
    <updated>2021-02-04T06:17:59Z</updated>
    <dc:date>2021-02-04T06:17:59Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/phoenix/releases/tag/v1.4.6</id>
    <link href="https://github.com/ACINQ/phoenix/releases/tag/v1.4.6"/>
    <summary>## Display min amount for pay-to-open

The minimum amount that the wallet can receive is now displayed when the wallet does not have any channels. It is also displayed for swap-ins. This minimum amount prevents creating new channels for very small amounts.

## Complete list of changes

- **app**: https://github.com/ACINQ/phoenix/compare/v1.4.5...v1.4.6
- **core**: https://github.com/ACINQ/eclair/compare/v0.4.7-android-phoenix...v0.4.8-android-phoenix

Thanks @bitcoinuser for updating the Portuguese-Brazilian translation.

## Verifying signatures

You will need `gpg` and our release signing key E434ED292E85643A. Note that you can get it:
- from our website: https://acinq.co/pgp/padioupm.asc
- from github user @pm47, a committer on eclair: https://api.github.com/users/pm47/gpg_keys

To import our signing key:
```
$ gpg --import padioupm.asc
```

To verify the release file checksums and signatures:
```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```</summary>
    <title>ACINQ/phoenix: v1.4.6</title>
    <updated>2021-02-02T16:40:13Z</updated>
    <dc:date>2021-02-02T16:40:13Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ACINQ/phoenix/releases/tag/v1.4.5</id>
    <link href="https://github.com/ACINQ/phoenix/releases/tag/v1.4.5"/>
    <summary>## Main changes

#### Closing logic is cooperative when we have nothing at stake

More information here: https://github.com/ACINQ/eclair/pull/1633

#### Add links to terms

A link to the [terms](https://phoenix.acinq.co/terms) (explaining how the wallet works and what can be expected) has been added to the about and initialization screens.

## Complete list of changes

- **app**: https://github.com/ACINQ/phoenix/compare/v1.4.4...v1.4.5
- **core**: https://github.com/ACINQ/eclair/compare/v0.4.6-android-phoenix...v0.4.7-android-phoenix

Thanks @bitcoinuser for updating the Portuguese-Brazilian translation.

## Verifying signatures

You will need `gpg` and our release signing key E434ED292E85643A. Note that you can get it:
- from our website: https://acinq.co/pgp/padioupm.asc
- from github user @pm47, a committer on eclair: https://api.github.com/users/pm47/gpg_keys

To import our signing key:
```
$ gpg --import padioupm.asc
```

To verify the release file checksums and signatures:
```
$ gpg -d SHA256SUMS.asc &gt; SHA256SUMS.stripped
$ sha256sum -c SHA256SUMS.stripped
```</summary>
    <title>ACINQ/phoenix: v1.4.5</title>
    <updated>2021-02-02T16:39:53Z</updated>
    <dc:date>2021-02-02T16:39:53Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bisq-network/bisq/releases/tag/v1.5.5</id>
    <link href="https://github.com/bisq-network/bisq/releases/tag/v1.5.5"/>
    <summary>**A newer version is already available! Please don’t use this version anymore.**

## Release notes

ATTENTION: This release changes the trade protocol. 

**DO NOT specify trade ID or any other value in the 'reason for payment' field.
LEAVE IT BLANK.** 

If it is mandatory for your payment service add a dash character ('-') or coordinate with your counterparty over trader chat to agree on a reason for payment.

This change reduces the chances that certain payment accounts get flagged. 
Please see https://github.com/bisq-network/bisq/issues/2869 for more details on this change.

This release introduces the option to create limit offers to be able to deactivate an offer if a certain price limit is reached. It also introduces cash-by-mail as a new payment method. In addition to multiple minor UI changes, we squashed lots of bugs and improved reliability and performance of the app across the board.

### DAO
- [Add CSV export to BSQ transaction view](https://github.com/bisq-network/bisq/pull/5054)
- [Move BSQ price in USD at first row](https://github.com/bisq-network/bisq/pull/4988)
- [Add indication of last GH CR issue](https://github.com/bisq-network/bisq/pull/5014)
- [Fix request amount bounds in ReimbursementValidator](https://github.com/bisq-network/bisq/pull/5077)

### UI
- [Add toggle for displaying volume in trade statistics chart in USD](https://github.com/bisq-network/bisq/pull/5066)
- [Add toggle for hiding not takable offers](https://github.com/bisq-network/bisq/pull/5048)
- [Add a 'payment method details' screen](https://github.com/bisq-network/bisq/pull/5052)
- [Improve trade fee display at create and take offer screens and popups](https://github.com/bisq-network/bisq/pull/4985)
- [Disable CPU-intensive animations](https://github.com/bisq-network/bisq/pull/5090)
- [Improve popup text in case a local node is detected](https://github.com/bisq-network/bisq/pull/4984)
- [Keep main navigation items left aligned](https://github.com/bisq-network/bisq/pull/5087)
- [Reword &quot;trade started&quot; popup messages per suggestion](https://github.com/bisq-network/bisq/pull/5091)
- [Update translations and fix a broken German translation](https://github.com/bisq-network/bisq/pull/5037)
- [Show stacktrace in error popup at view exceptions](https://github.com/bisq-network/bisq/pull/5011)
- [Fix missing apostrophe in Withdrawal view](https://github.com/bisq-network/bisq/pull/5015)
- [Remove redundant popup when cancelling an offer](https://github.com/bisq-network/bisq/pull/4987)

### Trading
- [Change rule for 'reason for payment' field to not use trade ID but leave it empty](https://github.com/bisq-network/bisq/pull/5080)
- [Deactivate open offer if trigger price is reached](https://github.com/bisq-network/bisq/pull/5001)
- [Add payment method &quot;Cash by mail&quot;](https://github.com/bisq-network/bisq/pull/5092)
- [Change trade period for TransferWise from 1 day to 4 days](https://github.com/bisq-network/bisq/pull/5016)
- [Add option to hide non supported payment methods](https://github.com/bisq-network/bisq/pull/5045)
- [Select show-all currencies if TransferWise is selected](https://github.com/bisq-network/bisq/pull/5042)

### Wallet
- [Show a confirmation of successfully sending BTC or BSQ from wallet](https://github.com/bisq-network/bisq/pull/5071)
- [Improve path text on wallet info screen](https://github.com/bisq-network/bisq/pull/4991)
- [Fix broken `-ignoreLocalBtcNode` startup option](https://github.com/bisq-network/bisq/pull/5094)

### Reliability
- [Persist and republish mailbox messages](https://github.com/bisq-network/bisq/pull/5072)
- [Request only non-seed nodes if no seed nodes are available](https://github.com/bisq-network/bisq/pull/5041)
- [Access concrete data stores](https://github.com/bisq-network/bisq/pull/5031)
- [Improve offer publishing](https://github.com/bisq-network/bisq/pull/4950)
- [Improve getBlocks request handling](https://github.com/bisq-network/bisq/pull/4851)
- [Improve CleanupMailboxMessages](https://github.com/bisq-network/bisq/pull/4975)
- [Fix premature disconnections from seeds](https://github.com/bisq-network/bisq/pull/5057)

### Mediation/Arbitration
- [Add mediators keybase usernames](https://github.com/bisq-network/bisq/pull/5004)

### Performance
- [Persist failed attempts of decrypting mailbox messages](https://github.com/bisq-network/bisq/pull/5061)
- [Cache signature verification results](https://github.com/bisq-network/bisq/pull/5047)
- [Cache results in account witness domain](https://github.com/bisq-network/bisq/pull/4953)

### Network
- [Add 4 old v2 seed nodes](https://github.com/bisq-network/bisq/pull/5078)
- [Add option to prevent periodic shutdown for seed nodes](https://github.com/bisq-network/bisq/pull/5039)
- [Add filter support on network level](https://github.com/bisq-network/bisq/pull/5038)
- [Improve cleanup tor dir at seeds](https://github.com/bisq-network/bisq/pull/5070)
- [Avoid resync from genesis in case of dao state issues](https://github.com/bisq-network/bisq/pull/4971)
- [Update inventory code](https://github.com/bisq-network/bisq/pull/5040)

### API
- [Add new api methods 'getmyoffers' and 'getmyoffer'](https://github.com/bisq-network/bisq/pull/5056)
- [Add new api method 'sendbtc'](https://github.com/bisq-network/bisq/pull/4922)
- [Add new api method 'gettransaction'](https://github.com/bisq-network/bisq/pull/4948)
- [Add optional txFeeRate parameter to api 'sendbsq'](https://github.com/bisq-network/bisq/pull/4900)
- [Support tx memo field for btc withdrawals from api](https://github.com/bisq-network/bisq/pull/4925)
- [Add protection tools](https://github.com/bisq-network/bisq/pull/5053)
- [Integrate new protection tools into api's offer &amp; trade services](https://github.com/bisq-network/bisq/pull/5065)
- [Prevent excessive api calls](https://github.com/bisq-network/bisq/pull/4966)
- [Use posix-style CLI opts, provide method help](https://github.com/bisq-network/bisq/pull/5081)
- [Add api trade simulation scripts](https://github.com/bisq-network/bisq/pull/5093)
- [Pass hash to bitcoind blocknotify script](https://github.com/bisq-network/bisq/pull/4996)
- [Stub out support for OpenOffer's triggerPrice in api](https://github.com/bisq-network/bisq/pull/5076)
- [Use Bisq's UserThread.executor in gRPC server](https://github.com/bisq-network/bisq/pull/4936)

### Development
- [Remove awt dependencies except for webcam library](https://github.com/bisq-network/bisq/pull/5008)
- [Update installation script](https://github.com/bisq-network/bisq/pull/4893)

### Assets
No new assets.

## Verification

Url of the signing key (Christoph Atteneder): https://bisq.network/pubkey/29CDFD3B.asc
Full fingerprint: `CB36 D7D2 EBB2 E35D 9B75  500B CD5D C1C5 29CD FD3B`

Import the key:
`curl https://bisq.network/pubkey/29CDFD3B.asc | gpg --import`
GPG prints a confusion warning: &quot;This key is not certified with a trusted signature!&quot; - See https://serverfault.com/questions/569911/how-to-verify-an-imported-gpg-key for background information what it means.

How to verify signatures?
`gpg --digest-algo SHA256 --verify BINARY{.asc*,}`
Replace BINARY with the file you downloaded (e.g. Bisq-1.5.5.dmg)

Verify jar file inside binary:
You can verify on OSX the jar file with:
`shasum -a256 [PATH TO BISQ APP]/Bisq.app/Contents/Java/Bisq-1.5.5.jar`
The output need to match the value from the Bisq-1.5.5.jar.txt file.


## Known issues with installation 

### macOS Catalina:

&gt; Bisq can't be opened because Apple cannot check it for malicious software

This happens the first time Bisq is run on macOS Catalina. It is because a new security feature in Catalina has newer requirements of how apps are packaged. We are working on ways to address this (see #3402 and #4196 for details).

Workaround: Right click on the installed Bisq app &gt; Click `Open` (warning popup shown again, but with new button available) &gt; Click `Open`

&gt; Bisq would like to receive keystrokes from any application.

Discussed in issue https://github.com/bisq-network/bisq/issues/3373, you will see a permission request in the latest macOS version that Bisq wants to receive keystrokes from any application. Unfortunately that is an issue for all Java applications that are run on Catalina right now. We are investigating already how to solve this issue and will fix in one of our next updates.

### Windows:

There is a known issue with Anti Virus software. We got several reports from users running into different problems. Either the AV software blocks Bisq or Tor, delete files in the data directory [2] or app directory [1]) or cause such a long delay at startup that Tor gets terminated and a file remains locked which can cause that Bisq cannot be started afterwards. To resolve that you need to restart Windows then the lock get released. We are working on solutions to fix those issues.

If you use Crypto currencies on your Windows system be aware that Windows is much more vulnerable to malware than Linux or OSX. Consider to use a dedicated non-Windows system when dealing with cryptocurrencies.

[1] Application directory (contains application installation files):
C:\Users\&lt;username&gt;\AppData\Local\Bisq

[2] Data directory (contains all Bisq data including wallet):
C:\Users\&lt;username&gt;\AppData\Roaming\Bisq\btc_mainnet\tor (you can delete everything except the hiddenservice directory)


### Linux:

Hint for Debian users:
If you have problems starting Bisq on Debian use: `/opt/Bisq/Bisq`

If your Linux distro does not support .deb files please follow this instruction:
```
cd ~/Downloads  
mkdir tmp  
cd tmp   
ar x ../Bisq-64bit-1.5.5.deb  
sudo tar Jxvf data.tar.xz  
sudo cp -rp opt/Bisq /opt/
```
That instruction is not tested on many different distros. If you encounter problems please report it in a Github issue so we can improve it. 

## Credits

Thanks to everyone who directly contributed to this release:

- @chimp1984
- @ripcurlx 
- @ghubstan
- @jakub_cz
- @jmacxx 
- @m52go 
- @sqrrm 
- @stejbac

A special thanks to our first time contributors:

- @81dr: [Update installation script](https://github.com/bisq-network/bisq/pull/4893)

As well as to everyone that helped with translations on [Transifex](https://transifex.com/bisq/bisq-desktop).</summary>
    <title>bisq-network/bisq: v1.5.5</title>
    <updated>2021-02-02T09:22:14Z</updated>
    <dc:date>2021-02-02T09:22:14Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/rsksmart/rskj/releases/tag/PAPYRUS-2.2.0</id>
    <link href="https://github.com/rsksmart/rskj/releases/tag/PAPYRUS-2.2.0"/>
    <summary>This release contains relevant improvements from community feedback. Thanks to all **RSK buidlers** for your contributions!

This is a summary of the changes included in this version:

- Add *Content-Type* field in JSON RPC responses (#1390)
- Consider minimum gas price in *eth_gasPrice* method (#1389)
- On-the-fly block blooms cache for faster events retrieval (#1384)
- Fix *v* value in JSON RPC transaction result (#1382)

You can find a complete list of the changes introduced in [Papyrus 2.2.0 milestone](https://github.com/rsksmart/rskj/milestone/23).

SHA256 (see [Reproducible Build](https://developers.rsk.co/rsk/node/security-chain/) guide for further details):
f7cb1e6c5568332d047c602a5b2c464c41688336b824d92ef3a40b89a8f55b60  rskj-core-2.2.0-PAPYRUS-all.jar</summary>
    <title>rsksmart/rskj: PAPYRUS-2.2.0</title>
    <updated>2021-02-01T22:19:58Z</updated>
    <dc:date>2021-02-01T22:19:58Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.1.0</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.1.0"/>
    <summary># Binaries

There are two types of binaries:

## Specter Desktop
It's a windowed GUI application with Specter server included.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.1.0/Specter-Setup-v1.1.0.exe), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.1.0/SpecterDesktop-v1.1.0.dmg), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.1.0/specter_desktop-v1.1.0-x86_64-linux-gnu.tar.gz)

**Note on Linux**: you need to set up udev rules (included in the archive). Check out [readme](https://github.com/cryptoadvance/specter-desktop/blob/master/udev/README.md#usage).

**Note on macOS**: The current build supports only macOS Catalina (10.15) or higher. If you'd like to run Specter on an older macOS version, you can [install Specter from Pip](https://github.com/cryptoadvance/specter-desktop#installing-specter-from-pip).

## specterd
It's a command-line program that only runs Specter server.
Supported platforms: [Windows](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.1.0/specterd-v1.1.0-win64.zip), [MacOS](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.1.0/specterd-v1.1.0-osx.zip), [Linux (x86_64)](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.1.0/specterd-v1.1.0-x86_64-linux-gnu.zip)

# Signatures and hashes
[sha256.signed.txt](https://github.com/cryptoadvance/specter-desktop/releases/download/v1.1.0/sha256.signed.txt) file contains sha256 hashes of all binary files and signed with @stepansnigirev's GPG key.
You can get the public key from here: [https://stepansnigirev.com/ss-specter-release.asc](https://stepansnigirev.com/ss-specter-release.asc).
It is also available via [keys.gnupg.net](http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x36ED357AB24B915F) or [keys.openpgp.org](https://keys.openpgp.org/vks/v1/by-fingerprint/6F16E354F83393D6E52EC25F36ED357AB24B915F).
Fingerprint of the key is `6F16 E354 F833 93D6 E52E  C25F 36ED 357A B24B 915F`, short id: `36ed357ab24b915f`

# Release notes
- Bugfix: #784 URL encode to prevent breaking characters on RPC connection #866 (Maxi Dev)
- Bugfix:  #829 - font size and horizontal alignment #900 (Patrick)
- Bugfix: Check whether tx address contains list before enumerating it #855 (Ondrej Calda)
- Bugfix: Fix #605 - Display UI notification after btc core connection test #912 (Patrick)
- Bugfix: Fix key purpose labeling being overwritten #887 (benk10)
- Bugfix: Fix no block height with Bitcoin Core v0.19 #859 (benk10)
- Bugfix: Fix tx info showing wrong input address #865 (benk10)
- Bugfix: ugly fix utxo blockexplorer rescan #897 (Stepan Snigirev)
- Bugfix: Util testing  and small bugfix about multisig treshold  #698 (Manolis)
- Chore: Bump electron from 10.1.3 to 10.2.0 in /pyinstaller/electron #916 (dependabot[bot])
- Devops: Added PyCharm IDE configuration + fixed DEVELOPMENT.md title level hierachy (incl. TOC) #892 (paeet)
- devops: Fixed deprecation warnings #894 (Patrick)
- Devops: Specify that hwi is not compatible with Python 3.9 #883 (Franck Royer)
- Docs: Add existing file #846 (bitballin)
- Docs: Add more info to connect Desktop via TOR #847 (Ramon Tayag)
- Docs: add multisig tradeoffs note and doc #885 (djpnewton)
- Docs: add notes about built in authentication methods #871 (djpnewton)
- Docs: Removing high level consulting request #901 (Callum Macdonald)
- Docs: Update connect-your-node.md #893 (fatrattombala)
- Feature: Add addresses tab allowing users to navigate through derived addresses #781 (jleo84)
- Feature: Added persistent tor setting. #848 (Raj)
- Feature: add rate limiting and registration link expiry #852 (djpnewton)
- Feature: address-tab pagination, sorting and exporting to CSV #873 (jleo84)
- Feature: Auth improvements #860 (benk10)
- Feature: Get whitepaper via timechain #905 (Manolis)
- Feature: improve hints for not working connections #888 (Kim Neunert)
- Feature: Replace address list on receive tab with addresses tab #914 (benk10)
- Feature: SLIP-132 switch for PDF backup key format #849 (Maxi Dev)
- Feature: Support Cobo single key files #915 (benk10)
- UIUX: Add target=&quot;_blank&quot; for help links #911 (benk10)
- UIUX: fixed typos in wallet_receive.jinja and wallet_settings.jinja #853 (Zach Zager)
- UIUX: Fixes - TX table toolbar alignment, Network label alignment #899 (Patrick)
- UIUX: Fix typo (puropse -&gt; purpose) #898 (Stacie)
- UIUX: Fix Typos #879 (Franck Royer)
- UIUX: Keep slashes and parentheses in tx labels #861 (Ondrej Calda)
- UIUX: Make `Add Keys` more obvious #884 (Franck Royer)</summary>
    <title>cryptoadvance/specter-desktop: v1.1.0</title>
    <updated>2021-01-30T14:59:17Z</updated>
    <dc:date>2021-01-30T14:59:17Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.1.0-pre2</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.1.0-pre2"/>
    <summary></summary>
    <title>cryptoadvance/specter-desktop: v1.1.0-pre2</title>
    <updated>2021-01-30T12:21:55Z</updated>
    <dc:date>2021-01-30T12:21:55Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.1.0-pre1</id>
    <link href="https://github.com/cryptoadvance/specter-desktop/releases/tag/v1.1.0-pre1"/>
    <summary></summary>
    <title>cryptoadvance/specter-desktop: v1.1.0-pre1</title>
    <updated>2021-01-30T11:53:21Z</updated>
    <dc:date>2021-01-30T11:53:21Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.8</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.8"/>
    <summary>This release is trying some improvement to decrease the chances of being falsy flagged by Google Safe Browsing.

* Remove Tor URL from login page (useless now thanks to the url bar link) @dennisreimann
* Remove allowtransparency from checkout overlay @dennisreimann
* Remove clipboard code from the login page (was used to copy the tor url) @dennisreimann
* Rename some pages from PascalCase to lowercase. (Register =&gt; register, Login =&gt; login) @dennisreimann</summary>
    <title>btcpayserver/btcpayserver: v1.0.6.8</title>
    <updated>2021-01-29T09:55:09Z</updated>
    <dc:date>2021-01-29T09:55:09Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bwt-dev/bwt/releases/tag/v0.2.2</id>
    <link href="https://github.com/bwt-dev/bwt/releases/tag/v0.2.2"/>
    <summary>### Changelog

- [Authentication support](doc/auth.md) for the Electrum and HTTP API servers (#70)

- Compatibility with Bitcoin Core v0.21 (#78)

- Support for Signet

- New `GET /bitcoin.pdf` HTTP API endpoint for extracting the Bitcoin whitepaper from the block chain
  (https://twitter.com/shesek/status/1352368296553836544)

- New `--create-wallet-if-missing` option to ease the creation of a designated bitcoind wallet (#76)

- Docker: Multi-arch images for amd64, arm32v7 and arm64v8 (#79)

- Indexer: Fix detection of conflicted mempool transactions

- Support setting boolean options using environment variables
  (`FORCE_RESCAN`, `CREATE_WALLET_IF_MISSING`, `ELECTRUM_SKIP_MERKLE`, `NO_STARTUP_BANNER` and `VERBOSE`)

- Accept wildcard envirnoment variables for options that accept multiple values
  (`XPUB_*`, `DESC_*`/`DESCRIPTOR_*` and `ADDRESS_*`)

- Upgrade to rust-bitcoin v0.26.0, rust-miniscript v5.0.1 and bitcoincore-rpc v0.13.0


------------

Also see the v0.2.2 releases for [bwt-electrum-plugin](https://github.com/bwt-dev/bwt-electrum-plugin/releases/tag/v0.2.2), [libbwt](https://github.com/bwt-dev/libbwt/releases/tag/v0.2.2), [libbwt-nodejs](https://github.com/bwt-dev/libbwt-nodejs/releases/tag/v0.2.2) and [libbwt-jni](https://github.com/bwt-dev/libbwt-jni/releases/tag/v0.2.2).

### Installation

Installation instructions are [available on the README](https://github.com/bwt-dev/bwt#installation).

### Verifying signatures

The releases are signed by Nadav Ivgi (@shesek). The public key can be verified on the [PGP WoT](http://keys.gnupg.net/pks/lookup?op=vindex&amp;fingerprint=on&amp;search=0x81F6104CD0F150FC), [github](https://api.github.com/users/shesek/gpg_keys), [twitter](https://twitter.com/shesek), [keybase](https://keybase.io/nadav), [hacker news](https://news.ycombinator.com/user?id=nadaviv) and [this video presentation](https://youtu.be/SXJaN2T3M10?t=4).

```bash
# Download (change x86_64-linux to your platform)
$ wget https://github.com/bwt-dev/bwt/releases/download/v0.2.2/bwt-0.2.2-x86_64-linux.tar.gz

# Fetch public key
$ gpg --keyserver keyserver.ubuntu.com --recv-keys FCF19B67866562F08A43AAD681F6104CD0F150FC

# Verify signature
$ wget -qO - https://github.com/bwt-dev/bwt/releases/download/v0.2.2/SHA256SUMS.asc \
  | gpg --decrypt - | grep ' bwt-0.2.2-x86_64-linux.tar.gz$' | sha256sum -c -

$ tar zxvf bwt-0.2.2-x86_64-linux.tar.gz
$ ./bwt-0.1.5-x86_64-linux/bwt --xpub &lt;xpub&gt; ...
```

The signature verification should show `Good signature from &quot;Nadav Ivgi &lt;nadav@shesek.info&gt;&quot; ... Primary key fingerprint: FCF1 9B67 ...` and `bwt-0.2.2-x86_64-linux.tar.gz: OK`.

### Reproducible builds

The builds are fully reproducible.

You can verify the checksums against the v0.2.2 builds on Travis CI: https://travis-ci.org/github/bwt-dev/bwt/builds/756663238

See [more details here](https://github.com/bwt-dev/bwt#reproducible-builds).</summary>
    <title>bwt-dev/bwt: v0.2.2</title>
    <updated>2021-01-29T02:18:21Z</updated>
    <dc:date>2021-01-29T02:18:21Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta"/>
    <summary>This release marks the first major release in the `v0.12.x` series! As this is a major release several new features are included in this release including: anchor commitment types are now the default, anchor commitment support for watchtowers, new arguments to auto compact the database as well as drop the `wtxmgr` state, generic wallet PSBT crafting+signing, and much more! As usual, this release contains several important bug fixes, so we recommend all users update. 

# Database Migrations
A migration to initialize a top-level peers bucket is included in this release. The bucket is used to track flap counts for peers that we have channels open with across restarts. These values are used to rate-limit the amount of memory that `lnd` uses to track peers online state, ensuring that we do not store large volumes of uptime information for peers that are constantly changing online state.

This release contains a migration to initialize a top-level-bucket for an outpoint index. There is also a subsequent migration that populates this index with an outpoint's status. This will cut down on expensive `bbolt` transactions throughout the codebase. The migration process should look something like this upon initial start up:
```
2020-12-21 10:45:07.256 [INF] LTND: Version: 0.12.0-beta commit=v0.12.0-beta, build=production, logging=default
2020-12-21 10:45:07.257 [INF] LTND: Active chain: Bitcoin (network=mainnet)
2020-12-21 10:45:07.257 [INF] LTND: Opening the main database, this might take a few minutes...
2020-12-21 10:45:07.257 [INF] LTND: Opening bbolt database, sync_freelist=false, auto_compact=false
2020-12-21 10:45:07.304 [INF] CHDB: Checking for schema update: latest_version=20, db_version=17
2020-12-21 10:45:07.304 [INF] CHDB: Performing database schema migration
2020-12-21 10:45:07.304 [INF] CHDB: Applying migration #18
2020-12-21 10:45:07.304 [INF] CHDB: Creating top-level bucket: &quot;peers-bucket&quot; ...
2020-12-21 10:45:07.305 [INF] CHDB: Created top-level bucket: &quot;peers-bucket&quot;
2020-12-21 10:45:07.305 [INF] CHDB: Applying migration #19
2020-12-21 10:45:07.305 [INF] CHDB: Creating top-level bucket: &quot;outpoint-bucket&quot; ...
2020-12-21 10:45:07.305 [INF] CHDB: Created top-level bucket: &quot;outpoint-bucket&quot;
2020-12-21 10:45:07.305 [INF] CHDB: Applying migration #20
2020-12-21 10:45:07.324 [INF] LTND: Database now open (time_to_open=67.71764ms)!
```
# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/bitconner/pgp_keys.asc | gpg --import
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-roasbeef-v0.12.0-beta.txt.asc` is in the current directory) with:

```
gpg --verify manifest-roasbeef-v0.12.0-beta.txt.asc
```

You should see the following if the verification was successful:

```
gpg: Signature made Tue Jan 26 23:22:18 2021 PST
gpg:                using RSA key 60A1FA7DA5BFF08BDCBBE7903BBD59E99B280306
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Timestamp 

From this new version onwards, in addition time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: ` manifest-roasbeef-v0.12.0-beta.txt.asc.ots`.

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-roasbeef-v0.12.0-beta.txt.asc.ots -f manifest-roasbeef-v0.12.0-beta.txt.asc
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved.
The release binaries are compiled with `go1.15.7`, which is required by verifiers to arrive at the same ones.
They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.12.0-beta
gpg: Signature made Wed 27 Jan 2021 02:29:33 AM UTC using RSA key ID 9B280306
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot;
Primary key fingerprint: E4D8 5299 674B 2D31 FAA1  892E 372C BD76 33C6 1696
     Subkey fingerprint: 60A1 FA7D A5BF F08B DCBB  E790 3BBD 59E9 9B28 0306
```

## Verifying the Docker Images

To verify the `lnd` and `lncli` binaries inside the docker images against the signed, reproducible release binaries, there is a verification script in the image that can be called (before starting the container for example):

```shell
$ docker pull lightninglabs/lnd:v0.12.0-beta
$ docker run --rm --entrypoint=&quot;&quot; lightninglabs/lnd:v0.12.0-beta /verify-install.sh
$ OK=$?
$ if [ &quot;$OK&quot; -ne &quot;0&quot; ]; then echo &quot;Verification failed!&quot;; exit 1; done
$ docker run lightninglabs/lnd [command-line options]
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming
that `vendor.tar.gz` and `lnd-source-v0.12.0-beta.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.12.0-beta.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.0-beta&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.0-beta&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## New Default Autopilot Heuristic

[In this version of `lnd`, the default heursitic for autopilot has been changed from preferential attachment, to a version that will attempt to optimize for the betweeness centrality of the node](https://github.com/lightningnetwork/lnd/pull/4668). At a high level, this change means that rather than trying to connect (stochastically) to the nodes that have the _most_ channels, `lnd` will instead attempt to connect to the nodes that [appear most often in the shortest paths within the network](https://en.wikipedia.org/wiki/Betweenness_centrality). This change will serve to step as a stepping stone to further diffuse the graph to make it more resilient. 

## Pathfinding Improvements 

[`lnd` will now properly penalize attempts of larger &quot;wumbo&quot; sized payments proportionally](https://github.com/lightningnetwork/lnd/pull/4602). This will serve to ensure that clients with less active failure information are able to properly prune the search space by increasing the _attempt_ cost for larger payments. New flags has been added to allow users to configure the attempt cost for this value (`attemptcost` and `attemptcostppm`). We encourage users taht frequently send larger payments to tweak these parameters to find what works best, and ideally communicate this information back to the maintainers of `lnd` so we can better tune the current default value. 

## Graph Download Optimizations 

[`lnd` will now _batch_ all insertion operations related to channel graph which should _greatly_ speed up initial graph download](https://github.com/lightningnetwork/lnd/pull/3367). Initial becnhmarks show this change resluting in a 3x speed increase, with further gains likely being seen on mobile and more constrained platforms. 

## Peer to Peer Updates 

[A new flag has been added to `lnd` to enforce a _global_ connection timeout when trying to connect out to new peers](https://github.com/lightningnetwork/lnd/pull/4452). Setting a lower value for this new command line option (`timeout`) will mean that `lnd` will give up on unreachable peers much sooner than before, which can be useful when attempting to connect to a set of addresses to open channel to a peer. 


## Automatic Database Compaction

The most important data of any `lnd` node is stored in its channel database (`channel.db`). The database library currently used for this DB is `bbolt` which by design does not give back free space to the file system, even if data is deleted from the DB. This can lead to large DB files and slow startup times. Compaction is the process of creating a fresh copy of a `bbolt` database that only contains data and no &quot;reserved free space&quot;. This process also de-fragments and validates the integrity of the data.

[Automatic compaction of the `channel.db` can now be turned on](https://github.com/lightningnetwork/lnd/pull/4667) with the flag `--db.bolt.auto-compact`. By default this will compact on startup, if the last compaction was more than a week ago. The flag `--db.bolt.auto-compact-min-age` can also be set to `0` to force compaction on every startup, independent of how long ago it happened last.


## Protocol Upgrades

### Anchor Output Channels
`lnd` will now open the new channel type dubbed &quot;anchor channels&quot; by default if both peers support it. You signal support by setting the `--protocol.anchors` flag at `lnd` startup. This is a channel type that has been available to advanced users [since lnd v0.10](https://github.com/lightningnetwork/lnd/releases/tag/v0.10.0-beta), but it has seen a few updates that makes it [even safer](https://github.com/lightningnetwork/lnd/pull/4840) and useful in high fee scenarios, and it is now in line with [a proposed BOLT change](https://github.com/lightningnetwork/lightning-rfc/pull/824).

The anchor channel type is a new type of channel that is much safer in high fee scenarios, as it allows bumping the fees after the channel has been force closed, instead of making the peers agreeing on a future close fee. This is also a nice UX improvement, as less of the channel capacity needs to go towards the commitment fee reserve, and can instead be used for payments. In addition it allows [bundling multiple HTLC transactions](https://github.com/lightningnetwork/lnd/pull/4779) together into one, potentially saving on chain fees in force close scenarios.

The commitment transaction still needs to be signed up front with a fee that ensures its mempool acceptance, and this [fee now defaults](https://github.com/lightningnetwork/lnd/pull/4855) to 10 sat/vbyte. This can be tuned by the `--max-commit-fee-rate-anchors` flag, but this should be used with caution. 

Note that one has to have on-chain funds available in the wallet for fee bumping channel closes for anchor channels. Because of this, a small portion of the wallet balance will be reserved for this purpose, and some on-chain actions that used to be allowed can now be rejected if you have anchor channels open.

### Static Remote Key Feature Bit Required

[This new version of `lnd` now requires channels that use a static remote key, AKA &quot;tweakless commitments&quot;](https://github.com/lightningnetwork/lnd/pull/4751). This change improves safety and security for users as now when a channel is force closed by the remote party, the funds will go directly to a user control key. Prior versions of  `lnd` have supported this channel type, but `lnd` will now **only** allow this type of channel when making channels with new peer.

Lnd will [waive this requirement](https://github.com/lightningnetwork/lnd/pull/4847) in the case where it still has legacy channels with a peer. This ensures that lnd can still connect to nodes it has existing channels with, even if they do not understand the feature bit. 

### Improved End to End Payment Security 

The MPP protocol upgrade included a so called &quot;payment address&quot; that improves end-to-end payment security by requiring the sender to include a special nonce in the onion payload specify by the receiver. As intermediate nodes can't guess this secret ahead of time, and it's encrypted in the onion only to the finally receiver, they thwarts a large class of probing and de-anonymization attacks. [This new release of `lnd` will now _require_ this feature bit set in any new invoices it creates](https://github.com/lightningnetwork/lnd/pull/4752), which means all payments that don't include this new payment secret will be rejected. 


## PSBT Signing

The internal wallet can now [create and sign PSBTs](https://github.com/lightningnetwork/lnd/pull/4389). In combination with the `ListUnspent` RPC this allows RPC users to implement full coin control.
This feature also takes us one step closer to the goal of supporting watch-only on-chain wallets in `lnd` where an online node would only have public keys to track the UTXOs and would delegate the signing to a non-networked `lnd` node that has the private keys, all through using PSBTs.
Read more about the possible use cases and dive into the examples [in our PSBT documentation](https://github.com/lightningnetwork/lnd/blob/master/docs/psbt.md).

## Build System

Leveraging the power of GitHub Workflows, we now [automatically build and push docker images](https://github.com/lightningnetwork/lnd/pull/4769) of all our releases [to Docker Hub](https://hub.docker.com/u/lightninglabs). This includes images for `amd64` and [`arm64`](https://github.com/lightningnetwork/lnd/pull/4852).

The distinction between the production `Dockerfile` and the development `dev.Dockerfile` [were made more clear in the documentation](https://github.com/lightningnetwork/lnd/pull/4790).

The release binaries for all OS/architectures are now [also built by a GitHub Workflow](https://github.com/lightningnetwork/lnd/pull/4777). The deterministic build system introduced in a previous release allows us to independently build and sign the binaries locally. Signatures of more than just one developer will be added to releases in the future.

The experiential build tag has been [removed](https://github.com/lightningnetwork/lnd/pull/4701) for the `assumechanvalid` flag that is used to prevent long rescans for neutrino nodes.

## Continuous Integration

Our continuous integration pipeline, most notably our integration tests, has received a number of improvements and bug fixes making them considerably faster and somewhat more stable:
- An integration test suite running [against a `bitcoind` with the TX index disabled](https://github.com/lightningnetwork/lnd/pull/4617) was added.
- The ~70 integration tests are now [split into 4 parts and run in parallel](https://github.com/lightningnetwork/lnd/pull/4655) reducing the execution time by ~50%.
- Log files are only uploaded to termbin.com and file.io [for failed runs](https://github.com/lightningnetwork/lnd/pull/4623) and the `bitcoind` binaries are [extracted from a docker image instead of being downloaded](https://github.com/lightningnetwork/lnd/pull/4623), shaving off a few more minutes from the total itest execution time.
- The test harness for the `btcd` node used as the mining node [were improved to fix port collisions](https://github.com/lightningnetwork/lnd/pull/4765) which resulted in flaky tests.
- A check was added that [forces new command line flags to also be documented in the `sample-lnd.conf` file](https://github.com/lightningnetwork/lnd/pull/4626).
- A new make target [for itest flake hunting](https://github.com/lightningnetwork/lnd/pull/4756) was added.
- New make targets [for running fuzz tests](https://github.com/lightningnetwork/lnd/pull/4643) were added.
- Build tags were removed from the integration test files, [allowing the linter to check those as well](https://github.com/lightningnetwork/lnd/pull/4593).
- The `zpay32` package's `Decode` and `Encode` functions now have [corresponding fuzz tests](https://github.com/lightningnetwork/lnd/pull/4651) in the `fuzz` package.
- The `brontide` fuzz tests have been [fixed](https://github.com/lightningnetwork/lnd/pull/4640).
- Fuzz testing has been [optimized](https://github.com/lightningnetwork/lnd/pull/4682) to instruct `gofuzz` to always mutate the input.

## Contract Court Performance Improvements
Performance [improvements](https://github.com/lightningnetwork/lnd/pull/4697) were made to the contract court subsystem which is responsible for closing out channels on chain and taking on-chain actions required to fully resolve the channel. The number of database transactions required to start up the subsystem has been reduced from one per channel to a single transaction, which reduces startup time. Improvements to the way the subsystem consumes new blocks from its backing bitcoin node have also improved the memory footprint of the system. 

## Extended Health Checks 

[A new optional `healthcheck` has been added to insturct `lnd` to restart itself in order to _refresh_ an expired RPC TLS cert](https://github.com/lightningnetwork/lnd/pull/4792). This change is useful in containerized contexts such as k8s, where an auto restarting `lnd` is able to propagate any auth changes in a decoupled manner upon restart. 

## `htlcswitch` Enhancements 

Database contention has been [reduced](https://github.com/lightningnetwork/lnd/pull/4547) in the link by batching removal of forwarding packages. The removal timer has also been increased from 1 minute to 1 hour.

[A bug has been fixed in our non-strict forwarding randomization](https://github.com/lightningnetwork/lnd/pull/4659) to ensure we explicitly randomize our link selection rather than relying on the undefined ordering of map interation in the Go spec.

## Gossip Enhancements

During the development of this release, an increase in high disk usage was reported by several users throughout the network due to channel update spam. To minimize the effects to disks, `lnd` will now [rate limit channel updates in two ways](https://github.com/lightningnetwork/lnd/pull/4786). Keep-alive updates, those which only increase their timestamps to signal liveliness, are now limited to one per rebroadcast interval (current default of 24H). Non-keep-alive updates are now limited to one per block per direction.

As required by the specification, `lnd` now [enforces all channels for a block must fit within a single reply](https://github.com/lightningnetwork/lnd/pull/4804). It would previously not enforce this as it would allow an overlap of blocks across multiple replies, which could lead other implementations to send us a error due to the overlap and cause connect/disconnect cycles.

`lnd` will [no longer accept premature channel announcements/updates and wait for their maturity](https://github.com/lightningnetwork/lnd/pull/4895).

## Peer Flap Rate Tracking

An [update](https://github.com/lightningnetwork/lnd/pull/4440) to the channel fitness subsystem has introduced tracking of the number of times lnd is connected and disconnected from each of its peers. This information is surfaced in the output of the `ListPeers` API. 

The flap rate we have recorded for peers is also used to rate limit the amount of data lnd will store to track the peer’s uptime. If a peer has a high flap rate, lnd will reduce the amount of data it stores in memory, resulting in more aggregated uptime information. This change is intended to protect against constantly flapping peers, and will have little effect on peers that are consistently online with the occasional restart. To ensure that we do not permanently punish a peer for a period of instability long in the past, the flap rate we track for peers is exponentially cooled down over time. 

## RPC Enchancements &amp; Bug Fixes

### GetInfo `best_header_timestamp`

[The `best_header_timestamp` field included in the `GetInfo`'s RPC response will now be set to what the backend reports while it is syncing](https://github.com/lightningnetwork/lnd/pull/4703). This will restore the ability for higher-level applications to determine their sync progress.

### Watchtower Address Removal

[The last address of a registered watchtower can no longer be removed](https://github.com/lightningnetwork/lnd/pull/4746) to prevent a potential panic. 

### Uniform Unconfirmed Coin Selection for SendCoins+

[`lnd` now allows all RPC calls that craft and send transactions to spend unconfirmed coins](https://github.com/lightningnetwork/lnd/pull/4653). 

This change the following RPCs:

- `Lightning.SendCoins`
- `Lightning.SendMany`
- `WalletKit.SendOutputs`

We've added two new parameters for these methods, following the same format as used for `Lightning.OpenChannel` RPC:

- `min_confs` (default=1)
- `spend_unconfirmed` (default=false)


### Macaroon Root ID Key Rotation 

[`lnd` now supports _root ID_ key rotation](https://github.com/lightningnetwork/lnd/pull/4427). This allows the baker (creator) of a set of macaroons to _invalidate_ them all by deleting and regenerating the root key used to generate the macaroons. This feature is a useful security tool, as if an application/system that uses lnd's macaroons in a fine grained manner is compromised, the admin is able to _revoke_ all generated macaroons. 

Several new calls have been added to allow users to take advantage of this feature, namely:
  * The `lncli bakemacaroon` call now accepts a new parameter: `root_key_id`. This new field is an integer that can be used to rotate root ID keys. 
  * A new `lncli listmacaroonids` command has been added to allow callers to monitor all their existing allocated root IDs.
  * A new `lncli deletemacaroonid` call has been added which implements _macaroon revocation_ by allowing the caller to _delete_ a specified root key ID. 
 
 
### New Verbose Output for `ChannelBalance`

[The `lncli channebalance` call now returns much more information than before in order to give users more insight w.r.t exactly _how_ their funds are distributed off-chain](https://github.com/lightningnetwork/lnd/pull/4512). An output of the new call resmbles the following: 
```
⛰lncli channelbalance
{
    &quot;balance&quot;: &quot;27476201&quot;,
    &quot;pending_open_balance&quot;: &quot;0&quot;,
    &quot;local_balance&quot;: {
        &quot;sat&quot;: &quot;27476201&quot;,
        &quot;msat&quot;: &quot;27476201135&quot;
    },
    &quot;remote_balance&quot;: {
        &quot;sat&quot;: &quot;109137173&quot;,
        &quot;msat&quot;: &quot;109137173865&quot;
    },
    &quot;unsettled_local_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;unsettled_remote_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;pending_open_local_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;pending_open_remote_balance&quot;: {
        &quot;sat&quot;: &quot;1783362&quot;,
        &quot;msat&quot;: &quot;1783362000&quot;
    }
}
```

Note that the first two fields (`balance` and `pending_open_balance`) are now deprecated and will be _removed_ in the future. Callers should use the new fields that return both `sat` and `msat` instead. 

### Raw Key Support for `SharedKeyRequest`

[The `DeriveSharedKey` now accepts a raw public key in addition to key locator](https://github.com/lightningnetwork/lnd/pull/4436). 

### Additional HTLC Information in ListChannels

[The `ListChannels` call will now return additional information about the set of linked HTLCs in a channel](https://github.com/lightningnetwork/lnd/pull/4693). Namely, we'll now return: 
  * The `htlc_index` of the HTLC within the channel 
  * The `forwarding_channel`, or the channel that forwarded the HTLC to the targte channel 
  * The `forwarding_htlc_index`, or the HTLC index on the forwarded channel. 

### Automated Let's Encrypt Certificates 

A new series of command line flags have been added to `lnd` which allows users to automatically obtain and renew a Let's Encrypt Certificate for the RPC interface of their `lnd` node. With this change, in certain configurations, callers will be able to hit an `lnd` now without having to manually store and update the `tls.cert` locally. 
New flags added to the `lnd` command line and `lnd.conf`:

* `--letsencryptport`: The port on which lnd will listen for Let's Encrypt challenges. Let's Encrypt will always try to contact on port 80. Often non-root processes are not allowed to bind to ports lower than 1024. This configuration option allows a different port to be used, but must be used in combination with port forwarding from port 80.
* `--letsencryptdir`: The directory to store Let's Encrypt certificates within. By default this is `.lnd/letsencrypt`.
* `--letsencryptdomain`: Request a Let's Encrypt certificate for the domain specified using this flag.

When `lncli` cannot find a `tls.cert` file, it will assume the server has a valid (Let's Encrypt) certificate. It is important to pass the domain name as a command line flag to `lncli`:

`lncli --rpcserver my.domain.org:10009`

This is necessary as well when connecting to `localhost`.

### Custom Routing Hints for AddHoldInvoice 

[The `AddHoldInvoice` RPC call now allows the users to specify their own custom routing hints](https://github.com/lightningnetwork/lnd/pull/3672). 



### Allow No RPC Auth on Private Addresses 

[A new config evaluation has been added to allow user to instruct `lnd` that it should allow RPC requests with no authentiation _only_ if `lnd` is listening on a private address](https://github.com/lightningnetwork/lnd/pull/4473). This makes certain Docker based configurations more user friendly, as any dependent containers no longer need to obtain and update lnd's RPC authentication information. Assuming `lnd` is only listening on a non-public private interface, then the `--no-macaroons` config option is now valid.  

### New Channel Acceptor Parameters
Additional [fields](https://github.com/lightningnetwork/lnd/pull/4683) have been added to the `ChannelAcceptor` API, which allow custom setting of custom errors for the remote peer, an upfront shutdown address for the channel (if supported by the peer), and more. Note that the error provided will be sent to the peer verbatim, so should not contain sensitive information.

### Maximum Local CSV
When opening a channel, the remote party can specify the CSV delay for your funds. This value determines the amount of time that your balance will be unavailable in the case where your force close the channel. A [`max_local_csv` parameter](https://github.com/lightningnetwork/lnd/pull/4735) has been added to allow setting of custom limitations on this value. For outgoing channels, this can be set using the `max_local_csv` field in the `OpenChannel` request. The `maxlocaldelay` config value can be used to set a default maximum value for all channels.

### Disable TLS for REST
It is now possible to [disable TLS for REST RPC](https://github.com/lightningnetwork/lnd/pull/4648) using `--no-rest-tls`.

## Refactoring
This release sees the removal of several components from the main `lnd` package:
- `fundingmanager.go` and tests are [moved](https://github.com/lightningnetwork/lnd/pull/4757) to the `funding` package.
- `chainregistry.go` and `chainparams.go` have been [moved](https://github.com/lightningnetwork/lnd/pull/4487) to the `chainreg` package.
- `mock.go` has been [removed](https://github.com/lightningnetwork/lnd/pull/4542) in favor of the `lntest/mock` package.
- A global variable `activeNetParams` has been [removed](https://github.com/lightningnetwork/lnd/pull/4505).

The `peer` package's dependency on `brontide` has been [removed](https://github.com/lightningnetwork/lnd/pull/4645).
## Miscellaneous

The DNS servers to use for initial peer bootstrapping [can now be specified](https://github.com/lightningnetwork/lnd/pull/4744) to overwrite the hard coded default values.

All supported command line flags are now [also properly documented in the `sample-lnd.conf` file](https://github.com/lightningnetwork/lnd/pull/4626).

[A new flag has been added to instruct `lnd` to timeout early if it can't obtain the file lock on bolt DB](https://github.com/lightningnetwork/lnd/pull/4787). 

### Multi node management

Hosting nodes on non-trusted (cloud) hardware was made safer by adding a [stateless initialization mode](https://github.com/lightningnetwork/lnd/pull/1288) that instructs `lnd` to not store any unencrypted macaroons on the host's file system. Instead, the admin macaroon is returned in the response of the wallet creation request and must be stored by the caller.

To support the stateless initialization mode mentioned above on the client side as well, [configuration profiles for `lncli` can now be created](https://github.com/lightningnetwork/lnd/pull/4310). Those profiles make it easy to interact with multiple nodes from the same client machine. For additional security the macaroons stored in the profiles can optionally be encrypted with a password.

### Recovery

Forcing the on-chain wallet to rescan its state from chain was [made easier by adding the `--reset-wallet-transactions` flag](https://github.com/lightningnetwork/lnd/pull/4715) to `lnd` that replaces the functionality previously only available in the external tool `dropwtxmgr`.

### Individual subsystem log levels
A change that makes it possible to set the [log level for individual subsystems](https://github.com/lightningnetwork/lnd/pull/4772) was merged. One can now specify a global log level, and subsystem log levels that will override the global setting: `--debuglevel=debug,PEER=info,SRVR=trace`.


## Bug fixes

- A bug in [the restore logic for old SCB files](https://github.com/lightningnetwork/lnd/pull/4865) was fixed that caused the `a height hint greater than 0 must be provided` error.
- A bug was fixed in how we [watch for states on chain](https://github.com/lightningnetwork/lnd/pull/4780), that could cause us to ignore our own close transaction if we attempted recovery while our force close transaction was still in the mempool.
- All directories referenced by command line flags are [now properly created](https://github.com/lightningnetwork/lnd/pull/4622) on startup.
- Neutrino users can now [specify a full node backend with an Onion v2 address](https://github.com/lightningnetwork/lnd/pull/4806). Before this fix, only clearnet addresses were supported.
- The chain backend health check which ensures that lnd is reliably connected to a bitcoin node has been [updated](https://github.com/lightningnetwork/lnd/pull/4755) to use the `uptime` api for bitcoind nodes. This check previously used the `getBlockChainInfo` API, which proved unsuitable because it could take up to 5 minutes for bitcoind to respond due to non-granular locking in core.
- A bug in the `walletrpc` subserver’s `ListSweeps` endpoint where the `verbose` output option would fail if a sweep was not found on chain has been [fixed](https://github.com/lightningnetwork/lnd/pull/4762). This could happen for transactions that were replaced-by-fee. 
- [`lnd` will no longer allow restoted channels to be manually closed](https://github.com/lightningnetwork/lnd/pull/4525). This fixes a class of issues that would cause `lnd` to be unable to start due to a borked local channel state. 
- [`lnd` will no longer attempt to trap SIGABRT](https://github.com/lightningnetwork/lnd/pull/4627). 
- [A bug has been fixed related to mnemonic seed validation on restore](https://github.com/lightningnetwork/lnd/pull/4738). This ensures `lnd` will properly catch invalid words (that aren't in the wordlist) much earlier than before. 
- [All errors in the `routerrpc` server will now be properly mapped to gRPC status codes](https://github.com/lightningnetwork/lnd/pull/4691). 
- [`lnd` nodes using the neutrino backend will now properly be able to connect to onion v2 onion service addresses](https://github.com/lightningnetwork/lnd/pull/4806). 
- [A bug preventing the `wtclient` from shutting down cleanly while a concurrent session negotiation is in progress has been fixed.](https://github.com/lightningnetwork/lnd/pull/4789)

The full list of changes since `v0.11.0-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.11.1-beta...v0.12.0-beta

# Contributors (Alphabetical Order)

Alex Bosworth 
András Bánki-Horváth
Ben Woosley 
Bjarne Magnussen 
Calvin Zachman 
Carla Kirk-Cohen 
Carsten Otto 
Conner Fromknecht 
Dan Janosik 
Daniel Babbev 
Dominik Spicher 
Eugene Siegel
Federico Bond 
Glen Cooper 
githorray
Graham Krizek
Hampus Sjöberg
Johan T. Halseth
Joost Jager
Juan Pablo Civile 
Jules Lamur 
Kartik Shah
Marty Jones
Matheus Degiovani 
Mayank Chhabra
MrManPew
Olaoluwa Osuntokun 
Oliver Gugger 
positiveblue
Roei Erez 
Tom Kirkpatrick 
Torkel Rogstad 
Wilmer Paulino 
Yaacov Akiba Slama
Yan Pritzker 
yyforyongyu </summary>
    <title>lightningnetwork/lnd: v0.12.0-beta</title>
    <updated>2021-01-27T03:43:57Z</updated>
    <dc:date>2021-01-27T03:43:57Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/ElementsProject/lightning/releases/tag/v0.9.3</id>
    <link href="https://github.com/ElementsProject/lightning/releases/tag/v0.9.3"/>
    <summary>We're pleased to announce the 0.9.3 release of c-lightning, named by Karol Hosiawa.

This is a minor release, but it also introduces a number of new features that we're really exited about, including a number of usability improvements, better access to lower-level primitives to build on top, and experimental extensions to the lightning protocol.


## Highlights for Users

-   Much improved parameter verification in `lightning-cli` makes it easier to debug why a call failed.
-   You can now query for the status of an invoice based on the hash or the invoice.
-   Plugins that are started while the node is running can now receive command line arguments as if they were provided at node startup.
-   The security of the `hsmtool` used to encrypt and decrypt the node's seed key was improved by switching to a passphrase prompt
    instead of a command line argument.
-   Multiple plugins can now register for the `db_write` hook, which means you can now run multiple backup plugins at the same time. In addition we wrote [extensive documentation](https://lightning.readthedocs.io/BACKUP.html) on how to secure your node from dataloss.


## Highlights for the Network

-   No more reckless: the default network changed from `testnet` to `bitcoin`.
-   We have experimental support for the onion messages proposal, allowing arbitrary messages to be exchanged between nodes in the network.
-   We have experimental support for the offers proposal, enabling reusable invoices, refunds, invoices denominated in currencies other than bitcoins, and much much more. If you ever wanted to have an inline communication step with the other endpoint of a payment then take a look at this.

## Highlights for Developers

-   pyln now supports both receiving notifications from the RPC interface, as well as sending notifications in methods implemented by plugins. No more waiting in front of a blank screen for your users.
-   The new `createinvoice` allows you to create an invoice externally, then have your node sign it and manage it internally.
-   You can use `sendonionmessage` to send an onion routed message, which recipient can receive using a plugin that register for the `onion_message` or `onion_message_blinded` hook.

More details can be found in the [changelog](https://github.com/ElementsProject/lightning/blob/v0.9.3/CHANGELOG.md)

Thanks to everyone for their contributions and bug reports; please keep them coming.

Since 0.9.2, we've had 360 commits from 13 different authors over 60 days, an average commit rate of 6.51 commits per day 🤓

A special thanks goes to the 2 first time contributors:

-   João Paulo
-   Karol Hosiawa

Cheers,
Christian, Rusty, Lisa, ZmnSCPxj

</summary>
    <title>ElementsProject/lightning: v0.9.3</title>
    <updated>2021-01-20T17:39:58Z</updated>
    <dc:date>2021-01-20T17:39:58Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta.rc6</id>
    <link href="https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta.rc6"/>
    <summary>This release marks the first major release in the `v0.12.x` series! As this is a major release several new features are included in this release including: anchor commitment types are now the default, anchor commitment support for watchtowers, new arguments to auto compact the database as well as drop the `wtxmgr` state, generic wallet PSBT crafting+signing, and much more! As usual, this release contains several important bug fixes, so we recommend all users update. 

# Database Migrations
A migration to initialize a top-level peers bucket is included in this release. The bucket is used to track flap counts for peers that we have channels open with across restarts. These values are used to rate-limit the amount of memory that `lnd` uses to track peers online state, ensuring that we do not store large volumes of uptime information for peers that are constantly changing online state.

This release contains a migration to initialize a top-level-bucket for an outpoint index. There is also a subsequent migration that populates this index with an outpoint's status. This will cut down on expensive `bbolt` transactions throughout the codebase. The migration process should look something like this upon initial start up:
```
2020-12-21 10:45:07.256 [INF] LTND: Version: 0.12.0-beta commit=v0.12.0-beta, build=production, logging=default
2020-12-21 10:45:07.257 [INF] LTND: Active chain: Bitcoin (network=mainnet)
2020-12-21 10:45:07.257 [INF] LTND: Opening the main database, this might take a few minutes...
2020-12-21 10:45:07.257 [INF] LTND: Opening bbolt database, sync_freelist=false, auto_compact=false
2020-12-21 10:45:07.304 [INF] CHDB: Checking for schema update: latest_version=20, db_version=17
2020-12-21 10:45:07.304 [INF] CHDB: Performing database schema migration
2020-12-21 10:45:07.304 [INF] CHDB: Applying migration #18
2020-12-21 10:45:07.304 [INF] CHDB: Creating top-level bucket: &quot;peers-bucket&quot; ...
2020-12-21 10:45:07.305 [INF] CHDB: Created top-level bucket: &quot;peers-bucket&quot;
2020-12-21 10:45:07.305 [INF] CHDB: Applying migration #19
2020-12-21 10:45:07.305 [INF] CHDB: Creating top-level bucket: &quot;outpoint-bucket&quot; ...
2020-12-21 10:45:07.305 [INF] CHDB: Created top-level bucket: &quot;outpoint-bucket&quot;
2020-12-21 10:45:07.305 [INF] CHDB: Applying migration #20
2020-12-21 10:45:07.324 [INF] LTND: Database now open (time_to_open=67.71764ms)!
```

# Verifying the Release

In order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already: 

```
curl https://keybase.io/bitconner/pgp_keys.asc | gpg --import
curl https://keybase.io/roasbeef/pgp_keys.asc | gpg --import
```

Once you have the required PGP keys, you can verify the release (assuming `manifest-roasbeef-v0.12.0-beta.rc6.txt.asc` is in the current directory) with:

```
gpg --verify manifest-roasbeef-v0.12.0-beta.rc6.txt.asc
```

You should see the following if the verification was successful:

```
gpg: Signature made Wed Sep 30 17:35:20 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

That will verify the signature of the manifest file, which ensures integrity and authenticity of the archive you've downloaded locally containing the binaries. Next, depending on your operating system, you should then re-compute the `sha256` hash of the archive with `shasum -a 256 &lt;filename&gt;`, compare it with the corresponding one in the manifest file, and ensure they match *exactly*.

## Verifying the Release Timestamp 

From this new version onwards, in addition time-stamping the _git tag_ with [OpenTimeStamps](https://opentimestamps.org/), we'll also now timestamp the manifest file along with its signature. Two new files are now included along with the rest of our release artifacts: ` manifest-roasbeef-v0.12.0-beta.rc6.txt.asc.ots`.

Assuming you have the opentimestamps client installed locally, the timestamps can be verified with the following commands: 
```
ots verify manifest-roasbeef-v0.12.0-beta.rc6.txt.asc.ots -f manifest-roasbeef-v0.12.0-beta.rc6.txt.asc
```

Alternatively, [the open timestamps website](https://opentimestamps.org/) can be used to verify timestamps if one doesn't have a `bitcoind` instance accessible locally. 

These timestamps should give users confidence in the integrity of this release even after the key that signed the release expires. 

## Verifying the Release Binaries

Our release binaries are fully reproducible. Third parties are able to verify that the release binaries were produced properly without having to trust the release manager(s). See our [reproducible builds guide](https://github.com/lightningnetwork/lnd/tree/master/build/release) for how this can be achieved.
The release binaries are compiled with `go1.15.6`, which is required by verifiers to arrive at the same ones.
They include the following build tags: `autopilotrpc`, `signrpc`, `walletrpc`, `chainrpc`, `invoicesrpc`, `routerrpc`, and `watchtowerrpc`. Note that these are already included in the release script, so they do not need to be provided.

The `make release` command can be used to ensure one rebuilds with all the same flags used for the release. If one wishes to build for only a single platform, then `make release sys=&lt;OS-ARCH&gt; tag=&lt;tag&gt;` can be used. 

Finally, you can also verify the _tag_ itself with the following command:

```
$ git verify-tag v0.12.0-beta.rc6
gpg: Signature made Tue Sep 15 18:55:00 2020 PDT
gpg:                using RSA key 4AB7F8DA6FAEBB3B70B1F903BC13F65E2DC84465
gpg: Good signature from &quot;Olaoluwa Osuntokun &lt;laolu32@gmail.com&gt;&quot; [ultimate]
```

## Verifying the Docker Images

To verify the `lnd` and `lncli` binaries inside the docker images against the signed, reproducible release binaries, there is a verification script in the image that can be called (before starting the container for example):

```shell
$ docker pull lightninglabs/lnd:v0.12.0-beta.rc6
$ docker run --rm --entrypoint=&quot;&quot; lightninglabs/lnd:v0.12.0-beta.rc6 /verify-install.sh
$ OK=$?
$ if [ &quot;$OK&quot; -ne &quot;0&quot; ]; then echo &quot;Verification failed!&quot;; exit 1; done
$ docker run lightninglabs/lnd [command-line options]
```

# Building the Contained Release 

Users are able to rebuild the target release themselves without having to fetch any of the dependencies. In order to do so, assuming
that `vendor.tar.gz` and `lnd-source-v0.12.0-beta.rc6.tar.gz` are in the current directory, follow these steps:

```
tar -xvzf vendor.tar.gz
tar -xvzf lnd-source-v0.12.0-beta.rc6.tar.gz
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.0-beta.rc6&quot; ./cmd/lnd
GO111MODULE=on go install -v -mod=vendor -ldflags &quot;-X github.com/lightningnetwork/lnd/build.Commit=v0.12.0-beta.rc6&quot; ./cmd/lncli
```

The `-mod=vendor` flag tells the `go build` command that it doesn't need to fetch the dependencies, and instead, they're all enclosed in the local vendor directory. 

Additionally, it's now possible to use the [enclosed `release.sh` script to bundle a release for a _specific_ system like so](https://github.com/lightningnetwork/lnd/pull/2191): 

```
make release sys=&quot;linux-arm64 darwin-amd64&quot;
```

⚡️⚡️⚡️ OK, now to the rest of the release notes! ⚡️⚡️⚡️

# Release Notes

## New Default Autopilot Heuristic

[In this version of `lnd`, the default heursitic for autopilot has been changed from preferential attachment, to a version that will attempt to optimize for the betweeness centrality of the node](https://github.com/lightningnetwork/lnd/pull/4668). At a high level, this change means that rather than trying to connect (stochastically) to the nodes that have the _most_ channels, `lnd` will instead attempt to connect to the nodes that [appear most often in the shortest paths within the network](https://en.wikipedia.org/wiki/Betweenness_centrality). This change will serve to step as a stepping stone to further diffuse the graph to make it more resilient. 

## Pathfinding Improvements 

[`lnd` will now properly penalize attempts of larger &quot;wumbo&quot; sized payments proportionally](https://github.com/lightningnetwork/lnd/pull/4602). This will serve to ensure that clients with less active failure information are able to properly prune the search space by increasing the _attempt_ cost for larger payments. New flags has been added to allow users to configure the attempt cost for this value (`attemptcost` and `attemptcostppm`). We encourage users taht frequently send larger payments to tweak these parameters to find what works best, and ideally communicate this information back to the maintainers of `lnd` so we can better tune the current default value. 

## Graph Download Optimizations 

[`lnd` will now _batch_ all insertion operations related to channel graph which should _greatly_ speed up initial graph download](https://github.com/lightningnetwork/lnd/pull/3367). Initial becnhmarks show this change resluting in a 3x speed increase, with further gains likely being seen on mobile and more constrained platforms. 

## Peer to Peer Updates 

[A new flag has been added to `lnd` to enforce a _global_ connection timeout when trying to connect out to new peers](https://github.com/lightningnetwork/lnd/pull/4452). Setting a lower value for this new command line option (`timeout`) will mean that `lnd` will give up on unrechable peers much sooner than before, which can be useful when attempting to connect to a set of addresses to open chnnel to a peer. 


## Automatic Database Compaction

The most important data of any `lnd` node is stored in its channel database (`channel.db`). The database library currently used for this DB is `bbolt` which by design does not give back free space to the file system, even if data is deleted from the DB. This can lead to large DB files and slow startup times. Compaction is the process of creating a fresh copy of a `bbolt` database that only contains data and no &quot;reserved free space&quot;. This process also de-fragments and validates the integrity of the data.

[Automatic compaction of the `channel.db` can now be turned on](https://github.com/lightningnetwork/lnd/pull/4667) with the flag `--db.bolt.auto-compact`. By default this will compact on startup, if the last compaction was more than a week ago. The flag `--db.bolt.auto-compact-min-age` can also be set to `0` to force compaction on every startup, independent of how long ago it happened last.


## Protocol Upgrades

### Anchor Output Channels
`lnd` will now open the new channel type dubbed &quot;anchor channels&quot; by default if both peers support it. You signal support by setting the `--protocol.anchors` flag at `lnd` startup. This is a channel type that has been available to advanced users [since lnd v0.10](https://github.com/lightningnetwork/lnd/releases/tag/v0.10.0-beta), but it has seen a few updates that makes it [even safer](https://github.com/lightningnetwork/lnd/pull/4840) and useful in high fee scenarios, and it is now in line with [a proposed BOLT change](https://github.com/lightningnetwork/lightning-rfc/pull/824).

The anchor channel type is a new type of channel that is much safer in high fee scenarios, as it allows bumping the fees after the channel has been force closed, instead of making the peers agreeing on a future close fee. This is also a nice UX improvement, as less of the channel capacity needs to go towards the commitment fee reserve, and can instead be used for payments. In addition it allows [bundling multiple HTLC transactions](https://github.com/lightningnetwork/lnd/pull/4779) together into one, potentially saving on chain fees in force close scenarios.

The commitment transaction still needs to be signed up front with a fee that ensures its mempool acceptance, and this [fee now defaults](https://github.com/lightningnetwork/lnd/pull/4855) to 10 sat/vbyte. This can be tuned by the `--max-commit-fee-rate-anchors` flag, but this should be used with caution. 

Note that one has to have on-chain funds available in the wallet for fee bumping channel closes for anchor channels. Because of this, a small portion of the wallet balance will be reserved for this purpose, and some on-chain actions that used to be allowed can now be rejected if you have anchor channels open.

### Static Remote Key Feature Bit Required

[This new version of `lnd` now requires channels that use a static remote key, AKA &quot;tweakless commitments&quot;](https://github.com/lightningnetwork/lnd/pull/4751). This change improves safety and security for users as now when a channel is force closed by the remote party, the funds will go directly to a user control key. Prior versions of  `lnd` have supported this channel type, but `lnd` will now **only** allow this type of channel when making channels with new peer.

Lnd will [waive this requirement](https://github.com/lightningnetwork/lnd/pull/4847) in the case where it still has legacy channels with a peer. This ensures that lnd can still connect to nodes it has existing channels with, even if they do not understand the feature bit. 

### Improved End to End Payment Security 

The MPP protocol upgrade included a so called &quot;payment address&quot; that improves end-to-end payment security by requiring the sender to include a special nonce in the onion payload specify by the receiver. As intermediate nodes can't guess this secret ahead of time, and it's encrypted in the onion only to the finally receiver, they thwarts a large class of probing and de-anonymization attacks. [This new release of `lnd` will now _require_ this feature bit set in any new invoices it creates](https://github.com/lightningnetwork/lnd/pull/4752), which means all payments that don't include this new payment secret will be rejected. 


## PSBT Signing

The internal wallet can now [create and sign PSBTs](https://github.com/lightningnetwork/lnd/pull/4389). In combination with the `ListUnspent` RPC this allows RPC users to implement full coin control.
This feature also takes us one step closer to the goal of supporting watch-only on-chain wallets in `lnd` where an online node would only have public keys to track the UTXOs and would delegate the signing to a non-networked `lnd` node that has the private keys, all through using PSBTs.
Read more about the possible use cases and dive into the examples [in our PSBT documentation](https://github.com/lightningnetwork/lnd/blob/master/docs/psbt.md).

## Build System

Leveraging the power of GitHub Workflows, we now [automatically build and push docker images](https://github.com/lightningnetwork/lnd/pull/4769) of all our releases [to Docker Hub](https://hub.docker.com/u/lightninglabs). This includes images for `amd64` and [`arm64`](https://github.com/lightningnetwork/lnd/pull/4852).

The distinction between the production `Dockerfile` and the development `dev.Dockerfile` [were made more clear in the documentation](https://github.com/lightningnetwork/lnd/pull/4790).

The release binaries for all OS/architectures are now [also built by a GitHub Workflow](https://github.com/lightningnetwork/lnd/pull/4777). The deterministic build system introduced in a previous release allows us to independently build and sign the binaries locally. Signatures of more than just one developer will be added to releases in the future.

The experiential build tag has been [removed](https://github.com/lightningnetwork/lnd/pull/4701) for the `assumechanvalid` flag that is used to prevent long rescans for neutrino nodes.

## Continuous Integration

Our continuous integration pipeline, most notably our integration tests, has received a number of improvements and bug fixes making them considerably faster and somewhat more stable:
- An integration test suite running [against a `bitcoind` with the TX index disabled](https://github.com/lightningnetwork/lnd/pull/4617) was added.
- The ~70 integration tests are now [split into 4 parts and run in parallel](https://github.com/lightningnetwork/lnd/pull/4655) reducing the execution time by ~50%.
- Log files are only uploaded to termbin.com and file.io [for failed runs](https://github.com/lightningnetwork/lnd/pull/4623) and the `bitcoind` binaries are [extracted from a docker image instead of being downloaded](https://github.com/lightningnetwork/lnd/pull/4623), shaving off a few more minutes from the total itest execution time.
- The test harness for the `btcd` node used as the mining node [were improved to fix port collisions](https://github.com/lightningnetwork/lnd/pull/4765) which resulted in flaky tests.
- A check was added that [forces new command line flags to also be documented in the `sample-lnd.conf` file](https://github.com/lightningnetwork/lnd/pull/4626).
- A new make target [for itest flake hunting](https://github.com/lightningnetwork/lnd/pull/4756) was added.
- New make targets [for running fuzz tests](https://github.com/lightningnetwork/lnd/pull/4643) were added.
- Build tags were removed from the integration test files, [allowing the linter to check those as well](https://github.com/lightningnetwork/lnd/pull/4593).
- The `zpay32` package's `Decode` and `Encode` functions now have [corresponding fuzz tests](https://github.com/lightningnetwork/lnd/pull/4651) in the `fuzz` package.
- The `brontide` fuzz tests have been [fixed](https://github.com/lightningnetwork/lnd/pull/4640).
- Fuzz testing has been [optimized](https://github.com/lightningnetwork/lnd/pull/4682) to instruct `gofuzz` to always mutate the input.

## Contract Court Performance Improvements
Performance [improvements](https://github.com/lightningnetwork/lnd/pull/4697) were made to the contract court subsystem which is responsible for closing out channels on chain and taking on-chain actions required to fully resolve the channel. The number of database transactions required to start up the subsystem has been reduced from one per channel to a single transaction, which reduces startup time. Improvements to the way the subsystem consumes new blocks from its backing bitcoin node have also improved the memory footprint of the system. 

## Extended Health Checks 

[A new optional `healthcheck` has been added to insturct `lnd` to restart itself in order to _refresh_ an expired RPC TLS cert](https://github.com/lightningnetwork/lnd/pull/4792). This change is useful in containerized contexts such as k8s, where an auto restarting `lnd` is able to propagate any auth changes in a decoupled manner upon restart. 

## `htlcswitch` Enhancements 

Database contention has been [reduced](https://github.com/lightningnetwork/lnd/pull/4547) in the link by batching removal of forwarding packages. The removal timer has also been increased from 1 minute to 1 hour.

[A bug has been fixed in our non-strict forwarding randomization](https://github.com/lightningnetwork/lnd/pull/4659) to ensure we explciitly randomize our link sleection rather than relying on the undefined ordering of map interation in the Go spec.

## Gossip Enhancements

During the development of this release, an increase in high disk usage was reported by several users throughout the network due to channel update spam. To minimize the effects to disks, `lnd` will now [rate limit channel updates in two ways](https://github.com/lightningnetwork/lnd/pull/4786). Keep-alive updates, those which only increase their timestamps to signal liveliness, are now limited to one per rebroadcast interval (current default of 24H). Non-keep-alive updates are now limited to one per block per direction.

As required by the specification, `lnd` now [enforces all channels for a block must fit within a single reply](https://github.com/lightningnetwork/lnd/pull/4804). It would previously not enforce this as it would allow an overlap of blocks across multiple replies, which could lead other implementations to send us a error due to the overlap and cause connect/disconnect cycles.

`lnd` will [no longer accept premature channel announcements/updates and wait for their maturity](https://github.com/lightningnetwork/lnd/pull/4895).

## Peer Flap Rate Tracking

An [update](https://github.com/lightningnetwork/lnd/pull/4440) to the channel fitness subsystem has introduced tracking of the number of times lnd is connected and disconnected from each of its peers. This information is surfaced in the output of the `ListPeers` API. 

The flap rate we have recorded for peers is also used to rate limit the amount of data lnd will store to track the peer’s uptime. If a peer has a high flap rate, lnd will reduce the amount of data it stores in memory, resulting in more aggregated uptime information. This change is intended to protect against constantly flapping peers, and will have little effect on peers that are consistently online with the occasional restart. To ensure that we do not permanently punish a peer for a period of instability long in the past, the flap rate we track for peers is exponentially cooled down over time. 

## RPC Enchancements &amp; Bug Fixes

### GetInfo `best_header_timestamp`

[The `best_header_timestamp` field included in the `GetInfo`'s RPC response will now be set to what the backend reports while it is syncing](https://github.com/lightningnetwork/lnd/pull/4703). This will restore the ability for higher-level applications to determine their sync progress.

### Watchtower Address Removal

[The last address of a registered watchtower can no longer be removed](https://github.com/lightningnetwork/lnd/pull/4746) to prevent a potential panic. 

### Uniform Unconfirmed Coin Selection for SendCoins+

[`lnd` now allows all RPC calls that craft and send transactions to spend unconfirmed coins](https://github.com/lightningnetwork/lnd/pull/4653). 

This change the following RPCs:

- `Lightning.SendCoins`
- `Lightning.SendMany`
- `WalletKit.SendOutputs`

We've added two new parameters for these methods, following the same format as used for `Lightning.OpenChannel` RPC:

- `min_confs` (default=1)
- `spend_unconfirmed` (default=false)


### Macaroon Root ID Key Rotation 

[`lnd` now supports _root ID_ key rotation](https://github.com/lightningnetwork/lnd/pull/4427). This allows the baker (creator) of a set of macaroons to _invalidate_ them all by deleting and regenerating the root key used to generate the macaroons. This feature is a useful security tool, as if an application/system that uses lnd's macaroons in a fine grained manner is compromised, the admin is able to _revoke_ all generated macaroons. 

Several new calls have been added to allow users to take advantage of this feature, namely:
  * The `lncli bakemacaroon` call now accepts a new parameter: `root_key_id`. This new field is an integer that can be used to rotate root ID keys. 
  * A new `lncli listmacaroonids` command has been added to allow callers to monitor all their existing allocated root IDs.
  * A new `lncli deletemacaroonid` call has been added which implements _macaroon revocation_ by allowing the caller to _delete_ a specified root key ID. 
 
 
### New Verbose Output for `ChannelBalance`

[The `lncli channebalance` call now returns much more information than before in order to give users more insight w.r.t exactly _how_ their funds are distributed off-chain](https://github.com/lightningnetwork/lnd/pull/4512). An output of the new call resmbles the following: 
```
⛰lncli channelbalance
{
    &quot;balance&quot;: &quot;27476201&quot;,
    &quot;pending_open_balance&quot;: &quot;0&quot;,
    &quot;local_balance&quot;: {
        &quot;sat&quot;: &quot;27476201&quot;,
        &quot;msat&quot;: &quot;27476201135&quot;
    },
    &quot;remote_balance&quot;: {
        &quot;sat&quot;: &quot;109137173&quot;,
        &quot;msat&quot;: &quot;109137173865&quot;
    },
    &quot;unsettled_local_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;unsettled_remote_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;pending_open_local_balance&quot;: {
        &quot;sat&quot;: &quot;0&quot;,
        &quot;msat&quot;: &quot;0&quot;
    },
    &quot;pending_open_remote_balance&quot;: {
        &quot;sat&quot;: &quot;1783362&quot;,
        &quot;msat&quot;: &quot;1783362000&quot;
    }
}
```

Note that the first two fields (`balance` and `pending_open_balance`) are now deprecated and will be _removed_ in the future. Callers should use the new fields that return both `sat` and `msat` instead. 

### Raw Key Support for `SharedKeyRequest`

[The `DeriveSharedKey` now accepts a raw public key in addition to key locator](https://github.com/lightningnetwork/lnd/pull/4436). 

### Additional HTLC Information in ListChannels

[The `ListChannels` call will now return additional information about the set of linked HTLCs in a channel](https://github.com/lightningnetwork/lnd/pull/4693). Namely, we'll now return: 
  * The `htlc_index` of the HTLC within the channel 
  * The `forwarding_channel`, or the channel that forwarded the HTLC to the targte channel 
  * The `forwarding_htlc_index`, or the HTLC index on the forwarded channel. 

### Automated Let's Encrypt Certificates 

A new series of command line flags have been added to `lnd` which allows users to automatically obtain and renew a Let's Encrypt Certificate for the RPC interface of their `lnd` node. With this change, in certain configurations, callers will be able to hit an `lnd` now without having to manually store and update the `tls.cert` locally. 
New flags added to the `lnd` command line and `lnd.conf`:

* `--letsencryptport`: The port on which lnd will listen for Let's Encrypt challenges. Let's Encrypt will always try to contact on port 80. Often non-root processes are not allowed to bind to ports lower than 1024. This configuration option allows a different port to be used, but must be used in combination with port forwarding from port 80.
* `--letsencryptdir`: The directory to store Let's Encrypt certificates within. By default this is `.lnd/letsencrypt`.
* `--letsencryptdomain`: Request a Let's Encrypt certificate for the domain specified using this flag.

When `lncli` cannot find a `tls.cert` file, it will assume the server has a valid (Let's Encrypt) certificate. It is important to pass the domain name as a command line flag to `lncli`:

`lncli --rpcserver my.domain.org:10009`

This is necessary as well when connecting to `localhost`.

### Custom Routing Hints for AddHoldInvoice 

[The `AddHoldInvoice` RPC call now allows the users to specify their own custom routing hints](https://github.com/lightningnetwork/lnd/pull/3672). 



### Allow No RPC Auth on Private Addresses 

[A new config evaluation has been added to allow user to instruct `lnd` that it should allow RPC requests with no authentiation _only_ if `lnd` is listening on a private address](https://github.com/lightningnetwork/lnd/pull/4473). This makes certain Docker based configurations more user friendly, as any dependent containers no longer need to obtain and update lnd's RPC authentication information. Assuming `lnd` is only listening on a non-public private interface, then the `--no-macaroons` config option is now valid.  

### New Channel Acceptor Parameters
Additional [fields](https://github.com/lightningnetwork/lnd/pull/4683) have been added to the `ChannelAcceptor` API, which allow custom setting of custom errors for the remote peer, an upfront shutdown address for the channel (if supported by the peer), and more. Note that the error provided will be sent to the peer verbatim, so should not contain sensitive information.

### Maximum Local CSV
When opening a channel, the remote party can specify the CSV delay for your funds. This value determines the amount of time that your balance will be unavailable in the case where your force close the channel. A [`max_local_csv` parameter](https://github.com/lightningnetwork/lnd/pull/4735) has been added to allow setting of custom limitations on this value. For outgoing channels, this can be set using the `max_local_csv` field in the `OpenChannel` request. The `maxlocaldelay` config value can be used to set a default maximum value for all channels.

### Disable TLS for REST
It is now possible to [disable TLS for REST RPC](https://github.com/lightningnetwork/lnd/pull/4648) using `--no-rest-tls`.

## Refactoring
This release sees the removal of several components from the main `lnd` package:
- `fundingmanager.go` and tests are [moved](https://github.com/lightningnetwork/lnd/pull/4757) to the `funding` package.
- `chainregistry.go` and `chainparams.go` have been [moved](https://github.com/lightningnetwork/lnd/pull/4487) to the `chainreg` package.
- `mock.go` has been [removed](https://github.com/lightningnetwork/lnd/pull/4542) in favor of the `lntest/mock` package.
- A global variable `activeNetParams` has been [removed](https://github.com/lightningnetwork/lnd/pull/4505).

The `peer` package's dependency on `brontide` has been [removed](https://github.com/lightningnetwork/lnd/pull/4645).
## Miscellaneous

The DNS servers to use for initial peer bootstrapping [can now be specified](https://github.com/lightningnetwork/lnd/pull/4744) to overwrite the hard coded default values.

All supported command line flags are now [also properly documented in the `sample-lnd.conf` file](https://github.com/lightningnetwork/lnd/pull/4626).

[A new flag has been added to instruct `lnd` to timeout early if it can't obtain the file lock on bolt DB](https://github.com/lightningnetwork/lnd/pull/4787). 

### Multi node management

Hosting nodes on non-trusted (cloud) hardware was made safer by adding a [stateless initialization mode](https://github.com/lightningnetwork/lnd/pull/1288) that instructs `lnd` to not store any unencrypted macaroons on the host's file system. Instead, the admin macaroon is returned in the response of the wallet creation request and must be stored by the caller.

To support the stateless initialization mode mentioned above on the client side as well, [configuration profiles for `lncli` can now be created](https://github.com/lightningnetwork/lnd/pull/4310). Those profiles make it easy to interact with multiple nodes from the same client machine. For additional security the macaroons stored in the profiles can optionally be encrypted with a password.

### Recovery

Forcing the on-chain wallet to rescan its state from chain was [made easier by adding the `--reset-wallet-transactions` flag](https://github.com/lightningnetwork/lnd/pull/4715) to `lnd` that replaces the functionality previously only available in the external tool `dropwtxmgr`.

### Individual subsystem log levels
A change that makes it possible to set the [log level for individual subsystems](https://github.com/lightningnetwork/lnd/pull/4772) was merged. One can now specify a global log level, and subsystem log levels that will override the global setting: `--debuglevel=debug,PEER=info,SRVR=trace`.


## Bug fixes

- A bug in [the restore logic for old SCB files](https://github.com/lightningnetwork/lnd/pull/4865) was fixed that caused the `a height hint greater than 0 must be provided` error.
- A bug was fixed in how we [watch for states on chain](https://github.com/lightningnetwork/lnd/pull/4780), that could cause us to ignore our own close transaction if we attempted recovery while our force close transaction was still in the mempool.
- All directories referenced by command line flags are [now properly created](https://github.com/lightningnetwork/lnd/pull/4622) on startup.
- Neutrino users can now [specify a full node backend with an Onion v2 address](https://github.com/lightningnetwork/lnd/pull/4806). Before this fix, only clearnet addresses were supported.
- The chain backend health check which ensures that lnd is reliably connected to a bitcoin node has been [updated](https://github.com/lightningnetwork/lnd/pull/4755) to use the `uptime` api for bitcoind nodes. This check previously used the `getBlockChainInfo` API, which proved unsuitable because it could take up to 5 minutes for bitcoind to respond due to non-granular locking in core.
- A bug in the `walletrpc` subserver’s `ListSweeps` endpoint where the `verbose` output option would fail if a sweep was not found on chain has been [fixed](https://github.com/lightningnetwork/lnd/pull/4762). This could happen for transactions that were replaced-by-fee. 
- [`lnd` will no longer allow restoted channels to be manually closed](https://github.com/lightningnetwork/lnd/pull/4525). This fixes a class of issues that would cause `lnd` to be unable to start due to a borked local channel state. 
- [`lnd` will no longer attempt to trap SIGABRT](https://github.com/lightningnetwork/lnd/pull/4627). 
- [A bug has been fixed related to mnemonic seed validation on restore](https://github.com/lightningnetwork/lnd/pull/4738). This ensures `lnd` will properly catch invalid words (that aren't in the wordlist) much earlier than before. 
- [All errors in the `routerrpc` server will now be properly mapped to gRPC status codes](https://github.com/lightningnetwork/lnd/pull/4691). 
- [`lnd` nodes using the neutrino backend will now properly be able to connect to onion v2 onion service addresses](https://github.com/lightningnetwork/lnd/pull/4806). 
- [A bug preventing the `wtclient` from shutting down cleanly while a concurrent session negotiation is in progress has been fixed.](https://github.com/lightningnetwork/lnd/pull/4789)

The full list of changes since `v0.11.0-beta` can be found here:

* https://github.com/lightningnetwork/lnd/compare/v0.11.1-beta...v0.12.0-beta.rc6


# Contributors (Alphabetical Order)

Alex Bosworth 
András Bánki-Horváth
Ben Woosley 
Bjarne Magnussen 
Calvin Zachman 
Carla Kirk-Cohen 
Carsten Otto 
Conner Fromknecht 
Dan Janosik 
Daniel Babbev 
Dominik Spicher 
Eugene Siegel
Federico Bond 
Glen Cooper 
githorray
Graham Krizek
Hampus Sjöberg
Johan T. Halseth
Joost Jager
Juan Pablo Civile 
Jules Lamur 
Kartik Shah
Marty Jones
Matheus Degiovani 
Mayank Chhabra
MrManPew
Olaoluwa Osuntokun 
Oliver Gugger 
positiveblue
Roei Erez 
Tom Kirkpatrick 
Torkel Rogstad 
Wilmer Paulino 
Yaacov Akiba Slama
Yan Pritzker 
yyforyongyu </summary>
    <title>lightningnetwork/lnd: v0.12.0-beta.rc6</title>
    <updated>2021-01-20T04:02:34Z</updated>
    <dc:date>2021-01-20T04:02:34Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/getumbrel/umbrel/releases/tag/v0.3.2</id>
    <link href="https://github.com/getumbrel/umbrel/releases/tag/v0.3.2"/>
    <summary>This update brings the latest versions of BTCPay Server, Sphinx Relay, Specter Desktop and Thunderhub to your Umbrel.

Changes:

- Run Umbrel OS security updates during OTA update (#293) 08c6f85 (@AaronDewes)
- Update sphinx-relay to v1.3.8 bb0b867 (@lukechilds)
- Update sphinx-relay version in app registry fbd4aa9 (@lukechilds)
- Upgrade thunderhub app to v0.12.2 (#402) e7a836a (@louneskmt)
- Update specter-desktop app to v1.0.0 (#400) 2ec9b24 (@nolim1t)
- Update thunderhub app to use Tor proxy (#434) c7faead (@louneskmt @lukechilds)
- Use updated brew install command (#421) 604db87 (@goums)
- Update to getumbrel/dashboard to v0.3.15 (#437) 3e1cd09 (@lukechilds)
- Fix unattended-upgrades package installation (#439) 44b4882 (@lukechilds)
- Update thunderhub app to v0.12.4 (#440) 74ded27 (@AaronDewes @louneskmt)
- Fix incorrect version of btc-rpc-explorer app in registry (#442) 0cf5d8c (@AaronDewes)
- Update btcpay-server app to v1.0.6.7 (#441) 24233c7 (@AaronDewes @louneskmt)
- Umbrel v0.3.2 (#438) 56ad651 (@lukechilds)

Diff: https://github.com/getumbrel/umbrel/compare/v0.3.1...v0.3.2</summary>
    <title>getumbrel/umbrel: v0.3.2</title>
    <updated>2021-01-19T12:25:20Z</updated>
    <dc:date>2021-01-19T12:25:20Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.3</id>
    <link href="https://github.com/BlueWallet/BlueWallet/releases/tag/v6.0.3"/>
    <summary>- Vaults coin control
- Share panel when sharing Vault cosigner
- Ask fp &amp; path when scanning Zpub 
- Show spinner if Vault is trying to cosign 
- Disable RPC batching for Fulcrum electrum
- Coin control hangs (no connection on fetchUtxo)
- Scanning a Vault PSBT Qr code when scanning  address
- Some devices wouldn't allow writing files
- Label is not set to created Vault wallet
</summary>
    <title>BlueWallet/BlueWallet: v6.0.3</title>
    <updated>2021-01-18T16:57:51Z</updated>
    <dc:date>2021-01-18T16:57:51Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.7</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.7"/>
    <summary>### Bug fixes:

* Reverted the new Greenfield API: Can configure lightning payment methods @NicolasDorier</summary>
    <title>btcpayserver/btcpayserver: v1.0.6.7</title>
    <updated>2021-01-17T12:56:17Z</updated>
    <dc:date>2021-01-17T12:56:17Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.6</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.6"/>
    <summary>### Bug fixes:

* Load correct connection string when using SQLite @Kukks
* Greenfeld API: Invoice Metadata update was not updating @saliehendricks
* Prevent access to wallet page if wallet not set @dennisreimann

### New features

* Greenfield API: Can configure lightning payment methods @Kukks</summary>
    <title>btcpayserver/btcpayserver: v1.0.6.6</title>
    <updated>2021-01-17T10:24:33Z</updated>
    <dc:date>2021-01-17T10:24:33Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bitcoin/bitcoin/releases/tag/v0.21.0</id>
    <link href="https://github.com/bitcoin/bitcoin/releases/tag/v0.21.0"/>
    <summary>Bitcoin Core version 0.21.0 is now available from:

https://bitcoincore.org/bin/bitcoin-core-0.21.0/

For the release notes please see the git repository:

https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.21.0.md

Preferably use the above download link, not the links provided by GitHub to download the source tarball, as the release tarballs are generated deterministically whereas GitHub's are not.</summary>
    <title>bitcoin/bitcoin: v0.21.0</title>
    <updated>2021-01-15T19:52:11Z</updated>
    <dc:date>2021-01-15T19:52:11Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/bwt-dev/bwt/releases/tag/v0.2.1</id>
    <link href="https://github.com/bwt-dev/bwt/releases/tag/v0.2.1"/>
    <summary>### Changelog

- Migrated to the [@bwt-dev](https://github.com/bwt-dev) github org and split up into:

  [bwt](https://github.com/bwt-dev/bwt), [bwt-electrum-plugin](https://github.com/bwt-dev/bwt-electrum-plugin), [libbwt](https://github.com/bwt-dev/libbwt), [libbwt-jni](https://github.com/bwt-dev/libbwt-jni) and [libbwt-nodejs](https://github.com/bwt-dev/libbwt-nodejs).

- Java Native Bindings for `libbwt` ([libbwt-jni](https://github.com/bwt-dev/libbwt-jni), #73)

- Support for tracking standalone addresses (#14)

  Using `--address &lt;address&gt;` or `--address-file &lt;path&gt;`.

- New config options: `force_rescan` (9e7ccbe), `setup_logger` (35fc49f) and `require_addresses` (162790d)

- Gracefully wait for bitcoind to warm-up (dec6d46)

- Support for `android_logger` (74b2b2f)

- Scrub bitcoin authentication from logs (c31def7)

- Improved syncing/scanning progress updates (faba3f, 6e282fd, fdd46f3, 5ba2a0b)

- Indexer: Fix excessive importing/rescanning (a20ae79)

- Indexer: Fix cache invalidation for spends lookups (360eaee)

- Indexer: Fix handling of missing mempool entries (e9b7511)

- Electrum: Fix TCP listener not shutting down on shutdown signal (5bd639a)

- Docker/CI: Update to Rust v1.49 (5bd639a)

Breaking CLI changes:

- The `--bare-xpub` option was removed. Use a descriptor instead.


------------

Also see the v0.2.1 releases for [bwt-electrum-plugin](https://github.com/bwt-dev/bwt-electrum-plugin/releases/tag/v0.2.1), [libbwt](https://github.com/bwt-dev/libbwt/releases/tag/v0.2.1), [libbwt-nodejs](https://github.com/bwt-dev/libbwt-nodejs/releases/tag/v0.2.1) and [libbwt-jni](https://github.com/bwt-dev/libbwt-jni/releases/tag/v0.2.1).

### Installation

Installation instructions are [available on the README](https://github.com/bwt-dev/bwt#installation).

### Verifying signatures

The releases are signed by Nadav Ivgi (@shesek). The public key can be verified on the [PGP WoT](http://keys.gnupg.net/pks/lookup?op=vindex&amp;fingerprint=on&amp;search=0x81F6104CD0F150FC),
[github](https://api.github.com/users/shesek/gpg_keys), [twitter](https://twitter.com/shesek), [keybase](https://keybase.io/nadav), [hacker news](https://news.ycombinator.com/user?id=nadaviv) and [this video presentation](https://youtu.be/SXJaN2T3M10?t=4).

```bash
# Download (change x86_64-linux to your platform)
$ wget https://github.com/bwt-dev/bwt/releases/download/v0.2.1/bwt-0.2.1-x86_64-linux.tar.gz

# Fetch public key
$ gpg --keyserver keyserver.ubuntu.com --recv-keys FCF19B67866562F08A43AAD681F6104CD0F150FC

# Verify signature
$ wget -qO - https://github.com/bwt-dev/bwt/releases/download/v0.2.1/SHA256SUMS.asc \
  | gpg --decrypt - | grep ' bwt-0.2.1-x86_64-linux.tar.gz$' | sha256sum -c -

$ tar zxvf bwt-0.2.1-x86_64-linux.tar.gz
$ ./bwt-0.1.5-x86_64-linux/bwt --xpub &lt;xpub&gt; ...
```

The signature verification should show `Good signature from &quot;Nadav Ivgi &lt;nadav@shesek.info&gt;&quot; ... Primary key fingerprint: FCF1 9B67 ...` and `bwt-0.2.1-x86_64-linux.tar.gz: OK`.

### Reproducible builds

The builds are fully reproducible.

You can verify the checksums against the v0.2.1 builds on Travis CI: https://travis-ci.org/github/bwt-dev/bwt/builds/754451937

See [more details here](https://github.com/bwt-dev/bwt#reproducible-builds).</summary>
    <title>bwt-dev/bwt: v0.2.1</title>
    <updated>2021-01-14T13:06:37Z</updated>
    <dc:date>2021-01-14T13:06:37Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/rootzoll/raspiblitz/releases/tag/v1.6.3</id>
    <link href="https://github.com/rootzoll/raspiblitz/releases/tag/v1.6.3"/>
    <summary>with mempool 2.0.1, specter 1.0.0, joininbox v0.1.16 &amp; smaller updates + fixes</summary>
    <title>rootzoll/raspiblitz: v1.6.3</title>
    <updated>2021-01-14T02:48:02Z</updated>
    <dc:date>2021-01-14T02:48:02Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/unchained-capital/caravan/releases/tag/v0.3.5</id>
    <link href="https://github.com/unchained-capital/caravan/releases/tag/v0.3.5"/>
    <summary>Update `unchained-wallets` version in order to support new Coldcard firmware version.</summary>
    <title>unchained-capital/caravan: v0.3.5</title>
    <updated>2021-01-12T20:01:19Z</updated>
    <dc:date>2021-01-12T20:01:19Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/mempool/mempool/releases/tag/v2.0.1</id>
    <link href="https://github.com/mempool/mempool/releases/tag/v2.0.1"/>
    <summary>Mempool v2.0.1 is a hotfix release:

* Fixes memory leak by not stacking data in the scan accumulator (#273)
* Also handle going from zero to initial graph data on dashboard</summary>
    <title>mempool/mempool: v2.0.1</title>
    <updated>2021-01-12T12:19:10Z</updated>
    <dc:date>2021-01-12T12:19:10Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.5</id>
    <link href="https://github.com/btcpayserver/btcpayserver/releases/tag/v1.0.6.5"/>
    <summary>This release includes changes in the way we index invoices for search.
As such, after update, the invoice search feature of BTCPay Server might not work for a while. (~5min if you have lot's of invoices)

### Improvements:

* Support a subset of output descriptor in the wallet setup @Kukks
* Improved styling of the notification dropdown (see #2167) @ubolator @dennisreimann
* API keys and server's url can be shown as QR Code to facilitate pairing @Kukks
* Greenfield API: Add `DefaultPaymentMethod` to the store's settings @Kukks
* Greenfield API: Can configure on-chain payment methods @Kukks @NicolasDorier
* UI Improvements (see this [commit list](https://github.com/btcpayserver/btcpayserver/pull/2151/commits)) @dennisreimann

### Bug fixes:

* Always normalize the invoice's currency in uppercase @NicolasDorier
* If a label on a wallet's transaction does not have color, it should still show it @NicolasDorier
* Do not include Tor Location header when querying the modal checkout (see #2180) @Kukks
* Webhooks should not be randomly deleted anymore. @NicolasDorier
* Fix header not showing properly after login to BTCPay Server (see #2155) @dennisreimann
* Bug: Searching invoices was timing out if there was too much invoices @rockstardev @Kukks

### Miscellaneous:

* Removing the old text search engine (DBreeze) @rockstardev @Kukks
* Add doc for asking permissions to BTCPayServer see [link](docs/greenfield-authorization.md). @Kukks</summary>
    <title>btcpayserver/btcpayserver: v1.0.6.5</title>
    <updated>2021-01-11T14:59:56Z</updated>
    <dc:date>2021-01-11T14:59:56Z</dc:date>
  </entry>
  <entry>
    <id>https://github.com/mempool/mempool/releases/tag/v2.0.0</id>
    <link href="https://github.com/mempool/mempool/releases/tag/v2.0.0"/>
    <summary>Mempool v2 is here!

&lt;img width=&quot;1161&quot; alt=&quot;Screen Shot 2021-01-11 at 23 38 10&quot; src=&quot;https://user-images.githubusercontent.com/232186/104195536-16bfd480-5466-11eb-8c66-7e5ed81bf79d.png&quot;&gt;

* Supports Bitcoin Core RPC, Electrum Server, or Esplora backends
* Fully functional block, address, and transaction explorer with APIs
* Dashboard layout displaying fee estimates and other real-time stats
* Support for multiple networks including Testnet, Liquid, and Bisq
* Optional support for Angular Universal Server Side Rendering
* Internationalization support for 20+ languages and locales
* And much more!</summary>
    <title>mempool/mempool: v2.0.0</title>
    <updated>2021-01-11T14:43:58Z</updated>
    <dc:date>2021-01-11T14:43:58Z</dc:date>
  </entry>
  <dc:date>2021-05-08T15:44:28+00:00</dc:date>
</feed>